// app.js - Lexia Study App

// Global variables
let uploadedPdfs = [];
let lexiaChunks = JSON.parse(localStorage.getItem('lexia_chunks')) || [];
// Ensure all chunks have legalArticles property
lexiaChunks = lexiaChunks.map((chunk) => ({
    ...chunk,
    legalArticles: chunk.legalArticles || [],
}));
// --- Higieniza√ß√£o de Dados ao Carregar --- //
// Carrega os flashcards salvos e garante que todos tenham a estrutura de dados correta.
// Isso evita que dados antigos ou corrompidos quebrem a aplica√ß√£o.
// --- Higieniza√ß√£o de Dados ao Carregar --- //
let lexiaFlashcards = (
    JSON.parse(localStorage.getItem('lexia_flashcards')) || []
)
    .map((card, index) => {
        // Verifica√ß√£o mais robusta de dados inv√°lidos
        if (!card || typeof card !== 'object' || !card.id) {
            console.warn('Entrada de flashcard inv√°lida foi removida:', card);
            return null;
        }

        // Garante que todas as propriedades essenciais existam
        return {
            id: card.id,
            question:
                card.question || `[Flashcard Corrompido - ID: ${card.id}]`,
            answer: card.answer || '[Sem Resposta]',
            chunkId: card.chunkId || '',
            easiness: typeof card.easiness === 'number' ? card.easiness : 2.5,
            interval: typeof card.interval === 'number' ? card.interval : 1,
            repetitions:
                typeof card.repetitions === 'number' ? card.repetitions : 0,
            nextReview: card.nextReview
                ? new Date(card.nextReview)
                : new Date(),
            created: card.created || new Date().toISOString(),
            lastReviewed: card.lastReviewed
                ? new Date(card.lastReviewed)
                : null,
            viewCount: typeof card.viewCount === 'number' ? card.viewCount : 0,
            isFavorite: !!card.isFavorite,
            isArchived: !!card.isArchived,
            customName: card.customName || '',
            sourceTrack: card.sourceTrack || 'Geral',
            articleReference: card.articleReference || '',
            articleSubject: card.articleSubject || '',
            law: card.law || '',
            generationFocus: card.generationFocus || '',
            specificFocus: card.specificFocus || '',
            style: card.style || 'direct',
            difficultyLevel: card.difficultyLevel || null, // <-- ADICIONE ESTA LINHA (ou modifique se j√° existir)
        };
    })
    .filter(Boolean); // Remove entradas nulas

// Salva os dados higienizados
saveFlashcards();
let lexiaProgress = JSON.parse(localStorage.getItem('lexia_progress')) || {};
let lexiaEmbeddings =
    JSON.parse(localStorage.getItem('lexia_embeddings')) || [];
let lexiaConfig = JSON.parse(localStorage.getItem('lexia_config')) || {
    geminiApiKey: 'AIzaSyBEGZJ48GOhOFeaADHxs0HJH66f569mO0A',
    darkMode: true,
};

// Chat history
let chatHistory = JSON.parse(localStorage.getItem('lexia_chat_history')) || [];

// ===== NOVO: Vari√°vel para a inst√¢ncia do Mapa Mental =====
let currentMindMapInstance = null; // Para guardar a inst√¢ncia do mapa mental atual
// ==========================================================

// ===== NOVO: Array para armazenar mapas mentais gerados =====
let lexiaMindMaps = JSON.parse(localStorage.getItem('lexia_mind_maps')) || [];
// ==========================================================

// ===== NOVO: Fun√ß√£o para salvar mapas mentais =====
function saveMindMaps() {
    localStorage.setItem('lexia_mind_maps', JSON.stringify(lexiaMindMaps));
    console.log('[MindMap] Mapas mentais salvos:', lexiaMindMaps.length);
}
// ===============================================

// Fun√ß√£o auxiliar local para label de dificuldade

function getDifficultyLabel(level) {
    switch (level) {
        case 'easy':
            return 'F√°cil';

        case 'medium':
            return 'M√©dio';

        case 'difficult':
            return 'Dif√≠cil';

        default:
            return null; // N√£o mostra explicitamente "N√£o classificado" aqui
    }
}

// Fun√ß√£o auxiliar para verificar e esperar por elementos do DOM
function waitForElement(selector, timeout = 5000) {
    return new Promise((resolve, reject) => {
        const element = document.querySelector(selector);
        if (element) {
            resolve(element);
            return;
        }

        const observer = new MutationObserver((mutations, obs) => {
            const element = document.querySelector(selector);
            if (element) {
                obs.disconnect();
                resolve(element);
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true,
        });

        setTimeout(() => {
            observer.disconnect();
            reject(
                new Error(
                    `Elemento ${selector} n√£o encontrado ap√≥s ${timeout}ms`
                )
            );
        }, timeout);
    });
}

// --- Gest√£o de Estat√≠sticas e Favoritos dos Artigos --- //

// Inicializar estruturas de dados
function initializeArticleData() {
    if (!localStorage.getItem('lexia_article_stats')) {
        localStorage.setItem('lexia_article_stats', JSON.stringify({}));
    }
    if (!localStorage.getItem('lexia_article_favorites')) {
        localStorage.setItem('lexia_article_favorites', JSON.stringify([]));
    }
}

// Obter estat√≠sticas do artigo
function getArticleStats(articleId) {
    const stats = JSON.parse(localStorage.getItem('lexia_article_stats')) || {};
    return (
        stats[articleId] || {
            usedInQuestions: 0,
            correctAnswers: 0,
            incorrectAnswers: 0,
            lastUsed: null,
        }
    );
}

// Salvar estat√≠sticas do artigo
function saveArticleStats(articleId, stats) {
    const allStats =
        JSON.parse(localStorage.getItem('lexia_article_stats')) || {};
    allStats[articleId] = stats;
    localStorage.setItem('lexia_article_stats', JSON.stringify(allStats));
}

// Verificar se artigo √© favorito
function isArticleFavorite(articleId) {
    const favorites =
        JSON.parse(localStorage.getItem('lexia_article_favorites')) || [];
    return favorites.includes(articleId);
}

// Alternar favorito do artigo
function toggleArticleFavorite(articleId) {
    const favorites =
        JSON.parse(localStorage.getItem('lexia_article_favorites')) || [];
    const index = favorites.indexOf(articleId);

    if (index > -1) {
        favorites.splice(index, 1);
    } else {
        favorites.push(articleId);
    }

    localStorage.setItem('lexia_article_favorites', JSON.stringify(favorites));
    return index === -1; // Retorna true se foi adicionado como favorito
}

// Atualizar estat√≠sticas quando artigo √© usado em quest√£o
function updateArticleUsage(articleId, wasCorrect) {
    const stats = getArticleStats(articleId);
    stats.usedInQuestions += 1;
    if (wasCorrect) {
        stats.correctAnswers += 1;
    } else {
        stats.incorrectAnswers += 1;
    }
    stats.lastUsed = new Date().toISOString();
    saveArticleStats(articleId, stats);
}

// ==================================================================
// IN√çCIO DA CORRE√á√ÉO: Fun√ß√£o "molde" movida para o topo da se√ß√£o
// ==================================================================
function createArticleItemHTML(article, chunk, articleStats, isFavorite) {
    const usageInfo = `<div class="article-usage">
        <span class="usage-badge">üìä Utilizado em ${articleStats.usedInQuestions} quest√£o(√µes)</span>
        <span class="correct-answers">‚úÖ ${articleStats.correctAnswers}</span>
        <span class="incorrect-answers">‚ùå ${articleStats.incorrectAnswers}</span>
    </div>`;

    return `
        <div class="article-item ${
            isFavorite ? 'favorite' : ''
        }" data-article-id="${article.id}">
            <div class="article-header">
                <button class="btn-icon favorite-toggle" data-article-id="${
                    article.id
                }" title="${
        isFavorite ? 'Remover dos favoritos' : 'Adicionar aos favoritos'
    }">
                    ${isFavorite ? '‚≠ê' : '‚òÜ'}
                </button>
                <div class="article-title">
                    <strong>${article.fullReference}</strong>
                    ${
                        articleStats.usedInQuestions > 0
                            ? '<span class="used-badge">üéØ Utilizado</span>'
                            : ''
                    }
                </div>
            </div>
            <div class="article-details">
                <p class="article-subject"><strong>Assunto:</strong> ${
                    article.subject
                }</p>
                <p class="article-law"><strong>Lei:</strong> ${article.law}</p>
                ${usageInfo}
                ${
                    article.fullText
                        ? `<p class="article-text">${article.fullText.substring(
                              0,
                              150
                          )}${article.fullText.length > 150 ? '...' : ''}</p>`
                        : ''
                }
                ${
                    article.context
                        ? `<p class="article-context"><em>${article.context}</em></p>`
                        : ''
                }
            </div>
            <div class="article-actions">
                <button class="btn btn-secondary read-article-btn" data-article-id="${
                    article.id
                }" data-track="${chunk.file}">
                    Ler art.
                </button>
            </div>
        </div>
    `;
}

// Fun√ß√£o para renderizar artigos favoritos
// Substitua a fun√ß√£o renderFavoriteArticles inteira por esta:

function renderFavoriteArticles(chunkId, articles) {
    const favoriteList = document.getElementById(`favorite-list-${chunkId}`);
    const chunk = lexiaChunks.find((c) => c.id === chunkId); // Precisamos do chunk para o data-track

    if (!favoriteList || !chunk) {
        console.warn(
            `Elemento favorite-list-${chunkId} ou chunk correspondente n√£o encontrado`
        );
        return;
    }

    const favoriteArticles = articles.filter((article) =>
        isArticleFavorite(article.id)
    );

    if (favoriteArticles.length === 0) {
        favoriteList.innerHTML =
            '<p class="no-favorites">Nenhum artigo favorito nesta se√ß√£o.</p>';
        return;
    }

    // Agora, usamos a mesma fun√ß√£o de renderiza√ß√£o da lista principal
    favoriteList.innerHTML = favoriteArticles
        .map((article) => {
            const stats = getArticleStats(article.id);
            // O segundo par√¢metro (chunk) √© necess√°rio para o data-track do bot√£o "Ler art."
            // O terceiro (stats) para as estat√≠sticas e o quarto (isFavorite) √© sempre true aqui.
            return createArticleItemHTML(article, chunk, stats, true);
        })
        .join('');
}

// Inicializar dados dos artigos
initializeArticleData();

// --- Global Persistence Functions --- //
function saveConfig() {
    localStorage.setItem('lexia_config', JSON.stringify(lexiaConfig));
}

function saveChunks() {
    // Ensure legal articles are included in the saved chunks
    const chunksWithArticles = lexiaChunks.map((chunk) => ({
        ...chunk,
        legalArticles: chunk.legalArticles || [],
    }));
    localStorage.setItem('lexia_chunks', JSON.stringify(chunksWithArticles));
    console.log('Chunks salvos com artigos de lei:', chunksWithArticles.length);
}

function saveFlashcards() {
    localStorage.setItem('lexia_flashcards', JSON.stringify(lexiaFlashcards));
    console.log('Flashcards salvos:', lexiaFlashcards.length);
}

function saveProgress() {
    localStorage.setItem('lexia_progress', JSON.stringify(lexiaProgress));
}

function saveEmbeddings() {
    localStorage.setItem('lexia_embeddings', JSON.stringify(lexiaEmbeddings));
}

function saveChatHistory() {
    localStorage.setItem('lexia_chat_history', JSON.stringify(chatHistory));
}

// ADICIONAR ESTAS FUN√á√ïES AUXILIARES:
function getTrackMetadata(fileName) {
    const tracksMetadata =
        JSON.parse(localStorage.getItem('lexia_tracks_metadata')) || {};
    return (
        tracksMetadata[fileName] || {
            displayName: fileName,
            isFavorite: false,
            isArchived: false,
            createdAt: new Date().toISOString(),
            articleCount: 0,
        }
    );
}

function saveTrackMetadata(fileName, metadata) {
    const tracksMetadata =
        JSON.parse(localStorage.getItem('lexia_tracks_metadata')) || {};
    tracksMetadata[fileName] = {
        ...getTrackMetadata(fileName),
        ...metadata,
    };
    localStorage.setItem(
        'lexia_tracks_metadata',
        JSON.stringify(tracksMetadata)
    );
}

function getArticlesCount(fileName) {
    const fileChunks = lexiaChunks.filter((chunk) => chunk.file === fileName);
    return fileChunks.reduce(
        (total, chunk) => total + (chunk.legalArticles?.length || 0),
        0
    );
}

// app.js - Verifique se sua fun√ß√£o deleteTrack est√° completa

function deleteTrack(fileName) {
    console.log(`[Delete] Iniciando exclus√£o da trilha: ${fileName}`);

    // 1. Remover chunks associados ao arquivo
    const initialChunkCount = lexiaChunks.length;
    lexiaChunks = lexiaChunks.filter((chunk) => chunk.file !== fileName);
    console.log(
        `[Delete] Chunks removidos: ${initialChunkCount - lexiaChunks.length}`
    );

    // 2. Remover flashcards associados √† trilha (IMPORTANTE)
    const initialFlashcardCount = lexiaFlashcards.length;
    lexiaFlashcards = lexiaFlashcards.filter(
        (card) => (card.sourceTrack || 'Geral') !== fileName
    );
    console.log(
        `[Delete] Flashcards removidos: ${
            initialFlashcardCount - lexiaFlashcards.length
        }`
    );

    // 3. Remover metadados da trilha
    const tracksMetadata =
        JSON.parse(localStorage.getItem('lexia_tracks_metadata')) || {};
    if (tracksMetadata[fileName]) {
        delete tracksMetadata[fileName];
        localStorage.setItem(
            'lexia_tracks_metadata',
            JSON.stringify(tracksMetadata)
        );
        console.log(`[Delete] Metadados removidos para: ${fileName}`);
    } else {
        console.warn(`[Delete] Metadados n√£o encontrados para: ${fileName}`);
    }

    // 4. Remover estat√≠sticas de artigos associados (Opcional, mas recomendado)
    const articleStats =
        JSON.parse(localStorage.getItem('lexia_article_stats')) || {};
    let statsRemovedCount = 0;
    Object.keys(articleStats).forEach((articleId) => {
        // Assume que o ID do artigo cont√©m o nome do arquivo (ajuste se necess√°rio)
        if (articleId.includes(fileName.replace(/[^a-zA-Z0-9]/g, '_'))) {
            delete articleStats[articleId];
            statsRemovedCount++;
        }
    });
    if (statsRemovedCount > 0) {
        localStorage.setItem(
            'lexia_article_stats',
            JSON.stringify(articleStats)
        );
        console.log(
            `[Delete] Estat√≠sticas de ${statsRemovedCount} artigos removidas.`
        );
    }

    // 5. Remover artigos favoritos associados (Opcional)
    let favorites =
        JSON.parse(localStorage.getItem('lexia_article_favorites')) || [];
    const initialFavCount = favorites.length;
    favorites = favorites.filter(
        (articleId) =>
            !articleId.includes(fileName.replace(/[^a-zA-Z0-9]/g, '_'))
    );
    if (favorites.length < initialFavCount) {
        localStorage.setItem(
            'lexia_article_favorites',
            JSON.stringify(favorites)
        );
        console.log(
            `[Delete] Favoritos de ${
                initialFavCount - favorites.length
            } artigos removidos.`
        );
    }

    // 6. Salvar as altera√ß√µes nos arrays principais
    saveChunks();
    saveFlashcards(); // Salva a lista de flashcards atualizada

    // 7. Atualizar o dashboard (opcional, mas bom para consist√™ncia)
    updateDashboard();

    console.log(`[Delete] Exclus√£o completa para: ${fileName}`);
    // A fun√ß√£o renderDisciplineBlocks() ser√° chamada DEPOIS desta fun√ß√£o, no listener do modal.
}

document.addEventListener('DOMContentLoaded', () => {
    const pdfUpload = document.getElementById('pdf-upload');
    const processPdfsButton = document.getElementById('process-pdfs');
    const disciplineBlocks = document.getElementById('discipline-blocks');
    const chatInput = document.getElementById('chat-input');
    const sendChatButton = document.getElementById('send-chat');
    const chatMessages = document.getElementById('chat-messages');
    const geminiApiKeyInput = document.getElementById('gemini-api-key');
    const saveApiKeyButton = document.getElementById('save-api-key');
    const exportDataButton = document.getElementById('export-data');
    const importDataInput = document.getElementById('import-data');
    const importDataButton = document.getElementById('import-data-button');

    // --- UI Navigation --- //
    document.querySelectorAll('#sidebar nav ul li a').forEach((link) => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            document.querySelectorAll('section').forEach((section) => {
                section.classList.remove('active-section');
            });
            document
                .querySelectorAll('#sidebar nav ul li a')
                .forEach((navLink) => {
                    navLink.classList.remove('active');
                });
            const targetId = this.getAttribute('href').substring(1);
            document.getElementById(targetId).classList.add('active-section');
            this.classList.add('active');

            // Load specific content based on section
            if (targetId === 'dashboard') {
                updateDashboard();
            } else if (targetId === 'study-track') {
                renderDisciplineBlocks();
            } else if (targetId === 'flashcards') {
                renderFlashcards();
            } else if (targetId === 'quiz') {
                renderQuiz();
                // ===== NOVO: Condi√ß√£o para Mapas Mentais =====
            } else if (targetId === 'mindmaps') {
                renderMindMapsSection(); // Chama a nova fun√ß√£o de renderiza√ß√£o
                // ============================================
            } else if (targetId === 'chat') {
                renderChatInterface(); // <-- CORRE√á√ÉO
            }
        });
    });

    // --- Theme Switch --- //
    // MANTENHO APENAS ESTA DECLARA√á√ÉO DO themeSwitch
    const themeSwitch = document.getElementById('theme-switch');
    if (themeSwitch) {
        if (lexiaConfig.darkMode) {
            document.body.classList.add('dark-mode');
            themeSwitch.checked = true;
        }
        themeSwitch.addEventListener('change', () => {
            document.body.classList.toggle('dark-mode', themeSwitch.checked);
            lexiaConfig.darkMode = themeSwitch.checked;
            saveConfig();
        });
    } else {
        console.warn('Elemento theme-switch n√£o encontrado');
    }

    // ===== NOVO: Carregar e higienizar mapas mentais =====
    lexiaMindMaps = (JSON.parse(localStorage.getItem('lexia_mind_maps')) || [])
        .map((map) => {
            if (!map || typeof map !== 'object' || !map.id || !map.mapData) {
                console.warn(
                    '[MindMap] Entrada de mapa mental inv√°lida removida:',
                    map
                );
                return null; // Remove item inv√°lido
            }
            // Garante estrutura m√≠nima
            return {
                id: map.id,
                articleId: map.articleId || '',
                articleReference: map.articleReference || 'Artigo Desconhecido',
                sourceTrack: map.sourceTrack || 'Geral',
                mapData: map.mapData, // Essencial
                difficultyLevel: map.difficultyLevel || null,
                isFavorite: !!map.isFavorite,
                isArchived: !!map.isArchived,
                customName: map.customName || '',
                created: map.created || new Date().toISOString(),
                // Adicionar outras propriedades se necess√°rio (viewCount, lastReviewed?)
            };
        })
        .filter(Boolean); // Remove os nulos
    saveMindMaps(); // Salva a vers√£o higienizada
    console.log(
        '[MindMap] Mapas mentais carregados e higienizados:',
        lexiaMindMaps.length
    );
    // ==================================================

    // --- LocalStorage Management (functions moved to global scope) --- //

    // --- PDF Processing --- //
    pdfUpload.addEventListener('change', (event) => {
        uploadedPdfs = Array.from(event.target.files);
        console.log(
            'PDFs selecionados:',
            uploadedPdfs.map((f) => f.name)
        );

        // ===== ADICIONE ESTA LINHA ABAIXO =====
        updateSelectedFilesDisplay(uploadedPdfs); // Atualiza a UI com os nomes
        // =====================================
    });

    // ===== ADICIONE ESTA NOVA FUN√á√ÉO (pode ser logo ap√≥s o listener acima) =====
    /**
     * Atualiza o elemento #pdf-file-list para mostrar os nomes dos arquivos selecionados.
     * @param {FileList|Array<File>} files - Os arquivos selecionados.
     */
    function updateSelectedFilesDisplay(files) {
        const fileListDisplay = document.getElementById('pdf-file-list');
        if (!fileListDisplay) return;

        if (!files || files.length === 0) {
            fileListDisplay.textContent = 'Nenhum arquivo selecionado';
        } else if (files.length === 1) {
            fileListDisplay.textContent = files[0].name;
            fileListDisplay.title = files[0].name; // Adiciona tooltip para nome completo
        } else {
            fileListDisplay.textContent = `${files.length} arquivos selecionados`;
            // Adiciona tooltip com a lista de nomes
            fileListDisplay.title = Array.from(files)
                .map((f) => f.name)
                .join('\n');
        }
    }
    // =========================================================================

    processPdfsButton.addEventListener('click', async () => {
        if (uploadedPdfs.length === 0) {
            alert('Por favor, selecione os arquivos PDF primeiro.');
            return;
        }

        // Mostrar indicador de carregamento
        const originalButtonText = processPdfsButton.textContent;
        processPdfsButton.textContent = 'Processando...';
        processPdfsButton.disabled = true;

        // Remover chunks j√° existentes para evitar duplica√ß√£o
        const processedFileNames = new Set(uploadedPdfs.map((f) => f.name));
        lexiaChunks = lexiaChunks.filter(
            (chunk) => !processedFileNames.has(chunk.file)
        );

        for (const pdfFile of uploadedPdfs) {
            console.log(
                `Processando ${pdfFile.name} como um documento √∫nico...`
            );

            try {
                const arrayBuffer = await pdfFile.arrayBuffer();
                const pdf = await pdfjsLib.getDocument({ data: arrayBuffer })
                    .promise;
                const numPages = pdf.numPages;
                let fullText = '';

                // Concatenar texto de todas as p√°ginas
                for (let i = 1; i <= numPages; i++) {
                    const page = await pdf.getPage(i);
                    const textContent = await page.getTextContent();
                    const pageText = textContent.items
                        .map((item) => item.str)
                        .join(' ');
                    fullText += pageText + '\n\n'; // Separar p√°ginas com quebras de linha
                }

                // Limpar espa√ßos e caracteres de controle desnecess√°rios
                fullText = fullText.replace(/\s{2,}/g, ' ').replace(/\f/g, '');

                const chunkId = `chunk-${pdfFile.name.replace(
                    /[^a-zA-Z0-9]/g,
                    '_'
                )}-full`;
                let legalArticles = [];

                try {
                    console.log(
                        `Iniciando extra√ß√£o de artigos para ${pdfFile.name}...`
                    );
                    legalArticles = await extractLegalArticles(
                        fullText,
                        pdfFile.name
                    );
                    console.log(
                        `Foram extra√≠dos ${legalArticles.length} artigos de ${pdfFile.name}`
                    );
                } catch (error) {
                    console.error(
                        `Erro na extra√ß√£o de artigos para ${pdfFile.name}:`,
                        error
                    );
                    legalArticles = []; // fallback se a IA falhar
                }

                // Criar chunk √∫nico para o arquivo
                lexiaChunks.push({
                    id: chunkId,
                    file: pdfFile.name,
                    page: `1-${numPages}`,
                    text: fullText, // texto completo para contexto
                    summary: '',
                    flashcard: { question: '', answer: '' },
                    embeddings: [],
                    legalArticles: legalArticles || [],
                });

                // Salvar metadados de acompanhamento (posi√ß√£o correta)
                saveTrackMetadata(pdfFile.name, {
                    articleCount: legalArticles.length,
                });

                console.log(`Processamento de ${pdfFile.name} conclu√≠do.`);
            } catch (error) {
                console.error(`Erro ao processar ${pdfFile.name}:`, error);
                alert(
                    `Erro ao processar ${pdfFile.name}. Verifique se o arquivo √© um PDF v√°lido.`
                );
            }
        }

        // Salvar chunks e atualizar interface
        saveChunks();
        alert(
            `PDFs processados! ${lexiaChunks.length} documentos extra√≠dos com sucesso.`
        );
        renderDisciplineBlocks();
        updateDashboard();

        // Restaurar estado do bot√£o
        processPdfsButton.textContent = originalButtonText;
        processPdfsButton.disabled = false;
    });

    // --- Render Discipline Blocks --- //
    function renderDisciplineBlocks() {
        const disciplineBlocks = document.getElementById('discipline-blocks');

        // Obter trilhas √∫nicas com metadados
        const uniqueFiles = [
            ...new Set(lexiaChunks.map((chunk) => chunk.file)),
        ];
        const tracks = uniqueFiles.map((file) => {
            const metadata = getTrackMetadata(file);
            const fileChunks = lexiaChunks.filter(
                (chunk) => chunk.file === file
            );
            const articlesCount = getArticlesCount(file);

            // Atualizar contagem de artigos se necess√°rio
            if (metadata.articleCount !== articlesCount) {
                saveTrackMetadata(file, { articleCount: articlesCount });
            }

            return {
                fileName: file,
                displayName: metadata.displayName,
                isFavorite: metadata.isFavorite,
                isArchived: metadata.isArchived,
                createdAt: metadata.createdAt,
                pages: fileChunks.length,
                articlesCount: articlesCount,
                chunks: fileChunks,
            };
        });

        // Separar trilhas favoritas e normais
        const favoriteTracks = tracks.filter(
            (track) => track.isFavorite && !track.isArchived
        );
        const normalTracks = tracks.filter(
            (track) => !track.isFavorite && !track.isArchived
        );
        const archivedTracks = tracks.filter((track) => track.isArchived);

        // Aplicar filtros
        const filter = document.getElementById('track-filter')?.value || 'name';
        const sortedTracks = sortTracks([...normalTracks], filter);
        const sortedFavorites = sortTracks([...favoriteTracks], filter);

        disciplineBlocks.innerHTML = `
        <div class="tracks-header">
            <div class="tracks-controls">
                <div class="filter-section">
                    <label for="track-filter">Filtrar por:</label>
                    <select id="track-filter" class="filter-select">
                        <option value="name">Nome</option>
                        <option value="recent">Mais Recentes</option>
                        <option value="oldest">Mais Antigos</option>
                        <option value="most-articles">Mais Artigos</option>
                        <option value="least-articles">Menos Artigos</option>
                    </select>
                </div>
            </div>
        </div>

        ${
            favoriteTracks.length > 0
                ? `
        <div class="favorites-section">
            <h3 class="section-title">‚≠ê Trilhas Favoritas</h3>
            <div class="tracks-grid favorites-grid">
                ${sortedFavorites
                    .map((track) => createTrackCard(track))
                    .join('')}
            </div>
        </div>
        `
                : ''
        }

        <div class="all-tracks-section">
            <h3 class="section-title">Todas as Trilhas</h3>
            ${
                normalTracks.length > 0
                    ? `
            <div class="tracks-grid">
                ${sortedTracks.map((track) => createTrackCard(track)).join('')}
            </div>
            `
                    : '<p class="no-tracks">Nenhuma trilha dispon√≠vel. Carregue PDFs para come√ßar.</p>'
            }
        </div>

        ${
            archivedTracks.length > 0
                ? `
        <div class="archived-section">
            <details>
                <summary class="section-title">üìÅ Trilhas Arquivadas (${
                    archivedTracks.length
                })</summary>
                <div class="tracks-grid archived-grid">
                    ${archivedTracks
                        .map((track) => createTrackCard(track))
                        .join('')}
                </div>
            </details>
        </div>
        `
                : ''
        }
    `;

        // Adicionar event listeners para os filtros
        const filterSelect = document.getElementById('track-filter');
        if (filterSelect) {
            filterSelect.addEventListener('change', renderDisciplineBlocks);
        }

        // Adicionar event listeners para os bot√µes das trilhas
        addTrackEventListeners();
    }

    function sortTracks(tracks, filter) {
        switch (filter) {
            case 'name':
                return tracks.sort((a, b) =>
                    a.displayName.localeCompare(b.displayName)
                );
            case 'recent':
                return tracks.sort(
                    (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
                );
            case 'oldest':
                return tracks.sort(
                    (a, b) => new Date(a.createdAt) - new Date(b.createdAt)
                );
            case 'most-articles':
                return tracks.sort((a, b) => b.articlesCount - a.articlesCount);
            case 'least-articles':
                return tracks.sort((a, b) => a.articlesCount - b.articlesCount);
            default:
                return tracks;
        }
    }

    function createTrackCard(track) {
        return `
        <div class="track-card ${track.isFavorite ? 'favorite' : ''} ${
            track.isArchived ? 'archived' : ''
        }">
            <div class="track-header">
                <h3 class="track-title">${track.displayName}</h3>
                <div class="track-actions">
                    <button class="track-action-btn favorite-btn" data-file="${
                        track.fileName
                    }" title="${
            track.isFavorite ? 'Desfavoritar' : 'Favoritar'
        }">
                        ${track.isFavorite ? '‚≠ê' : '‚òÜ'}
                    </button>
                    <button class="track-action-btn edit-btn" data-file="${
                        track.fileName
                    }" title="Editar nome">‚úèÔ∏è</button>
                    <button class="track-action-btn archive-btn" data-file="${
                        track.fileName
                    }" title="${track.isArchived ? 'Desarquivar' : 'Arquivar'}">
                        ${track.isArchived ? 'üìÇ' : 'üìÅ'}
                    </button>
                    <button class="track-action-btn delete-btn" data-file="${
                        track.fileName
                    }" title="Excluir trilha">üóëÔ∏è</button>
                </div>
            </div>
            
            <div class="track-stats">
                <div class="track-stat">
                    <span class="stat-icon">üìÑ</span>
                    <span class="stat-text">${track.pages} p√°ginas</span>
                </div>
                <div class="track-stat">
                    <span class="stat-icon">‚öñÔ∏è</span>
                    <span class="stat-text">${
                        track.articlesCount
                    } artigos</span>
                </div>
            </div>
            
            <div class="track-footer">
                <button class="btn btn-primary view-content-btn" data-file="${
                    track.fileName
                }">
                    Ver Conte√∫do
                </button>
            </div>
        </div>
    `;
    }

    function addTrackEventListeners() {
        // Bot√£o de favoritar
        document.querySelectorAll('.favorite-btn').forEach((btn) => {
            btn.addEventListener('click', (e) => {
                const fileName = e.target.closest('.favorite-btn').dataset.file;
                const metadata = getTrackMetadata(fileName);
                saveTrackMetadata(fileName, {
                    isFavorite: !metadata.isFavorite,
                });
                renderDisciplineBlocks();
            });
        });

        // Bot√£o de editar
        document.querySelectorAll('.edit-btn').forEach((btn) => {
            btn.addEventListener('click', (e) => {
                const fileName = e.target.closest('.edit-btn').dataset.file;
                const metadata = getTrackMetadata(fileName);
                const newName = prompt(
                    'Digite o novo nome para a trilha:',
                    metadata.displayName
                );
                if (newName && newName.trim() !== '') {
                    saveTrackMetadata(fileName, {
                        displayName: newName.trim(),
                    });
                    renderDisciplineBlocks();
                }
            });
        });

        // Bot√£o de arquivar
        document.querySelectorAll('.archive-btn').forEach((btn) => {
            btn.addEventListener('click', (e) => {
                const fileName = e.target.closest('.archive-btn').dataset.file;
                const metadata = getTrackMetadata(fileName);
                saveTrackMetadata(fileName, {
                    isArchived: !metadata.isArchived,
                });
                renderDisciplineBlocks();
            });
        });

        // Bot√£o de excluir
        document.querySelectorAll('.delete-btn').forEach((btn) => {
            btn.addEventListener('click', (e) => {
                const fileName = e.target.closest('.delete-btn').dataset.file;
                const metadata = getTrackMetadata(fileName);
                showDeleteConfirmation(fileName, metadata.displayName);
            });
        });

        // Bot√£o de ver conte√∫do
        document.querySelectorAll('.view-content-btn').forEach((btn) => {
            btn.addEventListener('click', (e) => {
                const fileName = e.target.dataset.file;
                renderReadingTopic(fileName);
            });
        });
    }

    // app.js - SUBSTITUA a fun√ß√£o showDeleteConfirmation existente por esta

    function showDeleteConfirmation(fileName, displayName) {
        // Cria o overlay do modal (sem altera√ß√µes aqui)
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
        <div class="modal-content confirmation-modal">
            <h3>Confirmar Exclus√£o</h3>
            <div class="confirmation-message">
                <p>Tem certeza que deseja excluir permanentemente a trilha <strong>"${displayName}"</strong>?</p>
                <p class="warning-text">‚ö†Ô∏è Esta a√ß√£o remover√° todos os chunks e flashcards associados a este PDF e n√£o pode ser desfeita!</p>
            </div>
            <div class="confirmation-actions">
                <button class="btn btn-secondary" id="cancel-delete">Cancelar</button>
                <button class="btn btn-error" id="confirm-delete">Sim, Excluir</button>
            </div>
        </div>
    `;

        document.body.appendChild(modal);

        // Listener do bot√£o Cancelar (sem altera√ß√µes)
        const cancelBtn = document.getElementById('cancel-delete');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                if (modal.parentNode) {
                    // Verifica se o modal ainda est√° no DOM
                    document.body.removeChild(modal);
                }
            });
        }

        // ===== CORRE√á√ÉO APLICADA AQUI =====
        // Listener do bot√£o Confirmar Exclus√£o
        const confirmBtn = document.getElementById('confirm-delete');
        if (confirmBtn) {
            confirmBtn.addEventListener('click', () => {
                console.log(`[Delete] Confirmada exclus√£o para: ${fileName}`);

                // 1. Chama a fun√ß√£o que realmente deleta os dados
                deleteTrack(fileName); // (Certifique-se que esta fun√ß√£o remove chunks, flashcards e metadados)

                // 2. Remove o modal da tela
                if (modal.parentNode) {
                    // Verifica se o modal ainda est√° no DOM
                    document.body.removeChild(modal);
                    console.log('[Delete] Modal removido.');
                }

                // 3. **CHAMA A FUN√á√ÉO PARA RENDERIZAR NOVAMENTE A LISTA DE TRILHAS**
                renderDisciplineBlocks(); // <-- Esta linha atualiza a interface imediatamente!
                console.log(
                    '[Delete] Chamando renderDisciplineBlocks para atualizar a lista.'
                );

                // 4. (Opcional) Mostrar notifica√ß√£o de sucesso
                showToast(
                    `Trilha "${displayName}" exclu√≠da com sucesso.`,
                    3000
                ); // Se voc√™ tiver a fun√ß√£o showToast
            });
        }

        // Fechar ao clicar fora (opcional, sem altera√ß√µes)
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                if (modal.parentNode) {
                    document.body.removeChild(modal);
                }
            }
        });
    }

    // --- Legal Articles Helper Functions --- //
    function updateArticleSelectionButtons(chunkId) {
        const checkboxes = document.querySelectorAll(
            `input[data-chunk-id="${chunkId}"].article-checkbox`
        );
        const selectedCount = Array.from(checkboxes).filter(
            (cb) => cb.checked
        ).length;
        const generateButton = document.querySelector(
            `.generate-from-articles[data-chunk-id="${chunkId}"]`
        );

        if (generateButton) {
            generateButton.disabled = selectedCount === 0;
            generateButton.textContent =
                selectedCount > 0
                    ? `Gerar Flashcards/Quiz (${selectedCount} selecionados)`
                    : 'Gerar Flashcards/Quiz dos Selecionados';
        }
    }

    async function reExtractArticles(chunkId) {
        const chunk = lexiaChunks.find((c) => c.id === chunkId);
        if (!chunk) return;

        const button = document.querySelector(
            `.re-extract-articles[data-chunk-id="${chunkId}"]`
        );
        const originalText = button.textContent;
        button.textContent = 'Extraindo...';
        button.disabled = true;

        try {
            const legalArticles = await extractLegalArticles(
                chunk.text,
                chunk.file
            );
            chunk.legalArticles = legalArticles;
            saveChunks();

            // Re-render the current topic to show updated articles
            const fileName = chunk.file;
            renderReadingTopic(fileName);

            alert(
                `Extra√ß√£o conclu√≠da! ${legalArticles.length} artigos encontrados.`
            );
        } catch (error) {
            console.error('Erro ao re-extrair artigos:', error);
            alert('Erro ao extrair artigos. Tente novamente.');
        } finally {
            button.textContent = originalText;
            button.disabled = false;
        }
    }

    async function showArticleGenerationModal(chunkId) {
        const chunk = lexiaChunks.find((c) => c.id === chunkId);
        if (!chunk) return;

        const checkboxes = document.querySelectorAll(
            `input[data-chunk-id="${chunkId}"].article-checkbox:checked`
        );
        const selectedArticles = Array.from(checkboxes)
            .map((cb) => {
                const articleNumber = cb.dataset.articleNumber;
                return chunk.legalArticles.find(
                    (article) => article.number === articleNumber
                );
            })
            .filter(Boolean);

        if (selectedArticles.length === 0) {
            alert('Selecione pelo menos um artigo de lei.');
            return;
        }

        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content article-generation-modal">
                <h3>‚öñÔ∏è Gerar Conte√∫do dos Artigos Selecionados</h3>
                
                <div class="selected-articles-summary">
                    <h4>Artigos Selecionados (${selectedArticles.length}):</h4>
                    <ul>
                        ${selectedArticles
                            .map(
                                (article) => `
                            <li><strong>${article.fullReference}</strong> - ${article.subject}</li>
                        `
                            )
                            .join('')}
                    </ul>
                </div>
                
                <div class="generation-options">
                    <h4>Op√ß√µes de Gera√ß√£o:</h4>
                    
                    <div class="option-group">
                        <label>
                            <input type="checkbox" id="generate-flashcards" checked>
                            Gerar Flashcards (um para cada artigo)
                        </label>
                    </div>
                    
                    <div class="option-group">
                        <label>
                            <input type="checkbox" id="generate-quiz" checked>
                            Gerar Quest√µes de Quiz (baseadas nos artigos)
                        </label>
                    </div>
                    
                    <div class="option-group">
                        <label for="quiz-quantity">Quantidade de quest√µes por artigo:</label>
                        <select id="quiz-quantity">
                            <option value="1">1 quest√£o</option>
                            <option value="2" selected>2 quest√µes</option>
                            <option value="3">3 quest√µes</option>
                        </select>
                    </div>
                    
                    <div class="option-group">
                        <label for="content-focus">Foco do conte√∫do:</label>
                        <select id="content-focus">
                            <option value="complete">Artigo completo</option>
                            <option value="definition">Defini√ß√µes e conceitos</option>
                            <option value="penalties">Penas e san√ß√µes</option>
                            <option value="procedures">Procedimentos</option>
                            <option value="exceptions">Exce√ß√µes e casos especiais</option>
                        </select>
                    </div>
                </div>
                
                <div class="modal-actions">
                    <button class="btn btn-secondary" id="cancel-generation">Cancelar</button>
                    <button class="btn btn-primary" id="start-generation">Iniciar Gera√ß√£o</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        document
            .getElementById('cancel-generation')
            .addEventListener('click', () => {
                document.body.removeChild(modal);
            });

        document
            .getElementById('start-generation')
            .addEventListener('click', async () => {
                const generateFlashcards = document.getElementById(
                    'generate-flashcards'
                ).checked;
                const generateQuiz =
                    document.getElementById('generate-quiz').checked;
                const quizQuantity = parseInt(
                    document.getElementById('quiz-quantity').value
                );
                const contentFocus =
                    document.getElementById('content-focus').value;

                if (!generateFlashcards && !generateQuiz) {
                    alert('Selecione pelo menos uma op√ß√£o de gera√ß√£o.');
                    return;
                }

                document.body.removeChild(modal);
                await generateContentFromArticles(selectedArticles, {
                    generateFlashcards,
                    generateQuiz,
                    quizQuantity,
                    contentFocus,
                    chunkId,
                });
            });
    }

    async function generateContentFromArticles(selectedArticles, options) {
        const {
            generateFlashcards,
            generateQuiz,
            quizQuantity,
            contentFocus,
            chunkId,
        } = options;

        // Show progress
        const progressModal = document.createElement('div');
        progressModal.className = 'modal-overlay';
        progressModal.innerHTML = `
            <div class="modal-content">
                <h3>üîÑ Gerando Conte√∫do...</h3>
                <div class="progress-info">
                    <p id="progress-text">Preparando...</p>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(progressModal);

        const updateProgress = (text, percent) => {
            document.getElementById('progress-text').textContent = text;
            document.getElementById(
                'progress-fill'
            ).style.width = `${percent}%`;
        };

        try {
            let totalTasks = 0;
            let completedTasks = 0;

            if (generateFlashcards) totalTasks += selectedArticles.length;
            if (generateQuiz)
                totalTasks += selectedArticles.length * quizQuantity;

            // Generate flashcards
            if (generateFlashcards) {
                for (const article of selectedArticles) {
                    updateProgress(
                        `Gerando flashcard para ${article.fullReference}...`,
                        (completedTasks / totalTasks) * 100
                    );
                    await generateFlashcardFromArticle(article, contentFocus);
                    completedTasks++;
                }
            }

            // Generate quiz questions
            if (generateQuiz) {
                for (const article of selectedArticles) {
                    for (let i = 0; i < quizQuantity; i++) {
                        updateProgress(
                            `Gerando quest√£o ${i + 1} para ${
                                article.fullReference
                            }...`,
                            (completedTasks / totalTasks) * 100
                        );
                        await generateQuizFromArticle(
                            article,
                            contentFocus,
                            i + 1
                        );
                        completedTasks++;
                    }
                }
            }

            updateProgress('Conclu√≠do!', 100);

            setTimeout(() => {
                document.body.removeChild(progressModal);

                const flashcardCount = generateFlashcards
                    ? selectedArticles.length
                    : 0;
                const questionCount = generateQuiz
                    ? selectedArticles.length * quizQuantity
                    : 0;

                const message =
                    `Gera√ß√£o conclu√≠da com sucesso!\n\n` +
                    `‚úÖ ${flashcardCount} flashcards criados\n` +
                    `‚úÖ ${questionCount} quest√µes criadas\n\n` +
                    `O conte√∫do foi salvo automaticamente.\n` +
                    `Deseja navegar para uma das se√ß√µes?`;

                if (confirm(message)) {
                    if (
                        generateFlashcards &&
                        confirm('Ir para a se√ß√£o de Flashcards?')
                    ) {
                        document
                            .querySelectorAll('section')
                            .forEach((section) => {
                                section.classList.remove('active-section');
                            });
                        document
                            .getElementById('flashcards')
                            .classList.add('active-section');
                        renderFlashcards();
                    } else if (
                        generateQuiz &&
                        confirm('Ir para a se√ß√£o de Quiz?')
                    ) {
                        document
                            .querySelectorAll('section')
                            .forEach((section) => {
                                section.classList.remove('active-section');
                            });
                        document
                            .getElementById('quiz')
                            .classList.add('active-section');
                        renderQuiz();
                    }
                }

                updateDashboard();
            }, 1000);
        } catch (error) {
            console.error('Erro na gera√ß√£o de conte√∫do:', error);
            document.body.removeChild(progressModal);
            alert('Erro durante a gera√ß√£o. Tente novamente.');
        }
    }

    // SUBSTITUA A FUN√á√ÉO 'renderReadingTopic' INTEIRA POR ESTA
    function renderReadingTopic(fileName) {
        document.querySelectorAll('section').forEach((section) => {
            section.classList.remove('active-section');
        });
        document
            .getElementById('reading-topic')
            .classList.add('active-section');

        const fileChunks = lexiaChunks.filter(
            (chunk) => chunk.file === fileName
        );
        let currentPage = 0;
        const chunksPerPage = 3;

        function renderPage(page) {
            const startIndex = page * chunksPerPage;
            const endIndex = Math.min(
                startIndex + chunksPerPage,
                fileChunks.length
            );
            const pageChunks = fileChunks.slice(startIndex, endIndex);

            document.getElementById('topic-content').innerHTML = `
            <div class="topic-header">
                <div class="topic-header-top">
                    <button id="back-button" class="btn btn-secondary">
                        ‚Üê Voltar para Trilha de Estudo
                    </button>
                    <div class="topic-stats">
                        <span>Total de se√ß√µes: ${fileChunks.length}</span>
                        <span>P√°gina ${page + 1} de ${Math.ceil(
                fileChunks.length / chunksPerPage
            )}</span>
                    </div>
                </div>
                <h2>${getTrackMetadata(fileName).displayName}</h2>
            </div>
            <div class="chunks-grid">
                ${pageChunks
                    .map(
                        (chunk) => `
                        <div class="chunk-card" data-chunk-id="${chunk.id}">
                            <div class="chunk-header">
                                <h4>P√°ginas ${chunk.page}</h4>
                                <div class="chunk-actions">
                                    <button data-chunk-id="${
                                        chunk.id
                                    }" class="btn-icon show-articles-btn" title="Ver Artigos de Lei">‚öñÔ∏è</button>
                                </div>
                            </div>
                            <div class="chunk-preview">
                                <p>${chunk.text.substring(0, 200)}${
                            chunk.text.length > 200 ? '...' : ''
                        }</p>
                            </div>
                            <div class="chunk-expanded" style="display: none;">
                                <p>${chunk.text}</p>
                            </div>
                            
                            <div class="legal-articles-section" id="articles-${
                                chunk.id
                            }" style="display: none;">
                                <h5>üìã Artigos de Lei Identificados (${
                                    chunk.legalArticles
                                        ? chunk.legalArticles.length
                                        : 0
                                })</h5>
                                
                                <div class="favorite-articles-section" id="favorites-${
                                    chunk.id
                                }">
                                    <h6>‚≠ê Artigos Favoritos</h6>
                                    <div class="favorite-articles-list" id="favorite-list-${
                                        chunk.id
                                    }">
                                        </div>
                                </div>
                                
                                ${
                                    chunk.legalArticles &&
                                    chunk.legalArticles.length > 0
                                        ? `
                                    <div class="articles-list">
                                        ${chunk.legalArticles
                                            .map((article) => {
                                                const articleStats =
                                                    getArticleStats(article.id);
                                                const isFavorite =
                                                    isArticleFavorite(
                                                        article.id
                                                    );
                                                // Utiliza a nova fun√ß√£o "molde" para renderizar o card
                                                return createArticleItemHTML(
                                                    article,
                                                    chunk,
                                                    articleStats,
                                                    isFavorite
                                                );
                                            })
                                            .join('')}
                                    </div>
                                    `
                                        : `
                                    <p class="no-articles">Nenhum artigo de lei identificado nesta se√ß√£o.</p>
                                    <button class="btn btn-secondary re-extract-articles" data-chunk-id="${chunk.id}">
                                        Tentar Extrair Novamente
                                    </button>
                                `
                                }
                            </div>
                        </div>
                    `
                    )
                    .join('')}
            </div>
            <div class="pagination-controls">
                <button id="prev-page" ${
                    page === 0 ? 'disabled' : ''
                }>‚Üê Anterior</button>
                <span>P√°gina ${page + 1} de ${Math.ceil(
                fileChunks.length / chunksPerPage
            )}</span>
                <button id="next-page" ${
                    endIndex >= fileChunks.length ? 'disabled' : ''
                }>Pr√≥xima ‚Üí</button>
            </div>
        `;

            // Add event listeners (o c√≥digo aqui permanece o mesmo)
            const backBtn = document.getElementById('back-button');
            if (backBtn) {
                backBtn.addEventListener('click', () => {
                    // ... (l√≥gica do bot√£o voltar, j√° est√° correta)
                    document.querySelectorAll('section').forEach((section) => {
                        section.classList.remove('active-section');
                    });
                    document
                        .getElementById('study-track')
                        .classList.add('active-section');
                });
            }

            document
                .querySelectorAll('.show-articles-btn')
                .forEach((button) => {
                    button.addEventListener('click', (event) => {
                        // ... (l√≥gica de mostrar/ocultar artigos, j√° est√° correta)
                        const chunkId =
                            event.target.closest('.show-articles-btn').dataset
                                .chunkId;
                        const articlesSection = document.getElementById(
                            `articles-${chunkId}`
                        );
                        const chunk = lexiaChunks.find((c) => c.id === chunkId);
                        if (
                            articlesSection &&
                            articlesSection.style.display === 'none'
                        ) {
                            articlesSection.style.display = 'block';
                            event.target.title = 'Ocultar Artigos';
                            if (chunk) {
                                renderFavoriteArticles(
                                    chunkId,
                                    chunk.legalArticles
                                );
                            }
                        } else if (articlesSection) {
                            articlesSection.style.display = 'none';
                            event.target.title = 'Ver Artigos de Lei';
                        }
                    });
                });

            document
                .querySelectorAll('.re-extract-articles')
                .forEach((button) => {
                    button.addEventListener('click', async (event) => {
                        const chunkId = event.target.dataset.chunkId;
                        await reExtractArticles(chunkId);
                    });
                });

            // Delega√ß√£o de Eventos para os bot√µes que s√£o criados dinamicamente
            const topicContent = document.getElementById('topic-content');
            topicContent.addEventListener('click', function (e) {
                // 1. Bot√£o de Favoritar
                const favoriteBtn = e.target.closest('.favorite-toggle');
                if (favoriteBtn) {
                    e.stopPropagation();
                    const articleId = favoriteBtn.dataset.articleId;
                    if (!articleId) return;

                    const wasAdded = toggleArticleFavorite(articleId);

                    // Atualiza a apar√™ncia de TODOS os bot√µes e cards com o mesmo ID
                    document
                        .querySelectorAll(
                            `.favorite-toggle[data-article-id="${articleId}"]`
                        )
                        .forEach((btn) => {
                            btn.innerHTML = wasAdded ? '‚≠ê' : '‚òÜ';
                            btn.title = wasAdded
                                ? 'Remover dos favoritos'
                                : 'Adicionar aos favoritos';
                        });
                    document
                        .querySelectorAll(
                            `.article-item[data-article-id="${articleId}"]`
                        )
                        .forEach((item) => {
                            item.classList.toggle('favorite', wasAdded);
                        });

                    // Re-renderiza a lista de favoritos para refletir a mudan√ßa
                    const articlesSection = favoriteBtn.closest(
                        '.legal-articles-section'
                    );
                    if (articlesSection) {
                        const chunkId = articlesSection.id.replace(
                            'articles-',
                            ''
                        );
                        const chunk = lexiaChunks.find((c) => c.id === chunkId);
                        if (chunk && chunk.legalArticles) {
                            renderFavoriteArticles(
                                chunkId,
                                chunk.legalArticles
                            );
                        }
                    }
                    return; // Finaliza a execu√ß√£o para este clique
                }

                // 2. Bot√£o "Ler art."
                const readBtn = e.target.closest('.read-article-btn');
                if (readBtn) {
                    const articleId = readBtn.dataset.articleId;
                    const trackFileName = readBtn.dataset.track;
                    if (articleId && trackFileName) {
                        showArticleContentModal(articleId, trackFileName);
                    }
                    return; // Finaliza a execu√ß√£o para este clique
                }
            });

            // Pagination controls (c√≥digo mantido como estava)
            const prevBtn = document.getElementById('prev-page');
            const nextBtn = document.getElementById('next-page');

            if (prevBtn && !prevBtn.disabled) {
                prevBtn.addEventListener('click', () => {
                    currentPage--;
                    renderPage(currentPage);
                });
            }
            if (nextBtn && !nextBtn.disabled) {
                nextBtn.addEventListener('click', () => {
                    currentPage++;
                    renderPage(currentPage);
                });
            }
        }
        renderPage(currentPage);
    }

    // --- Gemini API Key Management --- //
    if (lexiaConfig.geminiApiKey) {
        geminiApiKeyInput.value = lexiaConfig.geminiApiKey;
    }

    saveApiKeyButton.addEventListener('click', () => {
        lexiaConfig.geminiApiKey = geminiApiKeyInput.value;
        saveConfig();
        alert('Chave da API Gemini salva!');
    });

    // --- Data Export/Import --- //
    exportDataButton.addEventListener('click', () => {
        const data = {
            lexia_config: lexiaConfig,
            lexia_chunks: lexiaChunks,
            lexia_flashcards: lexiaFlashcards,
            lexia_progress: lexiaProgress,
            lexia_embeddings: lexiaEmbeddings,
        };
        const dataStr = JSON.stringify(data, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'lexia_backup.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    });

    importDataInput.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const importedData = JSON.parse(e.target.result);
                    if (importedData.lexia_config)
                        lexiaConfig = importedData.lexia_config;
                    if (importedData.lexia_chunks)
                        lexiaChunks = importedData.lexia_chunks;
                    if (importedData.lexia_flashcards)
                        lexiaFlashcards = importedData.lexia_flashcards;
                    if (importedData.lexia_progress)
                        lexiaProgress = importedData.lexia_progress;
                    if (importedData.lexia_embeddings)
                        lexiaEmbeddings = importedData.lexia_embeddings;

                    saveConfig();
                    saveChunks();
                    saveFlashcards();
                    saveProgress();
                    saveEmbeddings();

                    alert('Dados importados com sucesso!');
                    location.reload(); // Reload to apply all changes
                } catch (e) {
                    alert('Erro ao importar dados: arquivo JSON inv√°lido.');
                    console.error(e);
                }
            };
            reader.readAsText(file);
        }
    });

    // --- Event Listeners --- //
    // Add event listener for flashcards section
    document
        .querySelector('#sidebar nav ul li a[href="#flashcards"]')
        .addEventListener('click', () => {
            renderFlashcards();
        });

    // Add event listeners for chat
    sendChatButton.addEventListener('click', sendChatMessage);
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendChatMessage();
        }
    });

    // Load chat history when chat section is accessed
    document
        .querySelector('#sidebar nav ul li a[href="#chat"]')
        .addEventListener('click', () => {
            setTimeout(loadChatHistory, 100);
        });

    // Initial setup
    if (lexiaChunks.length > 0) {
        renderDisciplineBlocks();
    }

    updateDashboard();

    // Set initial active section
    document.getElementById('dashboard').classList.add('active-section');
    document
        .querySelector('#sidebar nav ul li a[href="#dashboard"]')
        .classList.add('active');
});

// --- SM-2 Algorithm Implementation --- //
class SM2Algorithm {
    static calculateNextReview(quality, easiness, interval, repetitions) {
        let newEasiness = easiness;
        let newInterval = interval;
        let newRepetitions = repetitions;

        if (quality >= 3) {
            if (repetitions === 0) {
                newInterval = 1;
            } else if (repetitions === 1) {
                newInterval = 6;
            } else {
                newInterval = Math.round(interval * easiness);
            }
            newRepetitions = repetitions + 1;
        } else {
            newRepetitions = 0;
            newInterval = 1;
        }

        newEasiness =
            easiness + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));
        if (newEasiness < 1.3) {
            newEasiness = 1.3;
        }

        return {
            easiness: newEasiness,
            interval: newInterval,
            repetitions: newRepetitions,
            nextReview: new Date(
                Date.now() + newInterval * 24 * 60 * 60 * 1000
            ),
        };
    }

    static createFlashcard(id, question, answer, chunkId) {
        return {
            id: id,
            question: question,
            answer: answer,
            chunkId: chunkId,
            easiness: 2.5,
            interval: 1,
            repetitions: 0,
            nextReview: new Date(),
            created: new Date(),
            lastReviewed: null,
        };
    }
}

// Adicionar em app.js

function updateFlashcardStats() {
    const statsContainer = document.querySelector('.flashcards-stats');
    if (!statsContainer) return;

    // Recalcula os totais com base no estado atual de lexiaFlashcards
    const total = lexiaFlashcards.filter((card) => !card.isArchived).length;
    const favorites = lexiaFlashcards.filter(
        (f) => f.isFavorite && !f.isArchived
    ).length;
    const archived = lexiaFlashcards.filter((f) => f.isArchived).length;

    statsContainer.innerHTML = `
        <span class="stat">Total: ${total}</span>
        <span class="stat">Favoritos: ${favorites}</span>
        <span class="stat">Arquivados: ${archived}</span>
    `;
}

// Adicione esta nova fun√ß√£o em app.js

// Adicione esta nova fun√ß√£o em app.js

// Adicione esta fun√ß√£o em app.js

// SUBSTITUA A FUN√á√ÉO handleStatisticalQuery INTEIRA POR ESTA:

function handleStatisticalQuery(query) {
    const lowerQuery = query.toLowerCase();

    // 1. Coleta de todos os dados necess√°rios
    const stats = JSON.parse(localStorage.getItem('lexia_article_stats')) || {};
    const articlesWithStats = Object.entries(stats).map(([id, data]) => ({
        id,
        ...data,
    }));

    // Cria um mapa para busca r√°pida de refer√™ncias de artigos
    const articleMap = new Map();
    lexiaChunks.forEach((chunk) => {
        (chunk.legalArticles || []).forEach((article) => {
            articleMap.set(article.id, article);
        });
    });

    // Fun√ß√£o auxiliar para formatar a lista de artigos
    const formatTopArticles = (articleList, metricField, metricLabel) => {
        if (
            !articleList ||
            articleList.length === 0 ||
            articleList[0][metricField] === 0
        ) {
            return null; // Retorna null se n√£o houver dados relevantes
        }
        let response = '';
        articleList.slice(0, 3).forEach((stat, index) => {
            const article = articleMap.get(stat.id);
            const ref = article ? article.fullReference : stat.id;
            response += `${index + 1}. **${ref}** - ${
                stat[metricField]
            } ${metricLabel}\n`;
        });
        return response;
    };

    // --- L√ìGICA DE RESPOSTAS ---

    // PERGUNTA: Desempenho Geral
    if (
        lowerQuery.includes('desempenho geral') ||
        lowerQuery.includes('meu progresso') ||
        lowerQuery.includes('minhas estat√≠sticas')
    ) {
        const totalQuizzes = quizManager.quizHistory.length;
        const totalQuestions = quizManager.quizHistory.reduce(
            (sum, quiz) => sum + quiz.questions.length,
            0
        );
        const correctAnswers = quizManager.quizHistory.reduce(
            (sum, quiz) => sum + quiz.score,
            0
        );
        const accuracy =
            totalQuestions > 0
                ? ((correctAnswers / totalQuestions) * 100).toFixed(1)
                : 0;
        const totalFlashcardsReviewed = lexiaFlashcards.reduce(
            (sum, card) => sum + (card.viewCount || 0),
            0
        );

        let response =
            'Claro! Aqui est√° um resumo do seu progresso na plataforma:\n\n';
        response += `* **Quizzes:** Voc√™ completou **${totalQuizzes}** quizzes, respondendo a um total de **${totalQuestions}** quest√µes com uma precis√£o geral de **${accuracy}%**.\n`;
        response += `* **Flashcards:** Voc√™ realizou **${totalFlashcardsReviewed}** revis√µes de flashcards no total.\n`;
        response += `* **Artigos:** **${articlesWithStats.length}** artigos diferentes j√° foram abordados em seus quizzes.\n\n`;
        response +=
            'Continue com o √≥timo trabalho! üí™ Se quiser detalhes sobre algum ponto, √© s√≥ pedir.';
        return response;
    }

    // PERGUNTA: Artigos com mais erros
    if (
        lowerQuery.includes('mais errei') ||
        lowerQuery.includes('mais erro') ||
        lowerQuery.includes('piores artigos')
    ) {
        const sortedByErrors = articlesWithStats.sort(
            (a, b) => b.incorrectAnswers - a.incorrectAnswers
        );
        const topErrors = formatTopArticles(
            sortedByErrors,
            'incorrectAnswers',
            'erro(s)'
        );

        if (topErrors) {
            return (
                'Analisando seu desempenho, os artigos em que voc√™ mais cometeu erros em quizzes s√£o:\n\n' +
                topErrors +
                '\nSeria uma boa ideia focar a revis√£o neles!'
            );
        }
        return '√ìtima not√≠cia! Voc√™ ainda n√£o errou nenhuma quest√£o baseada em artigos. Continue assim! ‚úÖ';
    }

    // PERGUNTA: Artigos com mais acertos
    if (
        lowerQuery.includes('mais acertei') ||
        lowerQuery.includes('mais acerto') ||
        lowerQuery.includes('melhores artigos')
    ) {
        const sortedByCorrect = articlesWithStats.sort(
            (a, b) => b.correctAnswers - a.correctAnswers
        );
        const topCorrect = formatTopArticles(
            sortedByCorrect,
            'correctAnswers',
            'acerto(s)'
        );

        if (topCorrect) {
            return (
                'Parab√©ns! Seus melhores desempenhos em quizzes foram nos seguintes artigos:\n\n' +
                topCorrect
            );
        }
        return 'Ainda n√£o h√° registros de acertos em quest√µes de artigos. Continue praticando!';
    }

    // PERGUNTA: Artigos mais utilizados
    if (
        lowerQuery.includes('mais utilizados') ||
        lowerQuery.includes('mais cobrados') ||
        lowerQuery.includes('mais testados')
    ) {
        const sortedByUsage = articlesWithStats.sort(
            (a, b) => b.usedInQuestions - a.usedInQuestions
        );
        const topUsed = formatTopArticles(
            sortedByUsage,
            'usedInQuestions',
            'uso(s)'
        );

        if (topUsed) {
            return (
                'Os artigos que mais apareceram em seus quizzes at√© agora foram:\n\n' +
                topUsed
            );
        }
        return 'Voc√™ ainda n√£o respondeu a nenhuma quest√£o baseada em artigos espec√≠ficos.';
    }

    // PERGUNTA: Artigos nunca utilizados
    if (
        lowerQuery.includes('nunca utilizei') ||
        lowerQuery.includes('nunca testei') ||
        lowerQuery.includes('nunca foram usados')
    ) {
        const allArticleIds = Array.from(articleMap.keys());
        const usedArticleIds = new Set(articlesWithStats.map((a) => a.id));
        const unusedArticles = allArticleIds.filter(
            (id) => !usedArticleIds.has(id)
        );

        if (unusedArticles.length > 0) {
            let response = `Voc√™ tem **${unusedArticles.length}** artigos que ainda n√£o foram testados em quizzes. √â uma √≥tima oportunidade para explorar novos conte√∫dos!\n\nAlguns exemplos s√£o:\n`;
            unusedArticles.slice(0, 5).forEach((id) => {
                const article = articleMap.get(id);
                if (article) {
                    response += `* **${article.fullReference}** (${article.subject})\n`;
                }
            });
            return response;
        }
        return 'Impressionante! Parece que voc√™ j√° abordou todos os artigos dispon√≠veis em seus quizzes.';
    }

    // PERGUNTA: Flashcards mais vistos
    if (
        lowerQuery.includes('flashcard mais visto') ||
        lowerQuery.includes('flashcards mais vistos') ||
        lowerQuery.includes('flashcards que mais revisei')
    ) {
        const sortedByViews = [...lexiaFlashcards].sort(
            (a, b) => (b.viewCount || 0) - (a.viewCount || 0)
        );
        const topViewed = sortedByViews.slice(0, 5);

        if (topViewed.length > 0 && topViewed[0].viewCount > 0) {
            let response = 'Os flashcards que voc√™ mais revisou s√£o:\n\n';
            topViewed.forEach((card) => {
                if ((card.viewCount || 0) > 0) {
                    const title =
                        card.articleReference ||
                        card.question.substring(0, 50) + '...';
                    response += `* **${title}** - ${card.viewCount} revis√µes\n`;
                }
            });
            return response;
        }
        return 'Voc√™ ainda n√£o revisou nenhum flashcard.';
    }

    // PERGUNTA: Flashcards nunca vistos
    if (
        lowerQuery.includes('flashcards que n√£o vi') ||
        lowerQuery.includes('flashcards nunca vistos')
    ) {
        const unseenFlashcards = lexiaFlashcards.filter(
            (card) => (card.viewCount || 0) === 0 && !card.isArchived
        );

        if (unseenFlashcards.length > 0) {
            let response = `Encontrei **${unseenFlashcards.length}** flashcards que voc√™ ainda n√£o revisou. Que tal come√ßar por eles?\n\nAlguns deles s√£o:\n`;
            unseenFlashcards.slice(0, 5).forEach((card) => {
                const title =
                    card.articleReference ||
                    card.question.substring(0, 50) + '...';
                response += `* **${title}**\n`;
            });
            return response;
        }
        return 'Parab√©ns! Voc√™ j√° revisou todos os seus flashcards ao menos uma vez.';
    }

    // Fallback: se nenhuma inten√ß√£o espec√≠fica foi encontrada
    return "N√£o consegui entender sua pergunta sobre estat√≠sticas. Tente perguntar sobre seu 'desempenho geral', 'artigos que mais errei', 'flashcards mais vistos' ou 'artigos nunca utilizados'.";
}

// Adicione esta fun√ß√£o em app.js

// SUBSTITUA A FUN√á√ÉO isStatisticalQuery EXISTENTE POR ESTA:

function isStatisticalQuery(query) {
    const lowerQuery = query.toLowerCase();
    const keywords = [
        'meu progresso',
        'minhas estat√≠sticas',
        'meu desempenho',
        'desempenho geral',
        'mais errei',
        'mais erro',
        'piores artigos',
        'mais acertei',
        'mais acerto',
        'melhores artigos',
        'mais utilizados',
        'mais cobrados',
        'mais testados',
        'nunca utilizei',
        'nunca testei',
        'nunca foram usados',
        'flashcard mais visto',
        'flashcards mais vistos', // <-- CORRE√á√ÉO: Adicionada a forma singular
        'flashcard que mais revisei',
        'flashcards que mais revisei',
        'flashcards que n√£o vi',
        'flashcards nunca vistos',
        'quantas vezes',
    ];
    // Retorna true se qualquer uma das palavras-chave for encontrada na pergunta
    return keywords.some((keyword) => lowerQuery.includes(keyword));
}

// Adicione esta nova fun√ß√£o em app.js

function renderChatSuggestions() {
    const suggestions = [
        'Qual meu desempenho geral?',
        'Quais artigos eu mais errei?',
        'Quais flashcards eu nunca revisei?',
        'Mostre meus flashcards mais vistos',
    ];

    return `
        <div id="chat-suggestions">
            <p>Ou tente uma destas perguntas:</p>
            <div class="suggestion-buttons">
                ${suggestions
                    .map(
                        (q) =>
                            `<button class="btn btn-secondary suggestion-btn" data-question="${q}">${q}</button>`
                    )
                    .join('')}
            </div>
        </div>
    `;
}

// SUBSTITUA A FUN√á√ÉO 'setupChatEventListeners' INTEIRA POR ESTA VERS√ÉO CORRIGIDA:

function setupChatEventListeners() {
    const chatInput = document.getElementById('chat-input');
    const sendChatButton = document.getElementById('send-chat');
    const chatInterface = document.getElementById('chat-interface'); // Pega o cont√™iner principal
    const suggestionsContainer = document.getElementById(
        'chat-suggestions-container'
    );
    const showSuggestionsBtn = document.getElementById('show-suggestions-btn');

    // Valida√ß√£o para garantir que todos os elementos existem
    if (
        !chatInput ||
        !sendChatButton ||
        !chatInterface ||
        !suggestionsContainer ||
        !showSuggestionsBtn
    ) {
        console.error(
            'ERRO: Elementos essenciais do chat n√£o encontrados para adicionar listeners.'
        );
        return;
    }

    // --- Listener para Enviar Mensagem (Click) ---
    sendChatButton.addEventListener('click', sendChatMessage);

    // --- Listener para Enviar Mensagem (Enter) ---
    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault(); // Impede nova linha
            sendChatMessage();
        }
    });

    // --- Listener para Auto-ajuste de Altura do Textarea ---
    chatInput.addEventListener('input', () => {
        chatInput.style.height = 'auto'; // Reseta altura
        chatInput.style.height = `${chatInput.scrollHeight}px`; // Ajusta √† altura do conte√∫do
    });

    // --- Listener para o Bot√£o de Mostrar/Esconder Sugest√µes (üí°) ---
    showSuggestionsBtn.addEventListener('click', () => {
        // Verifica se a classe est√° presente no cont√™iner principal
        const isVisible = chatInterface.classList.contains(
            'suggestions-visible'
        );

        if (isVisible) {
            // Se est√° vis√≠vel -> Esconder
            suggestionsContainer.innerHTML = ''; // Limpa o conte√∫do das sugest√µes
            chatInterface.classList.remove('suggestions-visible'); // Remove a classe
            showSuggestionsBtn.setAttribute('aria-expanded', 'false');
            // Opcional: Mudar visual do bot√£o (ex: remover classe 'active')
            showSuggestionsBtn.classList.remove('active');
        } else {
            // Se est√° escondido -> Mostrar
            suggestionsContainer.innerHTML = renderChatSuggestions(); // Gera e insere o HTML das sugest√µes
            chatInterface.classList.add('suggestions-visible'); // Adiciona a classe
            showSuggestionsBtn.setAttribute('aria-expanded', 'true');
            // Opcional: Mudar visual do bot√£o (ex: adicionar classe 'active')
            showSuggestionsBtn.classList.add('active');

            // --- DELEGA√á√ÉO DE EVENTOS para os bot√µes de sugest√£o rec√©m-criados ---
            // Adiciona um listener no CONTAINER das sugest√µes que "ouve" cliques nos bot√µes internos
            suggestionsContainer.addEventListener(
                'click',
                function handleSuggestionClick(e) {
                    const suggestionBtn = e.target.closest('.suggestion-btn');
                    if (suggestionBtn) {
                        const question = suggestionBtn.dataset.question;
                        chatInput.value = question; // Preenche o input
                        sendChatMessage(); // Envia a mensagem

                        // Esconde as sugest√µes ap√≥s o uso
                        suggestionsContainer.innerHTML = '';
                        chatInterface.classList.remove('suggestions-visible');
                        showSuggestionsBtn.setAttribute(
                            'aria-expanded',
                            'false'
                        );
                        showSuggestionsBtn.classList.remove('active');

                        // Importante: Remove o listener de clique do container para evitar duplica√ß√µes futuras
                        suggestionsContainer.removeEventListener(
                            'click',
                            handleSuggestionClick
                        );
                    }
                }
            );
            // --- FIM DA DELEGA√á√ÉO ---
        }
    });

    console.log('[Chat] Event listeners configurados.');
    // Nota: loadChatHistory() geralmente √© chamado ao NAVEGAR para a se√ß√£o de chat, n√£o aqui.
}

// SUBSTITUA A FUN√á√ÉO 'renderChatInterface' INTEIRA POR ESTA:

// SUBSTITUA A FUN√á√ÉO 'renderChatInterface' INTEIRA POR ESTA:

function renderChatInterface() {
    const chatSection = document.getElementById('chat');
    chatSection.innerHTML = `
        <h2>Chat IA</h2>
        <div id="chat-interface">
            <div id="chat-messages">
                </div>
            
            <div id="chat-suggestions-container">
                </div>

            <div class="chat-input-container">
                <button id="show-suggestions-btn" class="btn btn-secondary" title="Mostrar Sugest√µes de Perguntas">
                    üí°
                </button>
                <textarea id="chat-input" placeholder="Pergunte algo sobre os PDFs..." rows="1"></textarea>
                <button id="send-chat" class="btn btn-primary" title="Enviar Mensagem">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="22" y1="2" x2="11" y2="13"></line>
                        <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                    </svg>
                </button>
            </div>
            </div>
    `;
    setupChatEventListeners();
    loadChatHistory();
}

// ===================================================== //
// ===== IN√çCIO: Funcionalidade de Mapa Mental ===== //
// ===================================================== //

// app.js - SUBSTITUA a fun√ß√£o renderMindMapsSection inteira por esta

/**
 * @function renderMindMapsSection
 * @description Renderiza a interface COMPLETA da se√ß√£o de Mapas Mentais,
 * incluindo gera√ß√£o, filtros, lista de cards e pagina√ß√£o.
 */
function renderMindMapsSection() {
    console.log('[MindMap] Renderizando se√ß√£o COMPLETA de Mapas Mentais...');
    const mindMapSection = document.getElementById('mindmaps');
    if (!mindMapSection) {
        console.error('[MindMap] ERRO: Se√ß√£o #mindmaps n√£o encontrada.');
        return;
    }

    // --- Salvar estado dos filtros ---
    const viewFilterValue =
        document.getElementById('mindmaps-view-filter')?.value || 'all';
    const sortFilterValue =
        document.getElementById('mindmaps-sort-filter')?.value || 'recent';
    const trackFilterValue =
        document.getElementById('mindmaps-track-filter')?.value || 'all';
    const difficultyFilterValue =
        document.getElementById('mindmaps-difficulty-filter')?.value || 'all';
    const mapsPerPage = parseInt(
        document.getElementById('mindmaps-per-page-filter')?.value || 12
    );

    // --- L√≥gica de filtragem ---
    let mapsToDisplay = [...lexiaMindMaps];
    if (viewFilterValue === 'archived') {
        mapsToDisplay = mapsToDisplay.filter((map) => map.isArchived);
    } else {
        mapsToDisplay = mapsToDisplay.filter((map) => !map.isArchived); // Filtra ativos por padr√£o
        if (viewFilterValue === 'favorites') {
            mapsToDisplay = mapsToDisplay.filter((map) => map.isFavorite);
        }
        // Adicionar filtros de 'viewed'/'not-viewed' se essas propriedades forem implementadas
    }
    if (trackFilterValue !== 'all') {
        mapsToDisplay = mapsToDisplay.filter(
            (map) => (map.sourceTrack || 'Geral') === trackFilterValue
        );
    }
    if (difficultyFilterValue !== 'all') {
        if (difficultyFilterValue === 'unrated') {
            mapsToDisplay = mapsToDisplay.filter((map) => !map.difficultyLevel);
        } else {
            mapsToDisplay = mapsToDisplay.filter(
                (map) => map.difficultyLevel === difficultyFilterValue
            );
        }
    }

    // --- L√≥gica de Ordena√ß√£o ---
    mapsToDisplay.sort((a, b) => {
        // Favoritos sempre primeiro (se n√£o estiver arquivado)
        if (!a.isArchived && a.isFavorite && !b.isFavorite) return -1;
        if (!a.isArchived && !a.isFavorite && b.isFavorite) return 1;

        switch (sortFilterValue) {
            case 'recent':
                return new Date(b.created) - new Date(a.created);
            case 'oldest':
                return new Date(a.created) - new Date(b.created);
            // case 'views': return (b.viewCount || 0) - (a.viewCount || 0); // Se viewCount for implementado
            case 'name':
                const nameA = a.customName || a.articleReference || a.id;
                const nameB = b.customName || b.articleReference || b.id;
                return nameA.localeCompare(nameB);
            default:
                return 0;
        }
    });

    // --- C√°lculo de Posi√ß√£o (se necess√°rio para m√∫ltiplos mapas do mesmo artigo) ---
    // (Pode ser omitido inicialmente se cada mapa √© √∫nico por artigo)

    // --- Prepara√ß√£o de dados para Filtros ---
    const mindMapsByTrack = {};
    lexiaMindMaps.forEach((map) => {
        const trackName = map.sourceTrack || 'Geral';
        if (!mindMapsByTrack[trackName]) mindMapsByTrack[trackName] = [];
        mindMapsByTrack[trackName].push(map);
    });

    // --- L√≥gica de Pagina√ß√£o ---
    const totalMaps = mapsToDisplay.length;
    const totalPages = Math.ceil(totalMaps / mapsPerPage) || 1;
    let currentPage = parseInt(mindMapSection.dataset.currentPage || 1);
    if (currentPage > totalPages) currentPage = totalPages;
    mindMapSection.dataset.currentPage = currentPage; // Salva a p√°gina atual no elemento da se√ß√£o
    const startIndex = (currentPage - 1) * mapsPerPage;
    const endIndex = startIndex + mapsPerPage;
    const paginatedMaps = mapsToDisplay.slice(startIndex, endIndex);

    // --- Gera√ß√£o do HTML (SEM COMENT√ÅRIOS JSX) ---
    mindMapSection.innerHTML = `
        <h2><span class="section-icon">üß†</span> Mapas Mentais</h2>

        <div class="mindmaps-container">

            <div class="generation-section card">
                <h3>‚ö° Gerar Novos Mapas Mentais</h3>
                <div class="tracks-selection" id="mindmap-article-selection-area">
                    <p>Carregando artigos...</p> </div>
                <button id="generate-selected-mindmaps" class="btn btn-primary generate-btn" disabled>üöÄ Gerar Mapa(s)</button>
            </div>

            <div class="existing-content card">
                <div class="section-header">
                    <h3>üìö Meus Mapas Mentais</h3>
                    <div class="content-stats" id="mindmaps-stats">
                         </div>
                </div>

                <div class="review-actions">
                    <button id="review-all-mindmaps-btn" class="btn btn-secondary" ${
                        totalMaps === 0 ? 'disabled' : ''
                    }>
                        Revisar Todos (${totalMaps})
                    </button>
                    <button id="review-mindmaps-by-difficulty-btn" class="btn btn-secondary" ${
                        totalMaps === 0 ? 'disabled' : ''
                    }>
                        Revisar por Dificuldade...
                    </button>
                </div>

                <button id="toggle-mindmap-filters-btn" class="btn btn-secondary toggle-filters-btn">
                    Filtros <span>‚ñæ</span>
                </button>

                <div class="content-filters" id="collapsible-mindmap-filters">
                    <div class="filter-group">
                        <label>Filtrar por:</label>
                        <select id="mindmaps-view-filter" class="filter-select">
                            <option value="all">Ativos</option>
                            <option value="favorites">Favoritos</option>
                            <option value="archived">Arquivados</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Ordenar por:</label>
                        <select id="mindmaps-sort-filter" class="filter-select">
                            <option value="recent">Mais Recentes</option>
                            <option value="oldest">Mais Antigos</option>
                            <option value="name">Nome/Artigo</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Trilha:</label>
                        <select id="mindmaps-track-filter" class="filter-select">
                            <option value="all">Todas as Trilhas</option>
                            ${Object.keys(mindMapsByTrack)
                                .sort()
                                .map(
                                    (track) =>
                                        `<option value="${track}">${
                                            getTrackMetadata(track)
                                                .displayName || track
                                        }</option>`
                                )
                                .join('')}
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Dificuldade:</label>
                        <select id="mindmaps-difficulty-filter" class="filter-select">
                             <option value="all">Todas</option>
                             <option value="easy">F√°cil</option>
                             <option value="medium">M√©dio</option>
                             <option value="difficult">Dif√≠cil</option>
                             <option value="unrated">N√£o Classificado</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Itens por p√°g.:</label>
                        <select id="mindmaps-per-page-filter" class="filter-select">
                            <option value="12">12</option>
                            <option value="24">24</option>
                            <option value="48">48</option>
                        </select>
                    </div>
                </div>

                <div class="content-grid" id="mindmaps-grid">
                    ${renderMindMapCardList(paginatedMaps)} </div>

                <div class="pagination-controls" id="mindmaps-pagination">
                    <button id="prev-mindmap-page-btn" class="btn" ${
                        currentPage === 1 ? 'disabled' : ''
                    }>Anterior</button>
                    <span class="page-info">P√°gina ${currentPage} de ${totalPages} (${totalMaps} mapas)</span>
                    <button id="next-mindmap-page-btn" class="btn" ${
                        currentPage === totalPages || totalPages === 0
                            ? 'disabled'
                            : ''
                    }>Pr√≥xima</button>
                </div>
            </div>
        </div>
    `;

    // --- Atualizar Stats ---
    updateMindMapStats(); // Chama a fun√ß√£o para calcular e exibir stats

    // --- Restaurar valores dos filtros ---
    const viewSelect = document.getElementById('mindmaps-view-filter');
    const sortSelect = document.getElementById('mindmaps-sort-filter');
    const trackSelect = document.getElementById('mindmaps-track-filter');
    const difficultySelect = document.getElementById(
        'mindmaps-difficulty-filter'
    );
    const perPageSelect = document.getElementById('mindmaps-per-page-filter');

    if (viewSelect) viewSelect.value = viewFilterValue;
    if (sortSelect) sortSelect.value = sortFilterValue;
    if (trackSelect) trackSelect.value = trackFilterValue;
    if (difficultySelect) difficultySelect.value = difficultyFilterValue;
    if (perPageSelect) perPageSelect.value = mapsPerPage;

    // --- Renderizar Sele√ß√£o de Artigos e Anexar Listeners ---
    renderMindMapArticleSelection(); // Renderiza a lista de artigos na √°rea de gera√ß√£o
    setupMindMapEventListeners(); // Anexa TODOS os listeners da se√ß√£o de mapas mentais
}

// app.js - SUBSTITUA a fun√ß√£o renderMindMapCardList inteira por esta

/**
 * @function renderMindMapCardList
 * @description Gera o HTML para a lista de cards de mapas mentais.
 * @param {Array} mindMaps - Array de objetos de mapa mental a serem exibidos.
 * @returns {string} O HTML da lista de cards.
 */
function renderMindMapCardList(mindMaps) {
    console.log(
        `[MindMap] Renderizando ${mindMaps?.length || 0} cards de mapa mental.`
    );

    if (!mindMaps || mindMaps.length === 0) {
        return '<p class="no-items">Nenhum mapa mental encontrado para os filtros selecionados.</p>';
    }

    // Fun√ß√£o auxiliar para label de dificuldade
    const getDifficultyLabel = (level) => {
        switch (level) {
            case 'easy':
                return 'F√°cil';
            case 'medium':
                return 'M√©dio';
            case 'difficult':
                return 'Dif√≠cil';
            default:
                return null;
        }
    };

    return mindMaps
        .map((map) => {
            if (!map || typeof map !== 'object') {
                console.warn(
                    '[MindMap] Item de mapa mental inv√°lido encontrado:',
                    map
                );
                return ''; // Ignora item inv√°lido
            }

            const safeMap = {
                id: map.id || `missing-id-${Date.now()}-${Math.random()}`,
                customName: map.customName || '',
                articleReference: map.articleReference || 'Artigo Desconhecido',
                sourceTrack: map.sourceTrack || 'Geral',
                isFavorite: map.isFavorite || false,
                isArchived: map.isArchived || false,
                created: map.created || new Date().toISOString(),
                difficultyLevel: map.difficultyLevel || null,
            };

            let displayName = safeMap.customName || safeMap.articleReference;
            // Adicionar l√≥gica de expoente se m√∫ltiplos mapas por artigo forem implementados

            const difficultyLevel = safeMap.difficultyLevel;
            const difficultyLabel = getDifficultyLabel(difficultyLevel);
            const difficultyClass = difficultyLevel
                ? `difficulty-${difficultyLevel}`
                : 'difficulty-unrated';

            // HTML SEM COMENT√ÅRIOS JSX
            return `
        <div class="mindmap-card ${safeMap.isFavorite ? 'favorite' : ''} ${
                safeMap.isArchived ? 'archived' : ''
            }" data-mindmap-id="${safeMap.id}">

            <div class="mindmap-header">
                <div class="mindmap-title-area">
                    <h4 class="mindmap-title" title="Mapa mental para ${
                        safeMap.articleReference
                    }">${displayName}</h4>
                    ${
                        difficultyLabel
                            ? `<span class="difficulty-badge ${difficultyClass}">${difficultyLabel}</span>`
                            : ''
                    }
                </div>
                <div class="flashcard-actions"> <button class="flashcard-action-btn favorite-btn" title="${
                    safeMap.isFavorite ? 'Desfavoritar' : 'Favoritar'
                }">${safeMap.isFavorite ? '‚≠ê' : '‚òÜ'}</button>
                    <button class="flashcard-action-btn edit-btn" title="Renomear">‚úèÔ∏è</button>
                    <button class="flashcard-action-btn archive-btn" title="${
                        safeMap.isArchived ? 'Desarquivar' : 'Arquivar'
                    }">${safeMap.isArchived ? 'üìÇ' : 'üìÅ'}</button>
                    <button class="flashcard-action-btn delete-btn" title="Excluir">üóëÔ∏è</button>
                </div>
            </div>

            <div class="mindmap-footer">
                <div class="mindmap-meta">
                    <span class="meta-item source" title="Trilha de Origem">üìö ${
                        getTrackMetadata(safeMap.sourceTrack).displayName ||
                        safeMap.sourceTrack
                    }</span>
                    <span class="meta-item created" title="Criado em">${new Date(
                        safeMap.created
                    ).toLocaleDateString('pt-BR')}</span>
                </div>
                <button class="btn btn-primary view-mindmap-btn">Visualizar Mapa</button>
            </div>

        </div>
        `;
        })
        .join('');
}

// app.js - SUBSTITUA a fun√ß√£o renderMindMapArticleSelection inteira por esta

/**
 * @function renderMindMapArticleSelection
 * @description Renderiza a lista de artigos (com preview e bot√£o Ler) para sele√ß√£o
 * na se√ß√£o de GERA√á√ÉO de Mapas Mentais.
 */
function renderMindMapArticleSelection() {
    const selectionArea = document.getElementById(
        'mindmap-article-selection-area'
    );
    if (!selectionArea) {
        console.error(
            '[MindMap] ERRO: √Årea #mindmap-article-selection-area n√£o encontrada para renderizar artigos.'
        );
        return;
    }

    // --- Reutiliza l√≥gica de busca e agrupamento ---
    const uniqueFiles = [...new Set(lexiaChunks.map((chunk) => chunk.file))];
    const tracks = uniqueFiles.map((file) => ({
        fileName: file,
        displayName: getTrackMetadata(file).displayName || file,
    }));

    const tracksWithArticles = tracks
        .map((track) => {
            const fileChunks = lexiaChunks.filter(
                (chunk) => chunk.file === track.fileName
            );
            const articles = fileChunks
                .flatMap((chunk) => chunk.legalArticles || [])
                .filter(
                    (article, index, self) =>
                        article &&
                        article.id &&
                        index ===
                            self.findIndex((a) => a && a.id === article.id)
                );
            articles.sort((a, b) => {
                // L√≥gica de ordena√ß√£o mantida
                const numA = parseInt(
                    (a.number || '0').match(/\d+/)?.[0] || '0'
                );
                const numB = parseInt(
                    (b.number || '0').match(/\d+/)?.[0] || '0'
                );
                if (numA !== numB) return numA - numB;
                return (a.fullReference || '').localeCompare(
                    b.fullReference || ''
                );
            });
            return { ...track, articles, articleCount: articles.length };
        })
        .filter((track) => track.articleCount > 0)
        .sort((a, b) => a.displayName.localeCompare(b.displayName));

    // --- Gera√ß√£o do HTML (SEM COMENT√ÅRIOS JSX) ---
    if (tracksWithArticles.length === 0) {
        selectionArea.innerHTML =
            '<p class="no-articles">Nenhum artigo de lei encontrado. Processe PDFs primeiro.</p>';
        const generateBtn = document.getElementById(
            'generate-selected-mindmaps'
        );
        if (generateBtn) generateBtn.disabled = true;
        return;
    }

    selectionArea.innerHTML = `
        <p style="margin-bottom: var(--spacing-4); font-weight: 500; color: var(--text-secondary);">Selecione um ou mais artigos abaixo:</p>
        ${tracksWithArticles
            .map(
                (track, index) => `
            <details class="track-selection-group" ${index === 0 ? 'open' : ''}>
                <summary class="track-header">
                    <h4 class="track-summary-title">${track.displayName}</h4>
                    <span class="article-count">${track.articleCount} ${
                    track.articleCount === 1 ? 'artigo' : 'artigos'
                }</span> </summary>
                <div class="articles-grid"> ${track.articles
                    .map((article) => {
                        const existingMap = lexiaMindMaps.find(
                            (m) => m.articleId === article.id && !m.isArchived
                        );
                        const usageBadgeText = existingMap
                            ? `üß† Mapa gerado`
                            : `‚ö™ N√£o gerado`;
                        const usageBadgeTitle = existingMap
                            ? `Um mapa mental ativo j√° existe para este artigo.`
                            : `Nenhum mapa mental gerado para este artigo ainda.`;

                        return `
                        <div class="article-card" data-article-id="${
                            article.id
                        }">
                            <label class="article-select">
                                <input type="checkbox" class="article-checkbox"
                                       data-article-id="${article.id}"
                                       data-track="${track.fileName}">
                                <div class="article-info">
                                    <strong class="article-reference">${
                                        article.fullReference ||
                                        `Art. ${article.number}`
                                    }</strong>
                                    <span class="article-usage-badge" title="${usageBadgeTitle}">${usageBadgeText}</span>
                                    <p class="article-subject">${
                                        article.subject ||
                                        'Assunto n√£o definido'
                                    }</p>
                                    <p class="article-text-preview">${
                                        article.fullText
                                            ? article.fullText.substring(
                                                  0,
                                                  120
                                              ) + '...'
                                            : 'Texto n√£o dispon√≠vel.'
                                    }</p>
                                    <span class="article-law">${
                                        article.law || track.displayName
                                    }</span>
                                </div>
                            </label>
                            <div class="article-card-actions">
                                <button class="btn btn-secondary read-article-btn" data-article-id="${
                                    article.id
                                }" data-track="${
                            track.fileName
                        }">Ler art.</button>
                            </div>
                        </div>
                        `;
                    })
                    .join('')}
                </div>
            </details>
        `
            )
            .join('')}
    `;

    // --- Anexar Listeners ---
    selectionArea.querySelectorAll('.article-checkbox').forEach((checkbox) => {
        checkbox.addEventListener('change', updateGenerateMindMapButtonState);
    });

    // Listener para o bot√£o "Ler art." ser√° tratado por setupMindMapEventListeners

    updateGenerateMindMapButtonState();
    setupMindMapAccordion();
}

/**
 * @function setupMindMapAccordion
 * @description Configura o comportamento do accordion para que apenas
 * um grupo de sele√ß√£o de trilha fique aberto por vez. Remove listeners antigos.
 */
function setupMindMapAccordion() {
    const selectionArea = document.getElementById(
        'mindmap-article-selection-area'
    );
    if (!selectionArea) return;

    const allDetails = selectionArea.querySelectorAll('.track-selection-group');
    allDetails.forEach((details) => {
        // Remove o listener antigo ANTES de adicionar um novo para evitar duplica√ß√£o
        details.removeEventListener('toggle', handleAccordionToggle);
        details.addEventListener('toggle', handleAccordionToggle);
    });
    console.log('[MindMap] Listeners do accordion configurados/atualizados.');
}

/**
 * @function handleAccordionToggle
 * @description Fun√ß√£o chamada quando um <details> √© aberto/fechado.
 * Fecha os outros <details> se um for aberto.
 * @param {Event} event - O evento 'toggle'.
 */
function handleAccordionToggle(event) {
    const currentDetails = event.target;
    // S√≥ age se um <details> foi ABERTO e se ele pertence √† sele√ß√£o de mapas mentais
    if (
        !currentDetails.open ||
        !currentDetails.closest('#mindmap-article-selection-area')
    )
        return;

    const selectionArea = document.getElementById(
        'mindmap-article-selection-area'
    );
    if (!selectionArea) return;

    const allDetails = selectionArea.querySelectorAll('.track-selection-group');
    allDetails.forEach((otherDetails) => {
        // Fecha todos os outros <details> que n√£o sejam o que disparou o evento
        if (otherDetails !== currentDetails) {
            otherDetails.open = false;
        }
    });
}

// app.js - SUBSTITUA a fun√ß√£o updateGenerateMindMapButtonState inteira por esta

/**
 * @function updateGenerateMindMapButtonState
 * @description Habilita/desabilita o bot√£o "Gerar Mapa(s)" na se√ß√£o de GERA√á√ÉO
 * com base na quantidade de artigos selecionados e atualiza o texto.
 */
function updateGenerateMindMapButtonState() {
    // Seleciona o bot√£o correto pelo ID
    const generateBtn = document.getElementById('generate-selected-mindmaps');
    if (!generateBtn) return;

    // Seleciona apenas os checkboxes DENTRO da √°rea de SELE√á√ÉO PARA GERA√á√ÉO
    const selectedCheckboxes = document.querySelectorAll(
        '#mindmap-article-selection-area .article-checkbox:checked'
    );
    const count = selectedCheckboxes.length;

    generateBtn.disabled = count === 0;

    // Atualiza texto e √≠cone do bot√£o
    generateBtn.innerHTML = `
        üöÄ ${count > 0 ? `Gerar Mapa(s) (${count})` : 'Gerar Mapa(s)'}
    `;
}

// app.js - SUBSTITUA a fun√ß√£o handleGenerateMindMapClick inteira por esta

/**
 * @function handleGenerateMindMapClick
 * @description Fun√ß√£o chamada ao clicar em "Gerar Mapa(s)". Itera sobre os
 * artigos selecionados, gera um mapa mental para CADA UM e os salva.
 */
async function handleGenerateMindMapClick() {
    console.log('[MindMap] Bot√£o Gerar Mapa(s) clicado.');
    const selectedCheckboxes = document.querySelectorAll(
        '#mindmap-article-selection-area .article-checkbox:checked'
    );
    const count = selectedCheckboxes.length;

    if (count === 0) {
        alert(
            'Selecione pelo menos um artigo para gerar o(s) mapa(s) mental(is).'
        );
        return;
    }

    const generateBtn = document.getElementById('generate-selected-mindmaps');
    const originalBtnHTML = generateBtn.innerHTML;
    generateBtn.innerHTML = `üîÑ Gerando ${count} mapa(s)...`;
    generateBtn.disabled = true;

    // Desmarcar checkboxes ap√≥s iniciar para evitar re-gera√ß√£o acidental r√°pida
    selectedCheckboxes.forEach((cb) => (cb.checked = false));
    updateGenerateMindMapButtonState(); // Atualiza o bot√£o para estado desabilitado (0 selecionados)

    let generatedCount = 0;
    const errors = [];
    const generatedMaps = []; // Guarda os mapas gerados nesta sess√£o

    // --- Loop para gerar um mapa por artigo ---
    for (let i = 0; i < selectedCheckboxes.length; i++) {
        const checkbox = selectedCheckboxes[i];
        const articleId = checkbox.dataset.articleId;
        const track = checkbox.dataset.track;
        const article = findArticleById(articleId); // Busca o artigo completo

        if (!article || !article.fullText) {
            console.warn(
                `[MindMap Gen] Artigo ${articleId} n√£o encontrado ou sem texto. Pulando.`
            );
            errors.push(
                `Artigo ${
                    article?.fullReference || articleId
                } n√£o encontrado/sem texto.`
            );
            continue;
        }

        console.log(
            `[MindMap Gen] Gerando mapa para: ${article.fullReference} (${
                i + 1
            }/${count})`
        );
        generateBtn.innerHTML = `üîÑ Gerando ${article.fullReference}... (${
            i + 1
        }/${count})`; // Atualiza progresso no bot√£o

        try {
            // Monta o prompt para UM artigo
            const prompt = buildMindMapPrompt(
                `--- IN√çCIO ARTIGO: ${article.fullReference} ---\n${article.fullText}\n--- FIM ARTIGO ---`,
                article.fullReference,
                1 // Indica que √© para um √∫nico artigo
            );

            const aiResponseText = await callMindMapGemini(prompt); // Chama a IA

            if (aiResponseText) {
                // Parse da resposta JSON
                let jsonContent = null;
                // (L√≥gica de extra√ß√£o robusta do JSON - mantida)
                const jsonRegex = /```json\s*([\s\S]*?)\s*```/;
                const match = aiResponseText.match(jsonRegex);
                if (match && match[1]) jsonContent = match[1].trim();
                else {
                    const jsonStartIndex = aiResponseText.indexOf('{');
                    const jsonEndIndex = aiResponseText.lastIndexOf('}');
                    if (
                        jsonStartIndex !== -1 &&
                        jsonEndIndex !== -1 &&
                        jsonEndIndex > jsonStartIndex
                    ) {
                        jsonContent = aiResponseText
                            .substring(jsonStartIndex, jsonEndIndex + 1)
                            .trim();
                    } else {
                        jsonContent = aiResponseText.trim();
                        if (
                            !jsonContent.startsWith('{') ||
                            !jsonContent.endsWith('}')
                        ) {
                            throw new Error('Resposta n√£o parece JSON v√°lido.');
                        }
                    }
                }

                const mindMapData = JSON.parse(jsonContent);

                // Valida a estrutura
                if (
                    mindMapData &&
                    mindMapData.format === 'node_tree' &&
                    mindMapData.data &&
                    mindMapData.data.id === 'root'
                ) {
                    // Cria o objeto do mapa mental para salvar
                    const newMindMap = {
                        id: `mindmap-${Date.now()}-${i}`, // ID √∫nico para o mapa
                        articleId: article.id,
                        articleReference: article.fullReference,
                        sourceTrack: article.fileName || track,
                        mapData: mindMapData, // O JSON retornado pela IA
                        difficultyLevel: null, // Inicialmente n√£o classificado
                        isFavorite: false,
                        isArchived: false,
                        customName: '', // Pode ser renomeado depois
                        created: new Date().toISOString(),
                    };
                    lexiaMindMaps.push(newMindMap); // Adiciona ao array global
                    generatedMaps.push(newMindMap); // Adiciona aos gerados nesta sess√£o
                    generatedCount++;
                    console.log(
                        `[MindMap Gen] Mapa gerado com sucesso para ${article.fullReference}`
                    );
                } else {
                    throw new Error('Estrutura JSON inv√°lida recebida da IA.');
                }
            } else {
                throw new Error('A IA n√£o retornou uma resposta v√°lida.');
            }

            // Pausa entre chamadas para evitar rate limiting (ajuste se necess√°rio)
            if (i < count - 1) {
                await new Promise((resolve) => setTimeout(resolve, 1500)); // 1.5 segundos
            }
        } catch (error) {
            console.error(
                `[MindMap Gen] Erro ao gerar mapa para ${article.fullReference}:`,
                error
            );
            errors.push(`Erro em ${article.fullReference}: ${error.message}`);
        }
    } // Fim do loop for

    // --- Finaliza√ß√£o ---
    saveMindMaps(); // Salva todos os mapas gerados (e os antigos)
    generateBtn.innerHTML = originalBtnHTML; // Restaura bot√£o
    // generateBtn.disabled = true; // Mant√©m desabilitado pois checkboxes foram desmarcados

    // Mostra resultado
    let message = `‚úÖ ${generatedCount} de ${count} mapa(s) mental(is) gerado(s) com sucesso!`;
    if (errors.length > 0) {
        message += `\n\n‚ö†Ô∏è Ocorreram ${errors.length} erro(s):\n- ${errors
            .slice(0, 3)
            .join('\n- ')}`;
        if (errors.length > 3) message += `\n... e mais ${errors.length - 3}.`;
        message += `\n\nVerifique o console para mais detalhes.`;
    }
    alert(message);

    // Re-renderiza a se√ß√£o para mostrar os novos cards e atualizar tudo
    renderMindMapsSection();
}

// app.js - ADICIONE estas novas fun√ß√µes (a√ß√µes para os cards de mapa mental)

/**
 * @function toggleMindMapFavorite
 * @description Alterna o estado de favorito de um mapa mental.
 * @param {string} mindMapId - O ID do mapa mental.
 */
function toggleMindMapFavorite(mindMapId) {
    const mapIndex = lexiaMindMaps.findIndex((m) => m.id === mindMapId);
    if (mapIndex !== -1) {
        lexiaMindMaps[mapIndex].isFavorite =
            !lexiaMindMaps[mapIndex].isFavorite;
        saveMindMaps();
        renderMindMapsSection(); // Re-renderiza para atualizar visualmente
        showToast(
            `Mapa mental ${
                lexiaMindMaps[mapIndex].isFavorite
                    ? 'adicionado aos'
                    : 'removido dos'
            } favoritos.`
        );
    } else {
        console.error(
            `[MindMap Action] Mapa com ID ${mindMapId} n√£o encontrado para favoritar.`
        );
    }
}

/**
 * @function toggleMindMapArchive
 * @description Alterna o estado de arquivamento de um mapa mental.
 * @param {string} mindMapId - O ID do mapa mental.
 */
function toggleMindMapArchive(mindMapId) {
    const mapIndex = lexiaMindMaps.findIndex((m) => m.id === mindMapId);
    if (mapIndex !== -1) {
        lexiaMindMaps[mapIndex].isArchived =
            !lexiaMindMaps[mapIndex].isArchived;
        // Se arquivar, remove de favoritos (opcional, mas comum)
        if (lexiaMindMaps[mapIndex].isArchived) {
            lexiaMindMaps[mapIndex].isFavorite = false;
        }
        saveMindMaps();
        renderMindMapsSection(); // Re-renderiza
        showToast(
            `Mapa mental ${
                lexiaMindMaps[mapIndex].isArchived
                    ? 'arquivado'
                    : 'desarquivado'
            }.`
        );
    } else {
        console.error(
            `[MindMap Action] Mapa com ID ${mindMapId} n√£o encontrado para arquivar.`
        );
    }
}

/**
 * @function deleteMindMap
 * @description Exclui permanentemente um mapa mental.
 * @param {string} mindMapId - O ID do mapa mental.
 */
function deleteMindMap(mindMapId) {
    const mapReference =
        lexiaMindMaps.find((m) => m.id === mindMapId)?.articleReference ||
        mindMapId;
    if (
        confirm(
            `Tem certeza que deseja excluir permanentemente o mapa mental para "${mapReference}"? Esta a√ß√£o n√£o pode ser desfeita.`
        )
    ) {
        const initialLength = lexiaMindMaps.length;
        lexiaMindMaps = lexiaMindMaps.filter((m) => m.id !== mindMapId);
        if (lexiaMindMaps.length < initialLength) {
            saveMindMaps();
            renderMindMapsSection(); // Re-renderiza
            showToast(`Mapa mental exclu√≠do com sucesso.`);
        } else {
            console.error(
                `[MindMap Action] Mapa com ID ${mindMapId} n√£o encontrado para excluir.`
            );
        }
    }
}

/**
 * @function renameMindMap
 * @description Permite ao usu√°rio renomear um mapa mental.
 * @param {string} mindMapId - O ID do mapa mental.
 */
function renameMindMap(mindMapId) {
    const mapIndex = lexiaMindMaps.findIndex((m) => m.id === mindMapId);
    if (mapIndex !== -1) {
        const currentMap = lexiaMindMaps[mapIndex];
        const currentName =
            currentMap.customName || currentMap.articleReference;
        const newName = prompt(
            `Digite o novo nome para o mapa mental (atual: "${currentName}"):`,
            currentName
        );

        if (
            newName &&
            newName.trim() !== '' &&
            newName.trim() !== currentName
        ) {
            lexiaMindMaps[mapIndex].customName = newName.trim();
            saveMindMaps();
            renderMindMapsSection(); // Re-renderiza
            showToast(`Mapa mental renomeado para "${newName.trim()}".`);
        } else if (newName === '') {
            // Permite remover o nome customizado
            lexiaMindMaps[mapIndex].customName = '';
            saveMindMaps();
            renderMindMapsSection();
            showToast(`Nome customizado removido.`);
        }
    } else {
        console.error(
            `[MindMap Action] Mapa com ID ${mindMapId} n√£o encontrado para renomear.`
        );
    }
}

/**
 * @function updateMindMapStats
 * @description Calcula e atualiza as estat√≠sticas exibidas na se√ß√£o de mapas mentais.
 */
function updateMindMapStats() {
    const statsContainer = document.getElementById('mindmaps-stats');
    if (!statsContainer) return;

    const totalVisible = lexiaMindMaps.filter((map) => !map.isArchived).length;
    const favorites = lexiaMindMaps.filter(
        (map) => map.isFavorite && !map.isArchived
    ).length;
    const archived = lexiaMindMaps.filter((map) => map.isArchived).length;

    statsContainer.innerHTML = `
        <span class="stat">Vis√≠veis: ${totalVisible}</span>
        <span class="stat">Favoritos: ${favorites}</span>
        <span class="stat">Arquivados: ${archived}</span>
    `;
}

// app.js - ADICIONE esta nova fun√ß√£o

/**
 * @function setupMindMapEventListeners
 * @description Configura todos os event listeners para a se√ß√£o de Mapas Mentais
 * usando delega√ß√£o de eventos. Remove listeners antigos clonando a se√ß√£o.
 */
function setupMindMapEventListeners() {
    console.log('[MindMap] Configurando event listeners...');
    const mindMapSection = document.getElementById('mindmaps');
    if (!mindMapSection) {
        console.error(
            '[MindMap] ERRO: Se√ß√£o #mindmaps n√£o encontrada para anexar listeners.'
        );
        return;
    }

    // 1. Clonagem para limpar listeners antigos da se√ß√£o inteira
    const newMindMapSection = mindMapSection.cloneNode(true);
    if (mindMapSection.parentNode) {
        mindMapSection.parentNode.replaceChild(
            newMindMapSection,
            mindMapSection
        );
    } else {
        console.error(
            '[MindMap] ERRO: #mindmaps n√£o tem n√≥ pai para substitui√ß√£o.'
        );
        return; // Aborta se n√£o puder substituir
    }

    // 2. Listener de CLIQUE principal (com delega√ß√£o)
    newMindMapSection.addEventListener('click', (e) => {
        const target = e.target;
        const targetId = target.id;
        const closestCard = target.closest('.mindmap-card'); // Card de mapa gerado
        const mindMapId = closestCard ? closestCard.dataset.mindmapId : null;
        const closestArticleCard = target.closest('.article-card'); // Card de sele√ß√£o de artigo
        const articleIdForAction = closestArticleCard
            ? closestArticleCard.dataset.articleId
            : null;

        // --- A√ß√µes na Se√ß√£o de Gera√ß√£o ---
        if (targetId === 'generate-selected-mindmaps') {
            handleGenerateMindMapClick(); // Chama a fun√ß√£o de gera√ß√£o (j√° modificada)
            return;
        }
        const readBtn = target.closest('.read-article-btn');
        if (readBtn && articleIdForAction) {
            const track = readBtn.dataset.track;
            showArticleContentModal(articleIdForAction, track); // Mostra modal do artigo
            return;
        }

        // --- A√ß√µes na Se√ß√£o de Mapas Existentes ---
        if (targetId === 'review-all-mindmaps-btn') {
            // Implementar l√≥gica de revis√£o de todos os mapas (ex: showMindMapModal sequencial)
            alert('Funcionalidade "Revisar Todos" ainda n√£o implementada.');
            return;
        }
        if (targetId === 'review-mindmaps-by-difficulty-btn') {
            // Implementar modal de sele√ß√£o de dificuldade para mapas
            alert(
                'Funcionalidade "Revisar por Dificuldade" ainda n√£o implementada.'
            );
            return;
        }
        if (targetId === 'toggle-mindmap-filters-btn') {
            const filtersPanel = newMindMapSection.querySelector(
                '#collapsible-mindmap-filters'
            );
            const buttonSpan = target.querySelector('span');
            if (filtersPanel) {
                const isCurrentlyVisible =
                    window.getComputedStyle(filtersPanel).display !== 'none';
                filtersPanel.style.display = isCurrentlyVisible
                    ? 'none'
                    : 'grid';
                if (buttonSpan)
                    buttonSpan.textContent = isCurrentlyVisible ? '‚ñæ' : '‚ñ¥';
            }
            return;
        }

        // A√ß√µes dentro de um Card de Mapa Mental Gerado
        if (mindMapId) {
            if (target.closest('.favorite-btn')) {
                toggleMindMapFavorite(mindMapId);
                return;
            }
            if (target.closest('.edit-btn')) {
                renameMindMap(mindMapId);
                return;
            }
            if (target.closest('.archive-btn')) {
                toggleMindMapArchive(mindMapId);
                return;
            }
            if (target.closest('.delete-btn')) {
                deleteMindMap(mindMapId);
                return;
            }
            if (target.closest('.view-mindmap-btn')) {
                showMindMapModal(mindMapId); // Chama o modal de visualiza√ß√£o
                return;
            }
        }

        // Bot√µes de Pagina√ß√£o
        if (targetId === 'prev-mindmap-page-btn') {
            let currentPage = parseInt(
                newMindMapSection.dataset.currentPage || 1
            );
            if (currentPage > 1) {
                newMindMapSection.dataset.currentPage = currentPage - 1;
                renderMindMapsSection();
            }
            return;
        }
        if (targetId === 'next-mindmap-page-btn') {
            let currentPage = parseInt(
                newMindMapSection.dataset.currentPage || 1
            );
            // Pega total de p√°ginas (l√≥gica similar aos flashcards, precisa ajustar se necess√°rio)
            const totalPagesText =
                newMindMapSection.querySelector('.page-info')?.textContent ||
                '';
            const match = totalPagesText.match(/de (\d+)/);
            const totalPages = match ? parseInt(match[1]) : 1;

            if (currentPage < totalPages) {
                newMindMapSection.dataset.currentPage = currentPage + 1;
                renderMindMapsSection();
            }
            return;
        }
    });

    // 3. Listener de MUDAN√áA (filtros, checkboxes de GERA√á√ÉO)
    newMindMapSection.addEventListener('change', (e) => {
        const target = e.target;
        const targetId = target.id;

        // Checkboxes na √°rea de GERA√á√ÉO
        if (target.classList.contains('article-checkbox')) {
            updateGenerateMindMapButtonState(); // Atualiza o bot√£o Gerar
            return;
        }

        // Filtros da lista principal
        if (
            targetId === 'mindmaps-view-filter' ||
            targetId === 'mindmaps-sort-filter' ||
            targetId === 'mindmaps-track-filter' ||
            targetId === 'mindmaps-difficulty-filter' ||
            targetId === 'mindmaps-per-page-filter'
        ) {
            console.log('[MindMap] Filtro alterado:', targetId, target.value);
            newMindMapSection.dataset.currentPage = 1; // Volta para a primeira p√°gina ao filtrar
            renderMindMapsSection(); // Re-renderiza a lista com filtros
            return;
        }
    });

    // 4. Funcionalidade do ACCORDION na GERA√á√ÉO (mantida)
    setupMindMapAccordion(); // Reconfigura o accordion ap√≥s clonagem

    console.log('[MindMap] Event listeners configurados.');
}

// app.js - SUBSTITUA a fun√ß√£o showMindMapModal inteira por esta

/**
 * @function showMindMapModal
 * @description Cria e exibe um modal para visualizar um mapa mental espec√≠fico.
 * PASSA O ELEMENTO CONT√äINER DIRETAMENTE para a fun√ß√£o de renderiza√ß√£o.
 * @param {string} mindMapId - O ID do mapa mental a ser visualizado.
 */
function showMindMapModal(mindMapId) {
    const mindMap = lexiaMindMaps.find((m) => m.id === mindMapId);
    if (!mindMap || !mindMap.mapData) {
        alert('Mapa mental n√£o encontrado ou dados inv√°lidos.');
        console.error(
            `[MindMap Modal] Mapa ${mindMapId} n√£o encontrado ou sem mapData.`
        );
        return;
    }

    // --- Cria√ß√£o do Modal ---
    const modalOverlay = document.createElement('div');
    modalOverlay.id = `mindmap-modal-${mindMapId}`;
    modalOverlay.className = 'modal-overlay mindmap-view-modal';

    const currentDifficulty = mindMap.difficultyLevel || 'unrated';
    const displayName = mindMap.customName || mindMap.articleReference;
    // ===== NOVO: Gerar ID √∫nico para o cont√™iner interno =====
    const modalContainerId = `jsmind_container_modal_${mindMapId}`;
    // =======================================================

    modalOverlay.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${displayName}</h3>
                <button class="btn-icon close-modal-btn" title="Fechar">‚úñ</button>
            </div>
            <div class="modal-body">
                <div id="${modalContainerId}">
                    <p class="mindmap-hint">Carregando mapa mental...</p>
                </div>
            </div>
            <div class="modal-footer">
                <div class="difficulty-rating-buttons">
                    <p>Classificar este Mapa:</p>
                    <button class="btn btn-difficulty btn-easy ${
                        currentDifficulty === 'easy' ? 'active' : ''
                    }" data-difficulty="easy">F√°cil</button>
                    <button class="btn btn-difficulty btn-medium ${
                        currentDifficulty === 'medium' ? 'active' : ''
                    }" data-difficulty="medium">M√©dio</button>
                    <button class="btn btn-difficulty btn-difficult ${
                        currentDifficulty === 'difficult' ? 'active' : ''
                    }" data-difficulty="difficult">Dif√≠cil</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modalOverlay);

    // --- Renderiza√ß√£o do Mapa DENTRO do Modal ---
    // ===== CORRE√á√ÉO: Encontra o elemento DEPOIS de adicionar o modal ao DOM =====
    const mapContainerElement = modalOverlay.querySelector(
        `#${modalContainerId}`
    );
    if (mapContainerElement) {
        // Chama a fun√ß√£o passando o ELEMENTO encontrado
        displayMindMapInModal(mindMap.mapData, mapContainerElement);
    } else {
        console.error(
            `[MindMap Modal] ERRO CR√çTICO: N√£o foi poss√≠vel encontrar #${modalContainerId} no modal rec√©m-criado.`
        );
        // Tenta fechar o modal ou exibir uma mensagem de erro dentro dele
        if (modalOverlay.parentNode) document.body.removeChild(modalOverlay);
        alert('Erro ao preparar a √°rea de visualiza√ß√£o do mapa mental.');
        return; // Aborta se o cont√™iner n√£o for encontrado
    }
    // =========================================================================

    // --- Listeners do Modal (sem altera√ß√µes aqui) ---
    modalOverlay
        .querySelector('.close-modal-btn')
        .addEventListener('click', () => {
            if (modalOverlay.parentNode)
                document.body.removeChild(modalOverlay);
            currentMindMapInstance = null; // Limpa a inst√¢ncia do mapa do modal
        });

    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            if (modalOverlay.parentNode)
                document.body.removeChild(modalOverlay);
            currentMindMapInstance = null;
        }
    });

    modalOverlay
        .querySelectorAll('.difficulty-rating-buttons button')
        .forEach((button) => {
            button.addEventListener('click', (e) => {
                const newDifficulty = e.target.dataset.difficulty;
                const mapIndex = lexiaMindMaps.findIndex(
                    (m) => m.id === mindMapId
                );
                if (mapIndex !== -1) {
                    lexiaMindMaps[mapIndex].difficultyLevel = newDifficulty;
                    saveMindMaps(); // Salva a dificuldade
                    console.log(
                        `[MindMap Modal] Mapa ${mindMapId} classificado como: ${newDifficulty}`
                    );

                    // Atualiza visualmente os bot√µes no modal (opcional, j√° que vai fechar)
                    // modalOverlay.querySelectorAll('.difficulty-rating-buttons button').forEach(btn => btn.classList.remove('active'));
                    // e.target.classList.add('active');

                    renderMindMapsSection(); // Re-renderiza a lista principal para refletir a mudan√ßa no badge
                    showToast(
                        `Mapa classificado como ${getDifficultyLabel(
                            newDifficulty
                        )}.`
                    ); // Mostra notifica√ß√£o

                    // ===== NOVO: Fecha o modal =====
                    if (modalOverlay.parentNode) {
                        document.body.removeChild(modalOverlay);
                    }
                    currentMindMapInstance = null; // Limpa a inst√¢ncia do mapa do modal
                    // ==============================
                }
            });
        });
}

// app.js - SUBSTITUA a fun√ß√£o displayMindMapInModal inteira por esta

// app.js - Fun√ß√£o displayMindMapInModal COMPLETA (com logs e verifica√ß√µes)

/**
 * @function displayMindMapInModal
 * @description Renderiza um mapa mental usando jsMind DENTRO de um ELEMENTO cont√™iner espec√≠fico (modal).
 * @param {object} mindMapData - O objeto JSON do mapa mental (formato node_tree).
 * @param {HTMLElement} containerElement - O ELEMENTO HTML onde o mapa ser√° renderizado.
 */
function displayMindMapInModal(mindMapData, containerElement) {
    // ===== CORRE√á√ÉO: Verifica se o ELEMENTO foi passado corretamente =====
    if (!containerElement || !(containerElement instanceof HTMLElement)) {
        console.error(
            `[MindMap Modal] ERRO: Elemento cont√™iner inv√°lido fornecido para renderiza√ß√£o.`
        );
        // Tenta exibir erro no lugar se poss√≠vel
        if (containerElement)
            containerElement.innerHTML =
                '<p class="mindmap-hint" style="color: var(--error-color);">Erro: √Årea de renderiza√ß√£o inv√°lida.</p>';
        return;
    }
    const containerId = containerElement.id; // Pega o ID do elemento
    // ====================================================================

    // Verifica jsMind (mantido)
    if (typeof jsMind === 'undefined') {
        console.error(
            '[MindMap Modal] ERRO CR√çTICO: Biblioteca jsMind n√£o carregada.'
        );
        containerElement.innerHTML =
            '<p class="mindmap-hint" style="color: var(--error-color);">Erro: Biblioteca jsMind n√£o carregada.</p>';
        return;
    }

    // Valida dados (mantido)
    if (
        !mindMapData ||
        mindMapData.format !== 'node_tree' ||
        !mindMapData.data ||
        mindMapData.data.id !== 'root'
    ) {
        console.error(
            '[MindMap Modal] ERRO: Dados do mapa inv√°lidos.',
            mindMapData
        );
        containerElement.innerHTML =
            '<p class="mindmap-hint" style="color: var(--error-color);">Erro: Dados do mapa inv√°lidos.</p>';
        return;
    }

    // Op√ß√µes (COM HMARGIN AUMENTADO)
    const options = {
        container: containerId,
        theme: 'belizehole',
        editable: false,
        mode: 'full',
        support_html: true,
        view: {
            engine: 'svg',
            // ===== HMARGIN AUMENTADO =====
            hmargin: 250, // Mais margem horizontal GERAL (afasta das bordas)
            // =============================
            vmargin: 80, // Margem vertical mantida
            line_width: 2,
            line_color: '#94a3b8',
            draggable: true,
            hide_scrollbars_when_draggable: true,
            node_overflow: 'wrap',
        },
        layout: {
            // Espa√ßamentos entre n√≥s mantidos altos
            hspace: 120,
            vspace: 60,
            pspace: 25,
        },
        shortcut: { enable: true, mappings: {} },
    };

    // ===== CORRE√á√ÉO: Usa containerElement diretamente =====
    containerElement.innerHTML = ''; // Limpa "Carregando..."
    containerElement.style.display = 'block'; // Garante visibilidade
    // Altura/Largura devem ser controladas pelo CSS do '.modal-body > div'
    // ====================================================

    try {
        console.log(
            `[MindMap Modal] Inicializando jsMind em #${containerId}...`
        );
        currentMindMapInstance = new jsMind(options); // A inst√¢ncia ainda usa o ID

        // Habilita zoom por scroll NO PAINEL DO MODAL (mantido)
        if (
            currentMindMapInstance.view &&
            currentMindMapInstance.view.e_panel
        ) {
            const panel = currentMindMapInstance.view.e_panel;
            panel.removeEventListener('wheel', handleMindMapZoom);
            panel.addEventListener('wheel', handleMindMapZoom, {
                passive: false,
            });
            console.log('[MindMap Modal] Zoom com scroll habilitado.');
        } else {
            console.warn(
                '[MindMap Modal] e_panel n√£o encontrado para listener de zoom.'
            );
        }

        // ===== ADICIONAR VERIFICA√á√ÉO AP√ìS O SHOW =====
        currentMindMapInstance.show(mindMapData);
        // A fun√ß√£o show n√£o retorna um valor √∫til padr√£o, mas verificamos se algum erro ocorreu
        // A principal verifica√ß√£o √© se o canvas foi criado (feito no setTimeout abaixo)
        console.log(
            '[MindMap Modal] Mapa exibido com sucesso (chamada a show() completada).'
        );
        // ===========================================

        // Verifica renderiza√ß√£o (mantido)
        setTimeout(() => {
            // ===== CORRE√á√ÉO: Busca dentro do containerElement =====
            const engineElement = containerElement.querySelector('canvas, svg');
            // ====================================================
            if (engineElement) {
                console.log(
                    `[MindMap Modal] Elemento <${engineElement.tagName.toLowerCase()}> encontrado.`
                );
                // ===== NOVO: Verificar dimens√µes do canvas =====
                console.log(
                    `[MindMap Modal] Dimens√µes computadas do Canvas: ${engineElement.offsetWidth}w x ${engineElement.offsetHeight}h`
                );
                if (
                    engineElement.offsetWidth === 0 ||
                    engineElement.offsetHeight === 0
                ) {
                    console.warn(
                        '[MindMap Modal] Aten√ß√£o: O elemento Canvas foi criado, mas tem dimens√µes zero. Verifique o CSS.'
                    );
                }
                // =============================================
            } else {
                console.warn(
                    '[MindMap Modal] Elemento <canvas> ou <svg> N√ÉO encontrado ap√≥s show(). Renderiza√ß√£o falhou?'
                );
            }
        }, 300); // Delay ligeiramente maior para garantir renderiza√ß√£o
    } catch (e) {
        console.error(
            '[MindMap Modal] ERRO CR√çTICO ao inicializar/exibir jsMind:',
            e
        );
        if (e.stack) console.error('Stack Trace:', e.stack);
        // ===== CORRE√á√ÉO: Usa containerElement para erro =====
        containerElement.innerHTML =
            '<p class="mindmap-hint" style="color: var(--error-color);">Erro ao renderizar mapa.</p>';
        // ====================================================
        currentMindMapInstance = null; // Limpa inst√¢ncia em caso de erro
    }
}
/**
 * @function buildMindMapPrompt
 * @description Constr√≥i o prompt detalhado para a API Gemini gerar o mapa mental em JSON.
 * Adaptado de mindmap_script.js para integra√ß√£o com Lexia.
 * @param {string} articlesText - O texto concatenado dos artigos selecionados.
 * @param {string} firstArticleRef - A refer√™ncia do primeiro artigo (para t√≠tulo).
 * @param {number} articleCount - O n√∫mero de artigos selecionados.
 * @returns {string} O prompt completo para a IA.
 */
function buildMindMapPrompt(articlesText, firstArticleRef, articleCount) {
    // Define o t√≠tulo do mapa (meta name)
    const metaName =
        articleCount === 1
            ? `Mapa Mental - ${firstArticleRef}`
            : `Mapa Mental - ${articleCount} Artigos Selecionados`;

    // Define instru√ß√µes espec√≠ficas para N√≠vel 2 dependendo se √© 1 ou m√∫ltiplos artigos
    const specificInstructionsLevel2 =
        articleCount === 1
            ? `2.  **Ramifica√ß√µes (N√≠vel 2):** Use os **Par√°grafos (¬ß)** e o **Caput** como as ramifica√ß√µes principais. Agrupe incisos (I, II, III...) e al√≠neas (a, b, c...) do caput ou par√°grafos de forma l√≥gica dentro de sub-t√≥picos (ex: "Caput - Elementos Essenciais", "¬ß 1¬∫ - Exce√ß√µes"). Utilize 'direction: right' para o Caput e Par√°grafos √≠mpares, e 'direction: left' para Par√°grafos pares, para melhor distribui√ß√£o visual.`
            : `2.  **Ramifica√ß√µes (N√≠vel 2):** Crie uma ramifica√ß√£o principal (com emoji ‚öñÔ∏è) para CADA ARTIGO FORNECIDO. Use a refer√™ncia completa e um breve t√≠tulo como t√≥pico (ex: "‚öñÔ∏è Art. 121 - Homic√≠dio Simples"). Defina 'expanded: true' para estas ramifica√ß√µes de artigo. Alterne 'direction' (right/left) para cada artigo principal para distribui√ß√£o equilibrada.`;

    // Define instru√ß√µes espec√≠ficas para N√≠vel 3+
    const specificInstructionsLevel3Plus =
        articleCount === 1
            ? `3.  **Sub-ramifica√ß√µes (N√≠vel 3+):** Detalhe os conceitos de CADA ramifica√ß√£o (par√°grafo/caput). √â OBRIGAT√ìRIO incluir os seguintes elementos quando presentes no texto correspondente:`
            : `3.  **Sub-ramifica√ß√µes (N√≠vel 3 - Dentro de cada Artigo):** Use os **Par√°grafos (¬ß)** e o **Caput** como sub-ramifica√ß√µes (com emojis üèõÔ∏è e üì¶). Agrupe incisos e al√≠neas de forma l√≥gica dentro de sub-t√≥picos. Defina 'expanded: false' para estas sub-ramifica√ß√µes.
4.  **Detalhes (N√≠vel 4+):** Dentro de cada Caput ou Par√°grafo, detalhe os conceitos. √â OBRIGAT√ìRIO incluir os seguintes elementos quando presentes no texto correspondente:`;

    // Define a numera√ß√£o correta para as instru√ß√µes restantes
    const emojiInstructionNumber = articleCount === 1 ? '4.' : '5.';
    const concisenessInstructionNumber = articleCount === 1 ? '5.' : '6.';

    // Define a estrutura de exemplo para 'children' no JSON
    // EXEMPLO PARA UM ARTIGO
    const nodeStructureExampleSingle = `"children": [
      { "id": "caput", "topic": "üèõÔ∏è Caput: [S√≠ntese do Caput]", "direction": "right", "expanded": false,
         "children": [
             { "id": "caput_acao", "topic": "‚ñ∂Ô∏è A√ß√£o: [Verbo(s)]" },
             { "id": "caput_pena", "topic": "‚öñÔ∏è Pena: [Descri√ß√£o da Pena]" },
             { "id": "caput_detalhes", "topic": "üìÑ Detalhes: [Pontos chave, incisos agrupados]" }
             /* Adicionar mais detalhes como Condi√ß√£o, Prazo, etc., se houver */
         ]
      },
      { "id": "para1", "topic": "üì¶ ¬ß 1¬∫: [S√≠ntese do Par√°grafo]", "direction": "left", "expanded": false,
         "children": [
              { "id": "para1_condicao", "topic": "‚ö†Ô∏è Condi√ß√£o: [Descri√ß√£o]" },
              { "id": "para1_pena", "topic": "‚öñÔ∏è Pena: [Se diferente, sen√£o omitir]" }
              /* Adicionar mais detalhes se houver */
         ]
      },
      { "id": "para2", "topic": "üì¶ ¬ß 2¬∫: [S√≠ntese do Par√°grafo]", "direction": "right", "expanded": false, /* Alterna dire√ß√£o */
         "children": [ /* Detalhes do par√°grafo 2 */ ]
      }
      // ... mais par√°grafos se existirem, alternando a dire√ß√£o ...
    ]`;

    // EXEMPLO PARA M√öLTIPLOS ARTIGOS
    const nodeStructureExampleMultiple = `"children": [
      { "id": "art1", "topic": "‚öñÔ∏è Art. XXX - [T√≠tulo do Artigo 1]", "direction": "right", "expanded": true,
         "children": [
              { "id": "art1_caput", "topic": "üèõÔ∏è Caput: [S√≠ntese]", "expanded": false,
                 "children": [
                     { "id": "art1_caput_acao", "topic": "‚ñ∂Ô∏è A√ß√£o: ..." },
                     { "id": "art1_caput_pena", "topic": "‚öñÔ∏è Pena: ..." }
                     /* Mais detalhes do caput */
                 ]
              },
              { "id": "art1_para1", "topic": "üì¶ ¬ß 1¬∫: [S√≠ntese]", "expanded": false,
                 "children": [
                      { "id": "art1_para1_detalhe", "topic": "üìÑ Detalhes: ..." }
                      /* Mais detalhes do par√°grafo */
                 ]
              }
              /* Mais par√°grafos do Artigo 1 */
         ]
      },
      { "id": "art2", "topic": "‚öñÔ∏è Art. YYY - [T√≠tulo do Artigo 2]", "direction": "left", "expanded": true, /* Dire√ß√£o alternada */
         "children": [
              { "id": "art2_caput", "topic": "üèõÔ∏è Caput: [S√≠ntese]", "expanded": false, "children": [/* ... */] },
              { "id": "art2_para1", "topic": "üì¶ ¬ß 1¬∫: [S√≠ntese]", "expanded": false, "children": [/* ... */] }
              /* Mais par√°grafos do Artigo 2 */
         ]
      }
      // ... mais artigos se existirem, alternando a dire√ß√£o ...
    ]`;

    // Escolhe o exemplo correto
    const nodeStructureExample =
        articleCount === 1
            ? nodeStructureExampleSingle
            : nodeStructureExampleMultiple;

    // Monta o prompt final
    return `
Voc√™ √© um assistente jur√≠dico de elite, especializado em criar mapas mentais para auxiliar na prepara√ß√£o para concursos p√∫blicos (n√≠vel Escrevente TJSP). Sua an√°lise deve ser estritamente baseada no texto legal fornecido.
Seu objetivo √© extrair a estrutura hier√°rquica e os **detalhes cruciais** do(s) artigo(s), com foco principal em **prazos, penas, verbos de a√ß√£o, sujeitos, objetos, condi√ß√µes, classifica√ß√µes e exce√ß√µes**.

**TEXTO DO(S) ARTIGO(S) FORNECIDO(S):**
"""
${articlesText}
"""

**INSTRU√á√ïES DETALHADAS PARA A ESTRUTURA DO MAPA MENTAL:**
1.  **Ideia Central (N√≥ Raiz - 'root'):** ${
        articleCount === 1
            ? `Deve ser concisa, contendo a refer√™ncia do artigo e seu assunto principal (ex: "${firstArticleRef} - Homic√≠dio Simples")`
            : `"S√≠ntese dos ${articleCount} Artigos Selecionados"`
    }.
${specificInstructionsLevel2}
${specificInstructionsLevel3Plus}
    * **A√ß√£o(√µes):** Use o emoji ‚ñ∂Ô∏è seguido de "A√ß√£o:" e os verbos principais (ex: "‚ñ∂Ô∏è A√ß√£o: Matar, Subtrair, Omitir").
    * **Pena:** Use o emoji ‚öñÔ∏è seguido de "Pena:" e a descri√ß√£o completa (ex: "‚öñÔ∏è Pena: Reclus√£o, 6 a 20 anos"). **√â OBRIGAT√ìRIO destacar penas diferentes** em par√°grafos espec√≠ficos.
    * **Detalhes Chave:** Use o emoji üìÑ seguido de "Detalhes:" para agrupar elementos importantes como objetos do crime, sujeitos, qualificadoras, majorantes, incisos, al√≠neas etc. (ex: "üìÑ Detalhes: Motivo f√∫til, meio cruel (Incisos I, II)").
    * **Condi√ß√µes/Prazos:** Use o emoji ‚ö†Ô∏è para condi√ß√µes (ex: "‚ö†Ô∏è Condi√ß√£o: Se o crime √© culposo") e ‚è≥ para prazos (ex: "‚è≥ Prazo: Decad√™ncia em 6 meses").
    * **Classifica√ß√£o:** Use o emoji üè∑Ô∏è seguido de "Tipo:" ou "Classifica√ß√£o:" (ex: "üè∑Ô∏è Tipo: Crime material").
    * **Exce√ß√µes/Regras Espec√≠ficas:** Use o emoji üö´ seguido de "Exce√ß√£o:" (ex: "üö´ Exce√ß√£o: N√£o se aplica se...").
${emojiInstructionNumber} **Emojis:** Adicione um emoji relevante no in√≠cio de CADA t√≥pico (exceto o n√≥ raiz) para melhorar a reten√ß√£o visual. Use emojis variados e apropriados ao conte√∫do jur√≠dico (üèõÔ∏è, üì¶, ‚ñ∂Ô∏è, ‚öñÔ∏è, üìÑ, ‚ö†Ô∏è, ‚è≥, üè∑Ô∏è, üö´, üéØ, üí°, etc.).
${concisenessInstructionNumber} **Concis√£o e Clareza:** Mantenha os t√≥picos curtos, mas informativos. Evite copiar frases longas; sintetize a informa√ß√£o essencial. O mapa deve servir como ferramenta de revis√£o r√°pida e eficiente.

**FORMATO DE SA√çDA OBRIGAT√ìRIO (JSON V√ÅLIDO):**
Responda **APENAS** com o objeto JSON, sem nenhum texto introdut√≥rio, final ou marcadores como \`\`\`json. Certifique-se de que o JSON esteja sintaticamente correto (v√≠rgulas, chaves, colchetes).

{
  "meta": {
    "name": "${metaName}",
    "author": "Lexia IA",
    "version": "1.2" /* Vers√£o atualizada do prompt */
  },
  "format": "node_tree",
  "data": {
    "id": "root",
    "topic": "<T√≥pico da Ideia Central Conforme Instru√ß√£o 1>",
    ${nodeStructureExample}
  }
}

**REFOR√áO IMPORTANTE:**
* Retorne **SOMENTE** o JSON v√°lido.
* Detalhe **TODAS** as penas e prazos mencionados.
* Se m√∫ltiplos artigos forem fornecidos, crie um ramo principal para cada um, alternando a dire√ß√£o ('right'/'left').
* Para um √∫nico artigo, alterne a dire√ß√£o ('right'/'left') entre Caput/Par√°grafos.
* Mantenha a estrutura hier√°rquica (Artigo -> Caput/Par√°grafo -> Detalhes).
* Use os emojis conforme especificado.
`;
}

/**
 * @function callMindMapGemini
 * @description Encapsula a chamada √† API Gemini especificamente para mapas mentais.
 * Reutiliza a fun√ß√£o 'callGemini' principal do app.js.
 * @param {string} prompt - O prompt a ser enviado para a IA.
 * @returns {Promise<string|null>} A resposta textual da IA ou null em caso de erro.
 */
async function callMindMapGemini(prompt) {
    console.log('[MindMap] Chamando API Gemini para Mapa Mental...');
    // Reutiliza a fun√ß√£o 'callGemini' existente, passando o modelo desejado
    // Usar 'gemini-2.0-flash' ou outro modelo dispon√≠vel e adequado
    try {
        // Certifique-se de que a fun√ß√£o callGemini lida com erros e retries
        const response = await callGemini(prompt, 'gemini-2.0-flash'); // Usando modelo flash
        if (!response) {
            console.error(
                '[MindMap] callMindMapGemini: A chamada para callGemini retornou null ou vazio.'
            );
            // Poderia adicionar um alerta aqui se desejado
        }
        return response;
    } catch (error) {
        console.error(
            '[MindMap] Erro dentro de callMindMapGemini ao chamar callGemini:',
            error
        );
        return null; // Retorna null explicitamente em caso de erro na chamada
    }
}

/**
 * @function displayMindMap
 * @description Renderiza o mapa mental na interface usando a biblioteca jsMind.
 * Adaptado de mindmap_script.js para integra√ß√£o com Lexia.
 * @param {object} mindData - O objeto JSON contendo os dados do mapa mental no formato node_tree.
 */
function displayMindMap(mindData) {
    const mapContainerId = 'jsmind_container_lexia'; // ID do cont√™iner no HTML do Lexia
    const mapContainer = document.getElementById(mapContainerId);

    // Verifica se a biblioteca jsMind est√° carregada globalmente
    if (typeof jsMind === 'undefined') {
        console.error(
            '[MindMap] ERRO CR√çTICO: A biblioteca jsMind n√£o foi carregada no HTML (verifique a tag <script>).'
        );
        if (mapContainer)
            mapContainer.innerHTML =
                '<p class="mindmap-hint" style="color: var(--error-color); text-align: center;">Erro Interno: A biblioteca de mapa mental (jsMind) n√£o est√° carregada.</p>';
        alert(
            'Erro: A biblioteca jsMind n√£o foi carregada. Verifique o console.'
        );
        return;
    }

    // Valida os dados recebidos antes de tentar renderizar
    if (
        !mindData ||
        typeof mindData !== 'object' ||
        mindData.format !== 'node_tree' ||
        !mindData.data ||
        typeof mindData.data !== 'object' ||
        mindData.data.id !== 'root'
    ) {
        console.error(
            '[MindMap] ERRO: Dados do mapa mental inv√°lidos ou formato incorreto recebido da IA.',
            mindData
        );
        if (mapContainer)
            mapContainer.innerHTML =
                '<p class="mindmap-hint" style="color: var(--error-color); text-align: center;">Erro: A estrutura de dados recebida da IA para o mapa mental √© inv√°lida.</p>';
        alert('Erro: Estrutura de dados do mapa inv√°lida recebida da IA.');
        return;
    }

    // Op√ß√µes de configura√ß√£o para o jsMind (ajustadas para Lexia)
    const options = {
        container: mapContainerId, // ID do elemento HTML onde o mapa ser√° desenhado
        theme: 'belizehole', // Tema visual (pode ser alterado, CSS adaptado para este)
        editable: false, // Desabilita edi√ß√£o direta no mapa pelo usu√°rio
        mode: 'full', // Layout 'full' (ramifica para ambos os lados)
        support_html: true, // Permite HTML nos t√≥picos (importante para emojis)
        view: {
            engine: 'canvas', // Motor de renderiza√ß√£o ('canvas' √© geralmente mais perform√°tico)
            hmargin: 80, // Margem horizontal m√≠nima entre n√≥s e borda
            vmargin: 40, // Margem vertical m√≠nima
            line_width: 2, // Espessura das linhas de conex√£o
            line_color: 'var(--primary-color)', // Cor das linhas usando vari√°vel CSS do Lexia
            draggable: true, // Permite arrastar o mapa com o mouse
            hide_scrollbars_when_draggable: true, // Esconde barras de rolagem ao arrastar
            node_overflow: 'wrap', // FOR√áA quebra de linha dentro dos n√≥s (IMPORTANTE)
        },
        layout: {
            hspace: 70, // Espa√ßamento horizontal entre n√≥s irm√£os (ajuste conforme necess√°rio)
            vspace: 35, // Espa√ßamento vertical entre n√≥s irm√£os (ajuste conforme necess√°rio)
            pspace: 15, // Espa√ßamento entre n√≥ pai e linha de conex√£o
        },
        shortcut: {
            enable: true, // Habilita atalhos de teclado (ex: zoom com +/- n√£o funciona por padr√£o, mas drag sim)
            mappings: {}, // Mapeamentos padr√£o s√£o geralmente suficientes
        },
    };

    // Limpa o cont√™iner e garante que esteja vis√≠vel e com altura correta
    if (!mapContainer) {
        console.error(
            `[MindMap] ERRO CR√çTICO: Cont√™iner do mapa #${mapContainerId} n√£o encontrado no DOM.`
        );
        return;
    }
    mapContainer.innerHTML = ''; // Limpa mensagens de erro ou mapas anteriores
    mapContainer.style.display = 'block';
    mapContainer.style.height = '600px'; // Garante a altura padr√£o

    try {
        console.log('[MindMap] Inicializando jsMind com as op√ß√µes...');
        // Cria a inst√¢ncia do jsMind e a armazena na vari√°vel global
        currentMindMapInstance = new jsMind(options);
        console.log(
            '[MindMap] Inst√¢ncia jsMind criada:',
            currentMindMapInstance
        );

        // Habilita o zoom usando o scroll do mouse (sem Ctrl)
        if (
            currentMindMapInstance.view &&
            currentMindMapInstance.view.e_panel
        ) {
            const panel = currentMindMapInstance.view.e_panel;
            // Remove listener antigo para evitar duplica√ß√£o se a fun√ß√£o for chamada novamente
            panel.removeEventListener('wheel', handleMindMapZoom);
            panel.addEventListener('wheel', handleMindMapZoom, {
                passive: false,
            }); // passive:false √© crucial para preventDefault funcionar
            console.log(
                '[MindMap] Zoom com scroll do mouse habilitado no painel do mapa.'
            );
        } else {
            console.warn(
                '[MindMap] N√£o foi poss√≠vel encontrar o painel (e_panel) do jsMind para adicionar o listener de zoom com scroll.'
            );
        }

        // Exibe o mapa mental com os dados fornecidos pela IA
        currentMindMapInstance.show(mindData);
        console.log(
            '[MindMap] Mapa mental exibido com sucesso via jsMind.show().'
        );

        // Opcional: Habilitar bot√£o 'Salvar' se existir um
        // const saveBtn = document.getElementById('save-mindmap-btn');
        // if (saveBtn) saveBtn.disabled = false;

        // Log de verifica√ß√£o p√≥s-renderiza√ß√£o (√∫til para depurar falhas silenciosas)
        setTimeout(() => {
            if (mapContainer) {
                // Verifica se o elemento canvas (ou svg, dependendo do engine) foi criado dentro do container
                const engineElement = mapContainer.querySelector('canvas, svg');
                if (engineElement)
                    console.log(
                        `[MindMap] Elemento <${engineElement.tagName.toLowerCase()}> do mapa encontrado. Renderiza√ß√£o OK.`
                    );
                else
                    console.warn(
                        '[MindMap] Elemento <canvas> ou <svg> N√ÉO encontrado. Renderiza√ß√£o do jsMind pode ter falhado silenciosamente.'
                    );
            }
        }, 300); // Pequeno delay para dar tempo de renderizar
    } catch (e) {
        // Captura erros durante a inicializa√ß√£o ou exibi√ß√£o do jsMind
        console.error(
            '[MindMap] ERRO CR√çTICO ao inicializar ou exibir o mapa com jsMind:',
            e
        );
        if (e.stack) console.error('[MindMap] Stack Trace:', e.stack); // Log do stack trace ajuda na depura√ß√£o
        if (mapContainer)
            mapContainer.innerHTML =
                '<p class="mindmap-hint" style="color: var(--error-color); text-align: center;">Ocorreu um erro interno ao tentar renderizar o mapa mental. Consulte o console para detalhes t√©cnicos.</p>';
        currentMindMapInstance = null; // Reseta a inst√¢ncia em caso de erro grave
        alert(
            'Ocorreu um erro ao renderizar o mapa mental. Verifique o console.'
        );
    }
}

/**
 * @function handleMindMapZoom
 * @description Fun√ß√£o para lidar com o evento de 'wheel' (scroll) no painel do mapa mental,
 * aplicando zoom in/out. √â chamada pelo listener adicionado em displayMindMap.
 * @param {WheelEvent} event - O evento de wheel.
 */
function handleMindMapZoom(event) {
    // Verifica se existe uma inst√¢ncia ativa do mapa
    if (!currentMindMapInstance || !currentMindMapInstance.view) {
        console.warn(
            '[MindMap] Tentativa de zoom sem inst√¢ncia do mapa ativa.'
        );
        return;
    }
    event.preventDefault(); // Previne o scroll normal da p√°gina DENTRO do cont√™iner do mapa

    if (event.deltaY < 0) {
        // Scroll para cima (ou para a esquerda em touchpads/macOS) -> Zoom In
        currentMindMapInstance.view.zoomIn();
        // console.log("[MindMap] Zoom In"); // Descomente para depurar zoom
    } else if (event.deltaY > 0) {
        // Scroll para baixo (ou para a direita) -> Zoom Out
        currentMindMapInstance.view.zoomOut();
        // console.log("[MindMap] Zoom Out"); // Descomente para depurar zoom
    }
    // Ignora deltaY === 0 (scroll horizontal em alguns mouses/touchpads)
}

// =================================================== //
// ===== FIM: Funcionalidade de Mapa Mental ===== //
// =================================================== //

// SUBSTITUA A FUN√á√ÉO 'renderFlashcards' INTEIRA POR ESTA:

// SUBSTITUA A FUN√á√ÉO 'renderFlashcards' INTEIRA POR ESTA:

function renderFlashcards() {
    const flashcardArea = document.getElementById('flashcard-area');
    if (!flashcardArea) {
        console.error(
            'ERRO: Elemento #flashcard-area n√£o encontrado ao renderizar.'
        );
        return; // Sai se o cont√™iner principal n√£o existe
    }

    // --- Calcular uso dos artigos ---
    const articleUsageCount = {};
    lexiaFlashcards.forEach((card) => {
        if (card.articleReference) {
            if (!articleUsageCount[card.articleReference]) {
                articleUsageCount[card.articleReference] = 0;
            }
            articleUsageCount[card.articleReference]++;
        }
    });

    // --- Salvar estado dos filtros ---
    const viewFilterValue =
        document.getElementById('flashcards-view-filter')?.value || 'all';
    const sortFilterValue =
        document.getElementById('flashcards-sort-filter')?.value || 'recent';
    const trackFilterValue =
        document.getElementById('flashcards-track-filter')?.value || 'all';
    const difficultyFilterValue =
        document.getElementById('flashcards-difficulty-filter')?.value || 'all';
    const cardsPerPage = parseInt(
        document.getElementById('cards-per-page-filter')?.value || 10
    );

    // --- L√≥gica de filtragem ---
    let cardsToDisplay = [...lexiaFlashcards];
    if (viewFilterValue === 'archived') {
        cardsToDisplay = cardsToDisplay.filter((card) => card.isArchived);
    } else {
        cardsToDisplay = cardsToDisplay.filter((card) => !card.isArchived);
    }
    if (viewFilterValue !== 'archived') {
        if (viewFilterValue === 'favorites')
            cardsToDisplay = cardsToDisplay.filter((card) => card.isFavorite);
        else if (viewFilterValue === 'viewed')
            cardsToDisplay = cardsToDisplay.filter(
                (card) => (card.viewCount || 0) > 0
            );
        else if (viewFilterValue === 'not-viewed')
            cardsToDisplay = cardsToDisplay.filter(
                (card) => (card.viewCount || 0) === 0
            );
    }
    if (trackFilterValue !== 'all')
        cardsToDisplay = cardsToDisplay.filter(
            (card) => (card.sourceTrack || 'Geral') === trackFilterValue
        );
    if (difficultyFilterValue !== 'all') {
        if (difficultyFilterValue === 'unrated')
            cardsToDisplay = cardsToDisplay.filter(
                (card) => !card.difficultyLevel
            );
        else
            cardsToDisplay = cardsToDisplay.filter(
                (card) => card.difficultyLevel === difficultyFilterValue
            );
    }

    // --- L√≥gica de Ordena√ß√£o ---
    cardsToDisplay.sort((a, b) => {
        if (a.isFavorite && !b.isFavorite) return -1;
        if (!a.isFavorite && b.isFavorite) return 1;
        switch (sortFilterValue) {
            case 'recent':
                return new Date(b.created) - new Date(a.created);
            case 'oldest':
                return new Date(a.created) - new Date(b.created);
            case 'views':
                return (b.viewCount || 0) - (a.viewCount || 0);
            case 'name':
                const nameA = a.customName || a.articleReference || a.question;
                const nameB = b.customName || b.articleReference || b.question;
                return nameA.localeCompare(nameB);
            default:
                return 0;
        }
    });

    // --- C√°lculo de Posi√ß√£o ---
    const flashcardPositionMap = {};
    const referenceCounter = {};
    const sortedByCreation = [...lexiaFlashcards].sort(
        (a, b) => new Date(a.created) - new Date(b.created)
    );
    sortedByCreation.forEach((card) => {
        if (card.articleReference) {
            if (!referenceCounter[card.articleReference])
                referenceCounter[card.articleReference] = 0;
            referenceCounter[card.articleReference]++;
            flashcardPositionMap[card.id] =
                referenceCounter[card.articleReference];
        }
    });

    // --- Prepara√ß√£o de dados para Gera√ß√£o ---
    const uniqueFiles = [...new Set(lexiaChunks.map((chunk) => chunk.file))];
    const tracks = uniqueFiles.map((file) => {
        const metadata = getTrackMetadata(file);
        return { fileName: file, displayName: metadata.displayName };
    });
    const tracksForGeneration = tracks
        .map((track) => {
            const fileChunks = lexiaChunks.filter(
                (chunk) => chunk.file === track.fileName
            );
            const articles = fileChunks.flatMap(
                (chunk) => chunk.legalArticles || []
            );
            return { ...track, articles, articleCount: articles.length };
        })
        .filter((track) => track.articles.length > 0);

    const flashcardsByTrack = {};
    lexiaFlashcards.forEach((card) => {
        const trackName = card.sourceTrack || 'Geral';
        if (!flashcardsByTrack[trackName]) flashcardsByTrack[trackName] = [];
        flashcardsByTrack[trackName].push(card);
    });

    // --- L√≥gica de Pagina√ß√£o ---
    const totalCards = cardsToDisplay.length;
    const totalPages = Math.ceil(totalCards / cardsPerPage) || 1;
    let currentPage = parseInt(flashcardArea.dataset.currentPage || 1);
    if (currentPage > totalPages) currentPage = totalPages;
    flashcardArea.dataset.currentPage = currentPage;
    const startIndex = (currentPage - 1) * cardsPerPage;
    const endIndex = startIndex + cardsPerPage;
    const paginatedCards = cardsToDisplay.slice(startIndex, endIndex);

    // --- Gera√ß√£o do HTML ---
    flashcardArea.innerHTML = `
        <div class="flashcards-container">
            <div class="generation-section">
                <h3>‚ö° Gerar Novos Flashcards</h3>
                <div class="tracks-selection">
                    ${tracksForGeneration
                        .map(
                            (track, index) => `
                        <details class="track-selection-group">
                            <summary class="track-header">
                                <h4 class="track-summary-title">${
                                    track.displayName
                                }</h4>
                                <span class="article-count">${
                                    track.articles.length
                                } artigos</span>
                            </summary>
                            <div class="articles-grid">
                                ${track.articles
                                    .map(
                                        (article) => `
                                    <div class="article-card" data-article-id="${
                                        article.id
                                    }">
                                        <label class="article-select">
                                            <input type="checkbox" class="article-checkbox" 
                                                   data-article-id="${
                                                       article.id
                                                   }" data-track="${
                                            track.fileName
                                        }">
                                            <div class="article-info">
                                                <strong class="article-reference">${
                                                    article.fullReference
                                                }</strong>
                                                <span class="article-usage-badge">${
                                                    articleUsageCount[
                                                        article.fullReference
                                                    ]
                                                        ? `Utilizado ${
                                                              articleUsageCount[
                                                                  article
                                                                      .fullReference
                                                              ]
                                                          } vez(es)`
                                                        : 'Nunca utilizado'
                                                }</span>
                                                <p class="article-subject">${
                                                    article.subject
                                                }</p>
                                                <p class="article-text-preview">${
                                                    article.fullText
                                                        ? article.fullText.substring(
                                                              0,
                                                              120
                                                          ) + '...'
                                                        : 'Texto n√£o dispon√≠vel.'
                                                }</p>
                                                <span class="article-law">${
                                                    article.law
                                                }</span>
                                            </div>
                                        </label>
                                        <div class="article-card-actions">
                                            <button class="btn btn-secondary read-article-btn" data-article-id="${
                                                article.id
                                            }" data-track="${
                                            track.fileName
                                        }">Ler art.</button>
                                        </div>
                                    </div>
                                `
                                    )
                                    .join('')}
                            </div>
                        </details>
                    `
                        )
                        .join('')}
                </div>
                <div class="generation-options">
                    <h4>üéØ Configura√ß√µes de Gera√ß√£o</h4>
                    <div class="options-grid">
                        <div class="option-group">
                            <label for="generation-focus">Foco do Flashcard:</label>
                            <select id="generation-focus">
                                <option value="general">Foco Geral</option>
                                <option value="detailed">Foco em Detalhes</option>
                                <option value="conceptual">Foco Conceitual</option>
                                <option value="procedural">Foco Procedimental</option>
                                <option value="specific">Foco Espec√≠fico</option>
                            </select>
                        </div>
                        <div class="option-group" id="custom-focus-group" style="display: none;">
                            <label for="custom-focus">Digite o foco:</label>
                            <input type="text" id="custom-focus" placeholder="Ex: prazos, penas...">
                        </div>
                        <div class="option-group">
                            <label for="flashcard-style">Estilo:</label>
                            <select id="flashcard-style">
                                <option value="direct">Direto</option>
                                <option value="contextual">Contextual</option>
                                <option value="comparative">Comparativo</option>
                                <option value="application">Aplica√ß√£o Pr√°tica</option>
                            </select>
                        </div>
                    </div>
                </div>
                <button id="generate-selected-flashcards" class="btn-primary generate-btn">üöÄ Gerar Flashcards</button>
            </div>

            <div class="existing-flashcards">
                <div class="section-header">
                    <h3>üìö Meus Flashcards</h3>
                    <div class="flashcards-stats">
                         <span class="stat">Vis√≠veis: ${
                             cardsToDisplay.length
                         }</span>
                         <span class="stat">Favoritos: ${
                             lexiaFlashcards.filter(
                                 (f) => f.isFavorite && !f.isArchived
                             ).length
                         }</span>
                         <span class="stat">Arquivados: ${
                             lexiaFlashcards.filter((f) => f.isArchived).length
                         }</span>
                    </div>
                </div> 
                
                <div class="review-actions">
                    <button id="review-all-btn" class="btn btn-secondary" ${
                        lexiaFlashcards.filter((c) => !c.isArchived).length ===
                        0
                            ? 'disabled'
                            : ''
                    }>Revisar Todos (${
        lexiaFlashcards.filter((c) => !c.isArchived).length
    })</button>
                    <button id="review-by-difficulty-btn" class="btn btn-secondary" ${
                        lexiaFlashcards.filter((c) => !c.isArchived).length ===
                        0
                            ? 'disabled'
                            : ''
                    }>Revisar por Dificuldade...</button>
                </div>

                <button id="toggle-filters-btn" class="btn btn-secondary toggle-filters-btn">
                    Filtros <span>‚ñæ</span>
                </button>

                <div class="flashcards-filters" id="collapsible-filters"> 
                    <div class="filter-group">
                        <label>Filtrar por:</label>
                        <select id="flashcards-view-filter" class="filter-select">
                            <option value="all">Ativos</option>
                            <option value="favorites">Favoritos</option>
                            <option value="not-viewed">Nunca Vistos</option>
                            <option value="viewed">Visualizados</option>
                            <option value="archived">Arquivados</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Ordenar por:</label>
                        <select id="flashcards-sort-filter" class="filter-select">
                            <option value="recent">Mais Recentes</option>
                            <option value="oldest">Mais Antigos</option>
                            <option value="views">Mais Visualizados</option>
                            <option value="name">Nome</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label>Trilha:</label>
                        <select id="flashcards-track-filter" class="filter-select">
                            <option value="all">Todas as Trilhas</option>
                            ${Object.keys(flashcardsByTrack)
                                .sort()
                                .map(
                                    (track) =>
                                        `<option value="${track}">${
                                            getTrackMetadata(track)
                                                .displayName || track
                                        }</option>`
                                )
                                .join('')}
                        </select>
                    </div>
                    <div class="filter-group">
                         <label>Dificuldade:</label>
                         <select id="flashcards-difficulty-filter" class="filter-select">
                             <option value="all">Todas</option>
                             <option value="easy">F√°cil</option>
                             <option value="medium">M√©dio</option>
                             <option value="difficult">Dif√≠cil</option>
                             <option value="unrated">N√£o Classificado</option>
                         </select>
                    </div>
                    <div class="filter-group">
                         <label>Itens por p√°g.:</label>
                         <select id="cards-per-page-filter" class="filter-select">
                             <option value="10">10</option>
                             <option value="20">20</option>
                             <option value="50">50</option>
                             <option value="100">100</option>
                         </select>
                    </div>
                </div>

                <div class="flashcards-grid" id="flashcards-list">
                    ${renderFlashcardsList(
                        paginatedCards,
                        flashcardPositionMap
                    )}
                </div>

                <div class="pagination-controls">
                     <button id="prev-page-btn" class="btn" ${
                         currentPage === 1 ? 'disabled' : ''
                     }>Anterior</button>
                     <span class="page-info">P√°gina ${currentPage} de ${totalPages} (${totalCards} cards)</span>
                     <button id="next-page-btn" class="btn" ${
                         currentPage === totalPages || totalPages === 0
                             ? 'disabled'
                             : ''
                     }>Pr√≥xima</button>
                </div>
            </div>
        </div>
    `;

    // --- Restaurar valores dos filtros ---
    const viewSelect = document.getElementById('flashcards-view-filter');
    const sortSelect = document.getElementById('flashcards-sort-filter');
    const trackSelect = document.getElementById('flashcards-track-filter');
    const difficultySelect = document.getElementById(
        'flashcards-difficulty-filter'
    );
    const perPageSelect = document.getElementById('cards-per-page-filter');

    if (viewSelect) viewSelect.value = viewFilterValue;
    if (sortSelect) sortSelect.value = sortFilterValue;
    if (trackSelect) trackSelect.value = trackFilterValue;
    if (difficultySelect) difficultySelect.value = difficultyFilterValue;
    if (perPageSelect) perPageSelect.value = cardsPerPage;

    // --- Reanexar event listeners ---
    setupFlashcardsEventListeners();
}

// Adicione esta nova fun√ß√£o em app.js

function showTrackSelectionModal(nextAction) {
    const overlay = document.createElement('div');
    overlay.id = 'track-selection-modal';
    overlay.className = 'modal-overlay';

    // 1. Obter todas as trilhas com flashcards ativos
    const tracksWithCards = {};
    const activeCards = lexiaFlashcards.filter((card) => !card.isArchived);
    activeCards.forEach((card) => {
        const trackName = card.sourceTrack || 'Geral';
        if (!tracksWithCards[trackName]) {
            tracksWithCards[trackName] = { count: 0, displayName: trackName }; // Usar sourceTrack como displayName inicial
            // Tenta obter um nome mais amig√°vel se for um arquivo conhecido
            const metadata = getTrackMetadata(trackName);
            if (metadata && metadata.displayName !== trackName) {
                tracksWithCards[trackName].displayName = metadata.displayName;
            }
        }
        tracksWithCards[trackName].count++;
    });

    const sortedTracks = Object.entries(tracksWithCards).sort(([, a], [, b]) =>
        a.displayName.localeCompare(b.displayName)
    );

    if (sortedTracks.length === 0) {
        showToast('Nenhum flashcard ativo dispon√≠vel para revis√£o.', 3000);
        return;
    }

    // 2. Gerar HTML do Modal
    overlay.innerHTML = `
        <div class="modal-content track-select-content">
            <h3>Selecionar Trilhas para Revis√£o</h3>
            <p>Escolha uma ou mais trilhas para incluir na sua sess√£o:</p>
            <div class="track-selection-controls">
                 <button class="btn btn-secondary btn-small" id="select-all-tracks">Selecionar Todas</button>
                 <button class="btn btn-secondary btn-small" id="clear-all-tracks">Limpar Sele√ß√£o</button>
            </div>
            <div class="track-checkboxes">
                ${sortedTracks
                    .map(
                        ([trackName, data]) => `
                    <label>
                        <input type="checkbox" class="track-select-checkbox" value="${trackName}" checked>
                        ${data.displayName} (${data.count})
                    </label>
                `
                    )
                    .join('')}
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" id="cancel-track-select">Cancelar</button>
                <button class="btn btn-primary" id="confirm-track-select" disabled>
                    ${
                        nextAction === 'reviewAll'
                            ? 'Iniciar Revis√£o'
                            : 'Selecionar Dificuldades...'
                    }
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(overlay);

    // 3. Adicionar Event Listeners do Modal
    const checkboxes = overlay.querySelectorAll('.track-select-checkbox');
    const confirmButton = overlay.querySelector('#confirm-track-select');
    const selectAllBtn = overlay.querySelector('#select-all-tracks');
    const clearAllBtn = overlay.querySelector('#clear-all-tracks');

    function updateTotalSelectedCards() {
        let total = 0;
        checkboxes.forEach((cb) => {
            if (cb.checked) {
                total += tracksWithCards[cb.value]?.count || 0;
            }
        });
        confirmButton.disabled = total === 0;
        const buttonTextBase =
            nextAction === 'reviewAll'
                ? 'Iniciar Revis√£o'
                : 'Selecionar Dificuldades...';
        confirmButton.textContent =
            total > 0 ? `${buttonTextBase} (${total})` : buttonTextBase;
    }

    checkboxes.forEach((cb) =>
        cb.addEventListener('change', updateTotalSelectedCards)
    );
    selectAllBtn.addEventListener('click', () => {
        checkboxes.forEach((cb) => (cb.checked = true));
        updateTotalSelectedCards();
    });
    clearAllBtn.addEventListener('click', () => {
        checkboxes.forEach((cb) => (cb.checked = false));
        updateTotalSelectedCards();
    });

    overlay
        .querySelector('#cancel-track-select')
        .addEventListener('click', () => {
            document.body.removeChild(overlay);
        });

    confirmButton.addEventListener('click', () => {
        const selectedTrackNames = Array.from(checkboxes)
            .filter((cb) => cb.checked)
            .map((cb) => cb.value);

        if (selectedTrackNames.length === 0) return; // Seguran√ßa extra

        // Filtra os cards APENAS das trilhas selecionadas
        const filteredByTrackCards = activeCards.filter((card) =>
            selectedTrackNames.includes(card.sourceTrack || 'Geral')
        );

        document.body.removeChild(overlay); // Fecha este modal

        // Decide a pr√≥xima a√ß√£o
        if (nextAction === 'reviewAll') {
            startDeckReview(filteredByTrackCards, 'allSelectedTracks'); // Inicia a revis√£o com os cards filtrados
        } else if (nextAction === 'selectDifficulty') {
            showDifficultySelectionModal(filteredByTrackCards); // Abre o modal de dificuldade, passando os cards j√° filtrados por trilha
        }
    });

    overlay.addEventListener('click', (e) => {
        // Fechar ao clicar fora
        if (e.target === overlay) {
            document.body.removeChild(overlay);
        }
    });

    // Estado inicial do bot√£o
    updateTotalSelectedCards();
}

// app.js - SUBSTITUA a fun√ß√£o showDifficultySelectionModal inteira por esta

function showDifficultySelectionModal(
    filteredByTrackCards,
    selectedTrackNames
) {
    // <-- Recebe a lista j√° filtrada por trilha
    const overlay = document.createElement('div');
    overlay.id = 'difficulty-selection-modal';
    overlay.className = 'modal-overlay';

    // Calcula contagens baseado nos cards j√° filtrados por trilha
    const counts = {
        easy: (filteredByTrackCards || []).filter(
            (c) => c.difficultyLevel === 'easy'
        ).length,
        medium: (filteredByTrackCards || []).filter(
            (c) => c.difficultyLevel === 'medium'
        ).length,
        difficult: (filteredByTrackCards || []).filter(
            (c) => c.difficultyLevel === 'difficult'
        ).length,
        unrated: (filteredByTrackCards || []).filter((c) => !c.difficultyLevel)
            .length,
    };

    // ===== CORRE√á√ÉO: Adiciona verifica√ß√£o para selectedTrackNames =====
    const safeSelectedTrackNames = Array.isArray(selectedTrackNames)
        ? selectedTrackNames
        : [];
    // Formata a lista de trilhas selecionadas para exibi√ß√£o
    const selectedTracksDisplay = safeSelectedTrackNames
        .map((name) => {
            // Tenta pegar o nome amig√°vel, sen√£o usa o nome do arquivo/chave
            const metadata = getTrackMetadata(name); // Assume que getTrackMetadata existe
            return metadata && metadata.displayName !== name
                ? metadata.displayName
                : name; // Mostra displayName se diferente
        })
        .join(', ');
    // ================================================================

    // Verifica se h√° cards filtrados por trilha para continuar
    if (!filteredByTrackCards || filteredByTrackCards.length === 0) {
        console.warn(
            '[Modal Dificuldade] Nenhum card encontrado ap√≥s filtro de trilha. Abortando modal.'
        );
        showToast(
            'Nenhum flashcard encontrado para as trilhas selecionadas.',
            3000
        );
        // N√£o cria o modal se n√£o houver cards
        return;
    }

    overlay.innerHTML = `
        <div class="modal-content difficulty-select-content">
            <h3>Revisar por Dificuldade</h3>

            ${
                safeSelectedTrackNames.length > 0
                    ? `
            <div class="selected-tracks-info">
                <strong>Trilhas Selecionadas:</strong> ${
                    selectedTracksDisplay || 'Nenhuma'
                }
            </div>
            `
                    : ''
            }

            <p>Selecione as dificuldades que deseja incluir na revis√£o (baseado nas trilhas selecionadas):</p>
            <div class="difficulty-checkboxes">
                <label style="${
                    counts.easy === 0 ? 'opacity: 0.6; cursor: default;' : ''
                }">
                    <input type="checkbox" value="easy" ${
                        counts.easy > 0 ? 'checked' : ''
                    } ${counts.easy === 0 ? 'disabled' : ''}>
                    F√°cil (${counts.easy})
                </label>
                <label style="${
                    counts.medium === 0 ? 'opacity: 0.6; cursor: default;' : ''
                }">
                    <input type="checkbox" value="medium" ${
                        counts.medium > 0 ? 'checked' : ''
                    } ${counts.medium === 0 ? 'disabled' : ''}>
                    M√©dio (${counts.medium})
                </label>
                <label style="${
                    counts.difficult === 0
                        ? 'opacity: 0.6; cursor: default;'
                        : ''
                }">
                    <input type="checkbox" value="difficult" ${
                        counts.difficult > 0 ? 'checked' : ''
                    } ${counts.difficult === 0 ? 'disabled' : ''}>
                    Dif√≠cil (${counts.difficult})
                </label>
                 <label style="${
                     counts.unrated === 0
                         ? 'opacity: 0.6; cursor: default;'
                         : ''
                 }">
                    <input type="checkbox" value="unrated" ${
                        counts.unrated > 0 ? 'checked' : ''
                    } ${counts.unrated === 0 ? 'disabled' : ''}>
                    N√£o Classificado (${counts.unrated})
                </label>
            </div>
            <div class="modal-actions">
                 <button class="btn btn-secondary" id="back-to-track-select">‚Üê Voltar (Trilhas)</button>
                <button class="btn btn-secondary" id="cancel-difficulty-select">Cancelar</button>
                <button class="btn btn-primary" id="start-difficulty-review" disabled>Iniciar Revis√£o</button>
            </div>
        </div>
    `;

    document.body.appendChild(overlay);

    // Event listeners do modal
    const startButton = overlay.querySelector('#start-difficulty-review');
    const checkboxes = overlay.querySelectorAll(
        '.difficulty-checkboxes input[type="checkbox"]:not(:disabled)'
    ); // Seleciona apenas os habilitados
    const backButton = overlay.querySelector('#back-to-track-select');

    overlay
        .querySelector('#cancel-difficulty-select')
        .addEventListener('click', () => {
            if (overlay.parentNode) document.body.removeChild(overlay);
        });

    startButton.addEventListener('click', () => {
        const selectedDifficulties = [];
        checkboxes.forEach((checkbox) => {
            if (checkbox.checked) {
                // Converte 'unrated' para null, mant√©m os outros como string
                selectedDifficulties.push(
                    checkbox.value === 'unrated' ? null : checkbox.value
                );
            }
        });

        if (selectedDifficulties.length === 0) return; // Seguran√ßa

        if (overlay.parentNode) document.body.removeChild(overlay); // Fecha este modal

        // Chama a fun√ß√£o para iniciar a revis√£o com os cards filtrados por trilha E dificuldade
        startFilteredDeckReview(selectedDifficulties, filteredByTrackCards);
    });

    // L√≥gica do bot√£o Voltar
    backButton.addEventListener('click', () => {
        if (overlay.parentNode) document.body.removeChild(overlay); // Fecha o modal atual
        showTrackSelectionModal('selectDifficulty'); // Reabre o modal de sele√ß√£o de trilha
    });

    overlay.addEventListener('click', (e) => {
        // Fechar ao clicar fora
        if (e.target === overlay) {
            if (overlay.parentNode) document.body.removeChild(overlay);
        }
    });

    // Fun√ß√£o interna para atualizar estado do bot√£o Iniciar
    function checkStartButtonState() {
        let totalSelectedCards = 0;
        checkboxes.forEach((cb) => {
            if (cb.checked) {
                // Usa o valor do checkbox ('easy', 'medium', 'difficult', 'unrated') para buscar a contagem
                totalSelectedCards += counts[cb.value] || 0;
            }
        });
        startButton.disabled = totalSelectedCards === 0;
        startButton.textContent =
            totalSelectedCards > 0
                ? `Iniciar Revis√£o (${totalSelectedCards})`
                : 'Iniciar Revis√£o';
    }

    // Adiciona listener e ajusta estado inicial dos checkboxes
    checkboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', checkStartButtonState);
    });

    // Verifica o estado inicial do bot√£o
    checkStartButtonState();
}

// Adicione esta nova fun√ß√£o em app.js

// Modifique a fun√ß√£o startFilteredDeckReview

function startFilteredDeckReview(selectedDifficulties, baseCardList) {
    // <-- Aceita a lista base
    // Filtra a lista BASE (j√° filtrada por trilha) pela dificuldade
    const finalFilteredCards = baseCardList.filter((card) =>
        selectedDifficulties.includes(card.difficultyLevel)
    );

    if (finalFilteredCards.length === 0) {
        showToast(
            'Nenhum flashcard encontrado com as dificuldades e trilhas selecionadas.',
            3000
        );
        return;
    }

    startDeckReview(finalFilteredCards, 'filtered'); // Chama o deck com a lista final
}

function startDeckReview(cardList = null, reviewType = 'all') {
    // Assinatura atualizada
    // Se cardList n√£o foi passado, filtra os ativos. Sen√£o, usa a lista fornecida.
    const cardsToReview = cardList
        ? cardList
        : lexiaFlashcards.filter((card) => !card.isArchived);

    if (cardsToReview.length === 0) {
        showToast('Nenhum flashcard encontrado para esta revis√£o.', 3000); // Mensagem gen√©rica
        return;
    }

    let currentIndex = 0;
    let isFlipped = false;
    const overlay = document.createElement('div');
    overlay.id = 'deck-review-overlay';
    overlay.className = 'modal-overlay deck-review-modal';

    // Dentro da fun√ß√£o startDeckReview...

    function renderReviewCard(index) {
        const card = cardsToReview[index];
        isFlipped = false; // Reset flip state when changing cards

        const cardRef = card.articleReference || `Flashcard ${index + 1}`;
        const sourceText = card.sourceTrack || 'Geral';
        const currentDifficulty = card.difficultyLevel || 'unrated';
        const difficultyLabel = getDifficultyLabel(currentDifficulty); // Usa a fun√ß√£o auxiliar
        const difficultyClass = currentDifficulty
            ? `difficulty-${currentDifficulty}`
            : 'difficulty-unrated';

        // ===== VERIFIQUE O HTML ABAIXO, ESPECIALMENTE O BOT√ÉO COM A CLASSE 'flip-deck-card-btn' =====
        overlay.innerHTML = `
            <div class="deck-review-container">
                <div class="deck-header">
                    <h3>${getReviewTypeLabel(reviewType)}</h3>
                    <span class="card-counter">${index + 1} / ${
            cardsToReview.length
        }</span>
                    <button class="btn-icon close-deck-btn" title="Fechar Revis√£o">‚úñ</button>
                </div>

                <div class="deck-card ${
                    isFlipped ? 'is-flipped' : ''
                }" id="deck-card-current">
                    <div class="card-face card-face--front">
                        <div class="card-content">
                            <small class="card-ref">${cardRef} <span class="difficulty-indicator ${difficultyClass}">${
            difficultyLabel || 'N√£o Classificado'
        }</span></small>
                            <h4>Pergunta:</h4>
                            <p>${card.question.replace(
                                /\n/g,
                                '<br>'
                            )}</p> <small class="card-source-deck">Fonte: ${sourceText}</small>
                        </div>
                        <button class="btn btn-primary flip-deck-card-btn">Mostrar Resposta</button>
                    </div>
                    <div class="card-face card-face--back">
                        <div class="card-content">
                             <small class="card-ref">${cardRef} <span class="difficulty-indicator ${difficultyClass}">${
            difficultyLabel || 'N√£o Classificado'
        }</span></small>
                             <h4>Resposta:</h4>
                             <p>${card.answer.replace(
                                 /\n/g,
                                 '<br>'
                             )}</p> <small class="card-source-deck">Fonte: ${sourceText}</small>
                        </div>
                        <div class="difficulty-rating-buttons">
                             <p>Classifique este card:</p>
                             <button class="btn btn-difficulty btn-easy" data-difficulty="easy">F√°cil</button>
                             <button class="btn btn-difficulty btn-medium" data-difficulty="medium">M√©dio</button>
                             <button class="btn btn-difficulty btn-difficult" data-difficulty="difficult">Dif√≠cil</button>
                        </div>
                    </div>
                </div>

                <div class="deck-navigation">
                    <button class="btn btn-secondary prev-card-btn" ${
                        index === 0 ? 'disabled' : ''
                    }>‚Üê Anterior</button>
                    <button class="btn btn-secondary next-card-btn" ${
                        index === cardsToReview.length - 1 ? 'disabled' : ''
                    }>Pr√≥xima ‚Üí</button>
                </div>
            </div>
        `;
        // ===== FIM DA VERIFICA√á√ÉO HTML =====

        // ===== CORRE√á√ÉO: Adicionar verifica√ß√£o antes de addEventListener =====
        const flipButton = overlay.querySelector('.flip-deck-card-btn');
        if (flipButton) {
            flipButton.addEventListener('click', () => flipCard(true));
        } else {
            console.error(
                "ERRO: Bot√£o '.flip-deck-card-btn' n√£o encontrado no HTML renderizado dentro de renderReviewCard."
            );
        }
        // =====================================================================

        overlay
            .querySelector('.close-deck-btn')
            .addEventListener('click', closeDeck);

        overlay
            .querySelectorAll('.difficulty-rating-buttons button')
            .forEach((button) => {
                button.addEventListener('click', (e) => {
                    const difficulty = e.target.dataset.difficulty;
                    rateCard(card.id, difficulty);
                    showNextCardOrClose();
                });
            });

        const prevBtn = overlay.querySelector('.prev-card-btn');
        const nextBtn = overlay.querySelector('.next-card-btn');

        if (prevBtn && !prevBtn.disabled) {
            prevBtn.addEventListener('click', () => {
                if (currentIndex > 0) {
                    currentIndex--;
                    renderReviewCard(currentIndex);
                }
            });
        }
        if (nextBtn && !nextBtn.disabled) {
            nextBtn.addEventListener('click', showNextCardOrClose);
        }
    } // Fim da fun√ß√£o renderReviewCard

    function flipCard(showAnswer) {
        const cardElement = overlay.querySelector('#deck-card-current');
        if (showAnswer && !isFlipped) {
            const currentCardData = cardsToReview[currentIndex];
            currentCardData.viewCount = (currentCardData.viewCount || 0) + 1;
            // Salva apenas a contagem de visualiza√ß√£o
            const cardIndex = lexiaFlashcards.findIndex(
                (c) => c.id === currentCardData.id
            );
            if (cardIndex !== -1) {
                lexiaFlashcards[cardIndex].viewCount =
                    currentCardData.viewCount;
                saveFlashcards();
            }
            isFlipped = true;
            cardElement.classList.add('is-flipped');
        }
    }

    function rateCard(cardId, difficulty) {
        const cardIndex = lexiaFlashcards.findIndex((c) => c.id === cardId);
        if (cardIndex !== -1) {
            lexiaFlashcards[cardIndex].difficultyLevel = difficulty;
            saveFlashcards(); // Salva a dificuldade escolhida
            console.log(`Card ${cardId} classificado como: ${difficulty}`);
        }
    }

    function showNextCardOrClose() {
        currentIndex++;
        if (currentIndex >= cardsToReview.length) {
            closeDeck(true); // Fim da revis√£o
        } else {
            renderReviewCard(currentIndex); // Mostra o pr√≥ximo
        }
    }

    function closeDeck(completed = false) {
        if (overlay.parentNode) {
            document.body.removeChild(overlay);
        }
        if (completed) {
            showToast(
                `üéâ Voc√™ revisou ${cardsToReview.length} flashcard(s)!`,
                3000
            );
        }
        renderFlashcards(); // Atualiza a lista principal
    }

    // Renderiza o primeiro card e adiciona o overlay
    renderReviewCard(currentIndex);
    document.body.appendChild(overlay);
}

// Adicionar em app.js

function showArticleContentModal(articleId, trackFileName) {
    const article = findArticleById(articleId, trackFileName);
    if (!article) {
        alert('Artigo n√£o encontrado.');
        return;
    }

    // Cria o overlay do modal
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';

    // Cria o conte√∫do do modal
    modalOverlay.innerHTML = `
        <div class="modal-content article-modal-content">
            <div class="modal-header">
                <h3>${article.fullReference}</h3>
                <button class="btn-icon close-modal-btn" title="Fechar">‚úñ</button>
            </div>
            <div class="modal-body">
                <p><strong>Lei:</strong> ${article.law}</p>
                <p><strong>Assunto:</strong> ${article.subject}</p>
                <hr>
                <div class="article-full-text">
                    ${article.fullText.replace(/\n/g, '<br>')}
                </div>
            </div>
        </div>
    `;

    // Adiciona o modal ao corpo do documento
    document.body.appendChild(modalOverlay);

    // Adiciona evento para fechar o modal
    modalOverlay
        .querySelector('.close-modal-btn')
        .addEventListener('click', () => {
            document.body.removeChild(modalOverlay);
        });

    // Opcional: fechar ao clicar fora do conte√∫do
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            document.body.removeChild(modalOverlay);
        }
    });
}

// SUBSTITUA A FUN√á√ÉO 'setupFlashcardsEventListeners' INTEIRA POR ESTA:

function setupFlashcardsEventListeners() {
    console.log('Configurando event listeners dos flashcards...');
    const flashcardArea = document.getElementById('flashcard-area');
    if (!flashcardArea) {
        console.error('ERRO: Elemento #flashcard-area n√£o encontrado.');
        return;
    }

    // 1. Clonagem para limpar listeners antigos
    const newFlashcardArea = flashcardArea.cloneNode(true);
    if (flashcardArea.parentNode) {
        flashcardArea.parentNode.replaceChild(newFlashcardArea, flashcardArea);
    } else {
        console.error(
            'ERRO: #flashcard-area n√£o tem n√≥ pai para substitui√ß√£o.'
        );
        return;
    }

    // 2. Listener de CLIQUE principal (com delega√ß√£o)
    newFlashcardArea.addEventListener('click', (e) => {
        const target = e.target;
        const targetId = target.id; // ID do elemento clicado
        const closestCard = target.closest('.flashcard-card'); // Card pai mais pr√≥ximo
        const flashcardId = closestCard
            ? closestCard.dataset.flashcardId
            : null; // ID do card, se houver

        // Bot√£o Gerar Novos Flashcards
        if (targetId === 'generate-selected-flashcards') {
            generateSelectedFlashcards();
            return;
        }

        // Bot√£o Revisar Todos
        if (targetId === 'review-all-btn') {
            showTrackSelectionModal('reviewAll');
            return;
        }

        // Bot√£o Revisar por Dificuldade
        if (targetId === 'review-by-difficulty-btn') {
            showTrackSelectionModal('selectDifficulty');
            return;
        }

        // Bot√£o para Mostrar/Esconder Filtros (Mobile)
        if (targetId === 'toggle-filters-btn') {
            const filtersPanel = newFlashcardArea.querySelector(
                '#collapsible-filters'
            );
            const buttonSpan = target.querySelector('span'); // A seta
            if (filtersPanel) {
                // Verifica o estilo computado para saber o estado real, especialmente em mobile
                const isCurrentlyVisible =
                    window.getComputedStyle(filtersPanel).display !== 'none';
                filtersPanel.style.display = isCurrentlyVisible
                    ? 'none'
                    : 'grid'; // Alterna
                buttonSpan.textContent = isCurrentlyVisible ? '‚ñæ' : '‚ñ¥'; // Muda a seta
            }
            return;
        }

        // Bot√£o Ler Artigo (na se√ß√£o de gera√ß√£o)
        const readBtn = target.closest('.read-article-btn');
        if (readBtn) {
            const articleId = readBtn.dataset.articleId;
            const track = readBtn.dataset.track;
            if (articleId && track) {
                showArticleContentModal(articleId, track);
            }
            return;
        }

        // A√ß√µes dentro de um card individual
        if (flashcardId) {
            if (target.closest('.favorite-btn')) {
                toggleFlashcardFavorite(flashcardId);
                return;
            }
            if (target.closest('.archive-btn')) {
                toggleFlashcardArchive(flashcardId);
                return;
            }
            if (target.closest('.edit-btn')) {
                editFlashcardName(flashcardId);
                return;
            }
            if (target.closest('.delete-btn')) {
                deleteFlashcard(flashcardId);
                return;
            }
            // Bot√£o Revisar Agora (individual)
            if (target.closest('.review-btn')) {
                const card = lexiaFlashcards.find((c) => c.id === flashcardId);
                if (card) startFlashcardReview([card], 'single'); // Chama a fun√ß√£o atualizada
                return;
            }
        }
    });

    // 3. Listener de MUDAN√áA (filtros, checkboxes)
    newFlashcardArea.addEventListener('change', (e) => {
        const target = e.target;
        const targetId = target.id;

        // Mostrar/ocultar campo de foco personalizado
        if (targetId === 'generation-focus') {
            const customGroup = newFlashcardArea.querySelector(
                '#custom-focus-group'
            );
            if (customGroup) {
                customGroup.style.display =
                    target.value === 'specific' ? 'block' : 'none';
            }
            return;
        }

        // Aplicar filtros da lista principal (incluindo o novo filtro e pagina√ß√£o)
        if (
            targetId === 'flashcards-view-filter' ||
            targetId === 'flashcards-sort-filter' ||
            targetId === 'flashcards-track-filter' ||
            targetId === 'flashcards-difficulty-filter' ||
            targetId === 'cards-per-page-filter'
        ) {
            console.log('Filtro alterado:', targetId, target.value);
            // Ao mudar filtro ou itens por p√°gina, volta para a primeira p√°gina
            newFlashcardArea.dataset.currentPage = 1;
            renderFlashcards(); // Re-renderiza a lista com os filtros aplicados
            return;
        }
    });

    // 4. Funcionalidade do ACCORDION (mantida)
    const allDetails = newFlashcardArea.querySelectorAll(
        '.track-selection-group'
    );
    allDetails.forEach((details) => {
        details.addEventListener('toggle', (event) => {
            if (event.target.open) {
                allDetails.forEach((otherDetails) => {
                    if (otherDetails !== event.target) {
                        otherDetails.open = false;
                    }
                });
            }
        });
    });

    // 5. Listeners da Pagina√ß√£o (bot√µes Anterior/Pr√≥xima)
    const prevBtn = newFlashcardArea.querySelector('#prev-page-btn');
    const nextBtn = newFlashcardArea.querySelector('#next-page-btn');

    if (prevBtn) {
        prevBtn.addEventListener('click', () => {
            let currentPage = parseInt(
                newFlashcardArea.dataset.currentPage || 1
            );
            if (currentPage > 1) {
                newFlashcardArea.dataset.currentPage = currentPage - 1;
                renderFlashcards(); // Re-renderiza a p√°gina anterior
            }
        });
    }
    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            let currentPage = parseInt(
                newFlashcardArea.dataset.currentPage || 1
            );
            // Pega o total de p√°ginas da string exibida (Ex: "P√°gina 1 de 5")
            const totalPagesText =
                newFlashcardArea.querySelector('.page-info')?.textContent || '';
            const match = totalPagesText.match(/de (\d+)/);
            const totalPages = match ? parseInt(match[1]) : 1;

            if (currentPage < totalPages) {
                newFlashcardArea.dataset.currentPage = currentPage + 1;
                renderFlashcards(); // Re-renderiza a pr√≥xima p√°gina
            }
        });
    }
}

// Adicione esta fun√ß√£o auxiliar para debug dos filtros:
function debugFilters() {
    const viewFilter = document.getElementById('flashcards-view-filter');
    const sortFilter = document.getElementById('flashcards-sort-filter');
    const trackFilter = document.getElementById('flashcards-track-filter');

    console.log('Filtros encontrados:', {
        viewFilter: viewFilter ? viewFilter.value : 'n√£o encontrado',
        sortFilter: sortFilter ? sortFilter.value : 'n√£o encontrado',
        trackFilter: trackFilter ? trackFilter.value : 'n√£o encontrado',
    });
}

function renderFlashcardsList(flashcards, flashcardPositionMap = {}) {
    console.log(
        `[DEBUG] renderFlashcardsList recebendo ${
            flashcards?.length || 0
        } cards para exibir.`
    );

    if (!flashcards || flashcards.length === 0) {
        return '<p class="no-items">Nenhum flashcard encontrado para os filtros selecionados.</p>';
    }

    // Fun√ß√£o auxiliar local para obter label de dificuldade
    function getDifficultyLabel(level) {
        switch (level) {
            case 'easy':
                return 'F√°cil';
            case 'medium':
                return 'M√©dio';
            case 'difficult':
                return 'Dif√≠cil';
            default:
                return null;
        }
    }

    return flashcards
        .map((card, index) => {
            if (!card || typeof card !== 'object') {
                console.warn(
                    `[DEBUG] Item inv√°lido no √≠ndice ${index} foi ignorado:`,
                    card
                );
                return '';
            }

            const safeCard = {
                id: card.id || `missing-id-${Date.now()}-${index}`,
                question: card.question || '[Pergunta n√£o dispon√≠vel]',
                answer: card.answer || '[Resposta n√£o dispon√≠vel]',
                customName: card.customName || '',
                sourceTrack: card.sourceTrack || 'Geral',
                viewCount: card.viewCount || 0,
                isFavorite: card.isFavorite || false,
                isArchived: card.isArchived || false,
                created: card.created || new Date().toISOString(),
                articleReference: card.articleReference || '',
                difficultyLevel: card.difficultyLevel || null,
            };

            let displayName =
                safeCard.customName ||
                safeCard.articleReference ||
                safeCard.question.substring(0, 70) +
                    (safeCard.question.length > 70 ? '...' : '');
            const position = flashcardPositionMap[safeCard.id];
            if (position > 1) {
                displayName += ` <sup>${position}</sup>`;
            }

            const difficultyLevel = safeCard.difficultyLevel;
            const difficultyLabel = getDifficultyLabel(difficultyLevel);
            const difficultyClass = difficultyLevel
                ? `difficulty-${difficultyLevel}`
                : 'difficulty-unrated';

            return `
            <div class="flashcard-card ${
                safeCard.isFavorite ? 'favorite' : ''
            } ${safeCard.isArchived ? 'archived' : ''}" data-flashcard-id="${
                safeCard.id
            }">
                
                <div class="flashcard-header">
                    <div class="flashcard-title-area">
                        <h4 class="flashcard-title" title="${
                            safeCard.question
                        }">${displayName}</h4>
                        ${
                            difficultyLabel
                                ? `<span class="difficulty-badge ${difficultyClass}">${difficultyLabel}</span>`
                                : ''
                        } 
                    </div>
                    <div class="flashcard-actions">
                        <button class="flashcard-action-btn favorite-btn" title="${
                            safeCard.isFavorite ? 'Desfavoritar' : 'Favoritar'
                        }">${safeCard.isFavorite ? '‚≠ê' : '‚òÜ'}</button>
                        <button class="flashcard-action-btn edit-btn" title="Editar nome">‚úèÔ∏è</button>
                        <button class="flashcard-action-btn archive-btn" title="${
                            safeCard.isArchived ? 'Desarquivar' : 'Arquivar'
                        }">${safeCard.isArchived ? 'üìÇ' : 'üìÅ'}</button>
                        <button class="flashcard-action-btn delete-btn" title="Excluir">üóëÔ∏è</button>
                    </div>
                </div>

                <div class="flashcard-footer">
                   <div class="flashcard-meta">
                        <span class="meta-item source" title="Trilha de Origem">üìö ${
                            safeCard.sourceTrack
                        }</span>
                        <span class="meta-item views" title="Visualiza√ß√µes">üëÅÔ∏è ${
                            safeCard.viewCount
                        }</span>
                    </div>
                    <button class="btn btn-primary review-btn">Revisar Agora</button> 
                </div>

            </div>
            `;
        })
        .join('');
}

// Adicione esta fun√ß√£o para for√ßar a atualiza√ß√£o dos filtros:
function forceFilterUpdate() {
    const viewFilter = document.getElementById('flashcards-view-filter');
    const sortFilter = document.getElementById('flashcards-sort-filter');
    const trackFilter = document.getElementById('flashcards-track-filter');

    if (viewFilter) viewFilter.value = 'all';
    if (sortFilter) sortFilter.value = 'recent';
    if (trackFilter) trackFilter.value = 'all';

    renderFlashcards();
}

// Substitua as fun√ß√µes existentes em app.js por estas:

function toggleFlashcardFavorite(flashcardId) {
    const flashcard = lexiaFlashcards.find((f) => f.id === flashcardId);
    if (flashcard) {
        flashcard.isFavorite = !flashcard.isFavorite;
        saveFlashcards();

        // Atualiza√ß√£o direta no DOM
        const cardElement = document.querySelector(
            `.flashcard-card[data-flashcard-id="${flashcardId}"]`
        );
        if (cardElement) {
            cardElement.classList.toggle('favorite', flashcard.isFavorite);
            const favButton = cardElement.querySelector('.favorite-btn');
            favButton.innerHTML = flashcard.isFavorite ? '‚≠ê' : '‚òÜ';
            favButton.title = flashcard.isFavorite
                ? 'Desfavoritar'
                : 'Favoritar';
        }
        updateFlashcardStats();
    }
}

// app.js - Substitua a fun√ß√£o inteira por esta

// app.js - Substitua a fun√ß√£o inteira por esta

// app.js - Substitua a fun√ß√£o inteira por esta vers√£o corrigida

function toggleFlashcardArchive(flashcardId) {
    const flashcard = lexiaFlashcards.find((f) => f.id === flashcardId);
    if (!flashcard) return;

    // 1. Inverte o estado de arquivamento nos dados
    flashcard.isArchived = !flashcard.isArchived;
    saveFlashcards();

    // 2. Encontra o elemento do card na tela
    const cardElement = document.querySelector(
        `.flashcard-card[data-flashcard-id="${flashcardId}"]`
    );
    if (!cardElement) return;

    // 3. ATUALIZA√á√ÉO IMEDIATA DO √çCONE E T√çTULO (CORRE√á√ÉO CR√çTICA)
    // Isso acontece ANTES da l√≥gica de remo√ß√£o, garantindo feedback visual.
    const archiveButton = cardElement.querySelector('.archive-btn');
    if (archiveButton) {
        archiveButton.innerHTML = flashcard.isArchived ? 'üìÇ' : 'üìÅ';
        archiveButton.title = flashcard.isArchived ? 'Desarquivar' : 'Arquivar';
    }

    // 4. Atualiza os contadores no cabe√ßalho
    updateFlashcardStats();

    // 5. L√ìGICA DE REMO√á√ÉO VISUAL (agora separada e mais confi√°vel)
    const currentFilter = document.getElementById(
        'flashcards-view-filter'
    )?.value;

    // Verifica se o card n√£o pertence mais √† vis√£o atual e deve ser removido
    if (
        (currentFilter === 'archived' && !flashcard.isArchived) ||
        (currentFilter !== 'archived' && flashcard.isArchived)
    ) {
        // Aplica a classe para a anima√ß√£o de "sa√≠da"
        cardElement.classList.add('card-removing');

        // Remove o elemento do DOM ap√≥s a anima√ß√£o de 500ms
        setTimeout(() => {
            cardElement.remove();

            // Se a p√°gina ficar vazia, redesenha para mostrar a mensagem correta
            if (document.querySelectorAll('.flashcard-card').length === 0) {
                renderFlashcards();
            }
        }, 500);
    }
}

function editFlashcardName(flashcardId) {
    const flashcard = lexiaFlashcards.find((f) => f.id === flashcardId);
    if (flashcard) {
        const newName = prompt(
            'Digite o novo nome para o flashcard:',
            flashcard.customName ||
                flashcard.articleReference ||
                flashcard.question.substring(0, 50)
        );
        if (newName && newName.trim() !== '') {
            flashcard.customName = newName.trim();
            saveFlashcards();

            // Atualiza√ß√£o direta no DOM
            const cardElement = document.querySelector(
                `.flashcard-card[data-flashcard-id="${flashcardId}"]`
            );
            if (cardElement) {
                const titleElement =
                    cardElement.querySelector('.flashcard-title');
                // Mant√©m o 'sup' se ele existir
                const supElement = titleElement.querySelector('sup');
                titleElement.innerHTML =
                    flashcard.customName +
                    (supElement ? supElement.outerHTML : '');
            }
        }
    }
}

function deleteFlashcard(flashcardId) {
    if (
        confirm(
            'Tem certeza que deseja excluir este flashcard? Esta a√ß√£o n√£o pode ser desfeita.'
        )
    ) {
        lexiaFlashcards = lexiaFlashcards.filter((f) => f.id !== flashcardId);
        saveFlashcards();

        // Atualiza√ß√£o direta no DOM
        const cardElement = document.querySelector(
            `.flashcard-card[data-flashcard-id="${flashcardId}"]`
        );
        if (cardElement) {
            cardElement.classList.add('card-removing');
            setTimeout(() => {
                cardElement.remove();
                if (document.querySelectorAll('.flashcard-card').length === 0) {
                    renderFlashcards();
                }
            }, 500);
        }
        updateFlashcardStats();
    }
}

function reviewSingleFlashcard(flashcardId) {
    const flashcard = lexiaFlashcards.find((f) => f.id === flashcardId);
    if (flashcard) {
        // **CORRE√á√ÉO**: N√£o incrementa viewCount aqui - ser√° feito na revis√£o
        startFlashcardReview([flashcard], 'single');
    }
}

async function generateSelectedFlashcards() {
    const selectedCheckboxes = document.querySelectorAll(
        '.article-checkbox:checked'
    );
    if (selectedCheckboxes.length === 0) {
        alert('Selecione pelo menos um artigo para gerar flashcards.');
        return;
    }

    const focus = document.getElementById('generation-focus').value;
    const specificFocus =
        focus === 'specific'
            ? document.getElementById('custom-focus').value
            : '';
    const style = document.getElementById('flashcard-style').value;

    if (focus === 'specific' && !specificFocus.trim()) {
        alert('Digite o foco espec√≠fico para a gera√ß√£o dos flashcards.');
        return;
    }

    const generateBtn = document.getElementById('generate-selected-flashcards');
    const originalText = generateBtn.textContent;
    generateBtn.textContent = 'üîÑ Gerando...';
    generateBtn.disabled = true;

    let generatedCount = 0;
    const errors = [];

    for (const checkbox of selectedCheckboxes) {
        const articleId = checkbox.dataset.articleId;
        const track = checkbox.dataset.track;

        // Encontrar o artigo
        const article = findArticleById(articleId);

        if (article) {
            try {
                const flashcard = await generateFlashcardFromArticle(
                    article,
                    focus,
                    specificFocus,
                    style
                );
                if (flashcard) {
                    generatedCount++;
                } else {
                    errors.push(`Falha ao gerar para ${article.fullReference}`);
                }
            } catch (error) {
                errors.push(
                    `Erro em ${article.fullReference}: ${error.message}`
                );
            }

            // Pequena pausa para evitar rate limiting
            await new Promise((resolve) => setTimeout(resolve, 1000));
        }
    }

    generateBtn.textContent = originalText;
    generateBtn.disabled = false;

    let message = `‚úÖ ${generatedCount} flashcards gerados com sucesso!`;
    if (errors.length > 0) {
        message += `\n\nErros (${errors.length}):\n${errors
            .slice(0, 3)
            .join('\n')}`;
        if (errors.length > 3)
            message += `\n... e mais ${errors.length - 3} erros`;
    }

    alert(message);
    renderFlashcards();
}

// app.js - SUBSTITUA a fun√ß√£o findArticleById existente por esta

/**
 * @function findArticleById
 * @description Encontra um objeto de artigo completo dentro de lexiaChunks pelo seu ID √∫nico.
 * Primeiro tenta a busca direta e depois um fallback baseado no formato do ID.
 * @param {string} articleId - O ID √∫nico do artigo a ser encontrado (formato: article-nome_arquivo-numero).
 * @returns {object|null} O objeto completo do artigo (incluindo fullText, etc.) ou null se n√£o encontrado.
 */
function findArticleById(articleId) {
    console.log(`[findArticleById] Buscando ID: ${articleId}`);
    if (!articleId) {
        console.warn(
            '[findArticleById] ID do artigo fornecido √© inv√°lido (null ou vazio).'
        );
        return null;
    }

    // --- 1. Busca Direta (M√©todo Preferencial) ---
    for (const chunk of lexiaChunks) {
        if (chunk.legalArticles && Array.isArray(chunk.legalArticles)) {
            for (const article of chunk.legalArticles) {
                // Compara√ß√£o direta e exata do ID
                if (article && article.id === articleId) {
                    console.log(
                        `[findArticleById] Artigo encontrado DIRETAMENTE no chunk ${chunk.id}:`,
                        {
                            id: article.id,
                            ref: article.fullReference,
                            law: article.law,
                        }
                    );
                    // Retorna o objeto completo do artigo, garantindo as propriedades necess√°rias
                    return {
                        id: article.id,
                        number: article.number || '',
                        fullReference:
                            article.fullReference || `Art. ${article.number}`,
                        law: article.law || chunk.file.replace('.pdf', ''),
                        subject: article.subject || 'Assunto n√£o definido',
                        fullText: article.fullText || '', // Crucial para a gera√ß√£o
                        paragraphs: article.paragraphs || [],
                        context: article.context || '',
                        chunkId: chunk.id, // Adiciona o ID do chunk de origem
                        fileName: chunk.file, // Adiciona o nome do arquivo de origem
                    };
                }
            }
        } else if (chunk.legalArticles) {
            // Log se legalArticles n√£o for um array (pode indicar problema nos dados)
            console.warn(
                `[findArticleById] Propriedade 'legalArticles' no chunk ${chunk.id} n√£o √© um array.`
            );
        }
    }
    console.log(
        `[findArticleById] Busca direta pelo ID "${articleId}" falhou em todos os chunks.`
    );

    // --- 2. Fallback (Tentativa Baseada no Formato do ID) ---
    // Tenta extrair informa√ß√µes do ID para busca alternativa (menos confi√°vel)
    // Formato esperado: article-nome_arquivo-numero
    const idParts = articleId.split('-');
    // Precisa de pelo menos 'article', 'nomearquivo', 'numero'
    if (idParts.length >= 3 && idParts[0] === 'article') {
        const possibleArticleNumber = idParts[idParts.length - 1]; // √öltima parte
        // Junta as partes do meio que podem formar o nome do arquivo (lidando com h√≠fens no nome)
        const possibleFileNameIdentifier = idParts.slice(1, -1).join('-');

        console.log(
            `[findArticleById] Tentando fallback com N√∫mero: ${possibleArticleNumber}, Identificador Arquivo: ${possibleFileNameIdentifier}`
        );

        for (const chunk of lexiaChunks) {
            // Verifica se o identificador do arquivo no ID corresponde ao nome do arquivo do chunk (ap√≥s tratamento similar)
            const chunkFileIdentifier = chunk.file.replace(
                /[^a-zA-Z0-9]/g,
                '_'
            ); // Tratamento similar ao da gera√ß√£o de ID

            if (
                chunk.legalArticles &&
                chunkFileIdentifier.includes(possibleFileNameIdentifier)
            ) {
                console.log(
                    `[findArticleById Fallback] Verificando chunk ${chunk.id} (arquivo: ${chunk.file})`
                );
                for (const article of chunk.legalArticles) {
                    // Compara o n√∫mero do artigo extra√≠do do ID com o n√∫mero no objeto do artigo
                    if (article && article.number === possibleArticleNumber) {
                        console.warn(
                            `[findArticleById] Artigo encontrado via FALLBACK no chunk ${chunk.id}:`,
                            {
                                id: article.id,
                                ref: article.fullReference,
                                number: article.number,
                            }
                        );
                        // Retorna o objeto completo
                        return {
                            id: article.id, // Usa o ID real encontrado
                            number: article.number,
                            fullReference:
                                article.fullReference ||
                                `Art. ${article.number}`,
                            law: article.law || chunk.file.replace('.pdf', ''),
                            subject: article.subject || 'Assunto n√£o definido',
                            fullText: article.fullText || '',
                            paragraphs: article.paragraphs || [],
                            context: article.context || '',
                            chunkId: chunk.id,
                            fileName: chunk.file,
                        };
                    }
                }
            }
        }
    } else {
        console.log(
            `[findArticleById] Formato do ID "${articleId}" n√£o permite fallback.`
        );
    }

    // --- 3. N√£o Encontrado ---
    console.error(
        `[findArticleById] ARTIGO N√ÉO ENCONTRADO ap√≥s todas as tentativas: ${articleId}`
    );
    // Opcional: Listar todos os IDs dispon√≠veis para depura√ß√£o
    // console.log("[findArticleById DEBUG] IDs dispon√≠veis em lexiaChunks:", lexiaChunks.flatMap(c => c.legalArticles || []).map(a => a.id));
    return null; // Retorna null se n√£o encontrar de nenhuma forma
}

function getUniqueFlashcardSources() {
    const sources = new Set();
    lexiaFlashcards.forEach((card) => {
        const chunk = lexiaChunks.find((c) => c.id === card.chunkId);
        if (chunk) {
            sources.add(chunk.file);
        }
    });
    return Array.from(sources);
}

function filterFlashcards(source) {
    const flashcardGrid = document.querySelector('.flashcard-grid');
    let filteredCards = lexiaFlashcards;

    if (source !== 'all') {
        filteredCards = lexiaFlashcards.filter((card) => {
            const chunk = lexiaChunks.find((c) => c.id === card.chunkId);
            return chunk && chunk.file === source;
        });
    }

    flashcardGrid.innerHTML = filteredCards
        .slice(0, 6)
        .map((card) => {
            const chunk = lexiaChunks.find((c) => c.id === card.chunkId);
            const cardSource = chunk ? chunk.file : 'Desconhecido';
            const difficulty =
                card.easiness < 2.0
                    ? 'Dif√≠cil'
                    : card.easiness < 2.5
                    ? 'M√©dio'
                    : 'F√°cil';
            return `
            <div class="flashcard-preview">
                <div class="flashcard-meta">
                    <span class="source">${cardSource}</span>
                    <span class="difficulty ${difficulty.toLowerCase()}">${difficulty}</span>
                </div>
                <p class="question-preview">${card.question.substring(
                    0,
                    80
                )}...</p>
                <button class="review-single-btn" data-card-id="${
                    card.id
                }">Revisar</button>
            </div>
        `;
        })
        .join('');

    // Re-add event listeners for new buttons
    document.querySelectorAll('.review-single-btn').forEach((button) => {
        button.addEventListener('click', (e) => {
            const cardId = e.target.dataset.cardId;
            const card = lexiaFlashcards.find((c) => c.id === cardId);
            if (card) {
                startFlashcardReview([card], 'single');
            }
        });
    });
}

// SUBSTITUA A FUN√á√ÉO 'startFlashcardReview' INTEIRA POR ESTA:

function startFlashcardReview(cardsToReview, reviewType = 'single') {
    if (!cardsToReview || cardsToReview.length === 0) {
        showToast('Nenhum flashcard selecionado para revisar.', 3000);
        if (reviewType !== 'single') renderFlashcards();
        return;
    }

    let currentCardIndex = 0;
    let isFlipped = false;

    const overlay = document.createElement('div');
    overlay.id = 'individual-review-overlay';
    overlay.className =
        'modal-overlay deck-review-modal individual-review-modal';

    function renderReviewCard(index) {
        if (index >= cardsToReview.length) {
            closeReview(true); // Revis√£o conclu√≠da
            return;
        }

        const card = cardsToReview[index];
        isFlipped = false;

        const cardRef = card.articleReference || `Flashcard ${index + 1}`;
        const sourceText = card.sourceTrack || 'Geral';
        const currentDifficulty = card.difficultyLevel || 'unrated'; // Pega a dificuldade atual

        overlay.innerHTML = `
            <div class="deck-review-container"> 
                <div class="deck-header">
                    <h3>${getReviewTypeLabel(reviewType)}</h3>
                    <span class="card-counter">${index + 1} / ${
            cardsToReview.length
        }</span>
                    <button class="btn-icon close-deck-btn" title="Fechar Revis√£o">‚úñ</button>
                </div>

                <div class="deck-card ${
                    isFlipped ? 'is-flipped' : ''
                }" id="deck-card-current">
                    
                    <div class="card-face card-face--front">
                        <div class="card-content">
                            <small class="card-ref">${cardRef} <span class="difficulty-indicator difficulty-${currentDifficulty}">${getDifficultyLabel(
            currentDifficulty
        )}</span></small>
                            <h4>Pergunta:</h4>
                            <p>${card.question}</p>
                            <small class="card-source-deck">Fonte: ${sourceText}</small>
                        </div>
                        <button class="btn btn-primary flip-deck-card-btn">Mostrar Resposta</button>
                    </div>

                    <div class="card-face card-face--back">
                        <div class="card-content">
                            <small class="card-ref">${cardRef} <span class="difficulty-indicator difficulty-${currentDifficulty}">${getDifficultyLabel(
            currentDifficulty
        )}</span></small>
                            <h4>Resposta:</h4>
                            <p>${card.answer}</p>
                            <small class="card-source-deck">Fonte: ${sourceText}</small>
                        </div>
                        <div class="difficulty-rating-buttons">
                            <p>Como voc√™ classificaria este card?</p>
                            <button class="btn btn-difficulty btn-easy" data-difficulty="easy">F√°cil</button>
                            <button class="btn btn-difficulty btn-medium" data-difficulty="medium">M√©dio</button>
                            <button class="btn btn-difficulty btn-difficult" data-difficulty="difficult">Dif√≠cil</button>
                        </div>
                        </div>
                </div>

                 ${
                     cardsToReview.length > 1
                         ? `
                 <div class="deck-navigation">
                     <button class="btn btn-secondary prev-card-btn" ${
                         index === 0 ? 'disabled' : ''
                     }>‚Üê Anterior</button>
                     <span class="quality-info">(Use os bot√µes de classifica√ß√£o acima)</span>
                     <button class="btn btn-secondary next-card-btn" ${
                         index === cardsToReview.length - 1 ? 'disabled' : ''
                     }>Pr√≥xima ‚Üí</button>
                 </div>
                 `
                         : ''
                 }
            </div>
        `;

        // Event Listeners
        overlay
            .querySelector('.close-deck-btn')
            .addEventListener('click', () => closeReview(false));
        overlay
            .querySelector('.flip-deck-card-btn')
            .addEventListener('click', () => flipCard(true));

        // Listeners para os bot√µes de dificuldade
        overlay
            .querySelectorAll('.difficulty-rating-buttons button')
            .forEach((button) => {
                button.addEventListener('click', (e) => {
                    const difficulty = e.target.dataset.difficulty;
                    rateCard(card.id, difficulty); // Salva a dificuldade
                    showNextCard(); // Avan√ßa ou fecha
                });
            });

        // Listeners de navega√ß√£o (se existirem)
        const prevBtn = overlay.querySelector('.prev-card-btn');
        const nextBtn = overlay.querySelector('.next-card-btn');
        if (prevBtn && !prevBtn.disabled) {
            prevBtn.addEventListener('click', () => {
                if (currentCardIndex > 0) {
                    currentCardIndex--;
                    renderReviewCard(currentCardIndex);
                }
            });
        }
        if (nextBtn && !nextBtn.disabled) {
            nextBtn.addEventListener('click', () => {
                if (currentCardIndex < cardsToReview.length - 1) {
                    currentCardIndex++;
                    renderReviewCard(currentCardIndex);
                }
            });
        }
    }

    function flipCard(showAnswer) {
        const cardElement = overlay.querySelector('#deck-card-current');
        if (showAnswer && !isFlipped) {
            const currentCardData = cardsToReview[currentCardIndex];
            currentCardData.viewCount = (currentCardData.viewCount || 0) + 1;
            // Salva apenas a contagem de visualiza√ß√£o ao virar
            const cardIndex = lexiaFlashcards.findIndex(
                (c) => c.id === currentCardData.id
            );
            if (cardIndex !== -1) {
                lexiaFlashcards[cardIndex].viewCount =
                    currentCardData.viewCount;
                saveFlashcards();
            }
            isFlipped = true;
            cardElement.classList.add('is-flipped');
        }
    }

    function rateCard(cardId, difficulty) {
        const cardIndex = lexiaFlashcards.findIndex((c) => c.id === cardId);
        if (cardIndex !== -1) {
            lexiaFlashcards[cardIndex].difficultyLevel = difficulty;
            saveFlashcards(); // Salva a dificuldade escolhida
            console.log(`Card ${cardId} classificado como: ${difficulty}`);
        }
    }

    function showNextCard() {
        currentCardIndex++;
        // Se for o √∫ltimo card (ou revis√£o individual), fecha. Sen√£o, renderiza o pr√≥ximo.
        if (currentCardIndex >= cardsToReview.length) {
            closeReview(true);
        } else {
            renderReviewCard(currentCardIndex);
        }
    }

    function closeReview(completed) {
        if (overlay.parentNode) {
            document.body.removeChild(overlay);
        }
        if (completed) {
            showToast(
                `üéâ Voc√™ revisou ${cardsToReview.length} flashcard(s)!`,
                3000
            );
        }
        renderFlashcards(); // Sempre atualiza a lista principal ao fechar
    }

    // Fun√ß√£o auxiliar para obter label de dificuldade
    function getDifficultyLabel(level) {
        switch (level) {
            case 'easy':
                return 'F√°cil';
            case 'medium':
                return 'M√©dio';
            case 'difficult':
                return 'Dif√≠cil';
            default:
                return 'N√£o Classificado';
        }
    }

    // Inicializa a renderiza√ß√£o
    renderReviewCard(currentCardIndex);
    document.body.appendChild(overlay);
}

// --- FUN√á√ÉO DE NOTIFICA√á√ÉO (TOAST) --- //
function showToast(message, duration = 3000) {
    // Cria o elemento da notifica√ß√£o
    const toast = document.createElement('div');
    toast.className = 'toast-notification';
    toast.textContent = message;

    // Estilos b√°sicos para o toast
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 12px 20px;
        border-radius: 4px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        z-index: 10000;
        transform: translateX(150%);
        transition: transform 0.3s ease;
        max-width: 300px;
    `;

    // Adiciona ao corpo da p√°gina
    document.body.appendChild(toast);

    // Anima a entrada
    setTimeout(() => {
        toast.style.transform = 'translateX(0)';
    }, 100);

    // Agenda a remo√ß√£o
    setTimeout(() => {
        toast.style.transform = 'translateX(150%)';
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }, duration);
}

// Modifique a fun√ß√£o getReviewTypeLabel

function getReviewTypeLabel(type) {
    const labels = {
        all: 'Revis√£o Completa (Todas Trilhas Ativas)', // T√≠tulo mais claro
        allSelectedTracks: 'Revis√£o Completa (Trilhas Selecionadas)', // Novo t√≠tulo
        filtered: 'Revis√£o por Dificuldade (Trilhas Selecionadas)', // T√≠tulo mais claro
        single: 'Revis√£o Individual',
        // Mantenha os outros tipos se ainda os usar
    };
    return labels[type] || 'Revis√£o';
}

function updateDashboard() {
    const dashboardSection = document.getElementById('dashboard');
    if (!dashboardSection) {
        console.error(
            'ERRO: Se√ß√£o #dashboard n√£o encontrada para atualiza√ß√£o.'
        );
        return;
    }

    console.log('[Dashboard] Atualizando conte√∫do...');

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Filtra flashcards ativos (n√£o arquivados) que est√£o prontos para revis√£o
    const dueFlashcards = lexiaFlashcards.filter((card) => {
        if (card.isArchived) return false;
        const nextReviewDate = card.nextReview
            ? new Date(card.nextReview)
            : new Date(0);
        nextReviewDate.setHours(0, 0, 0, 0);
        return !card.isArchived && nextReviewDate <= today;
    });

    const todayKey = new Date().toISOString().split('T')[0];
    const todayProgress = lexiaProgress[todayKey] || {
        flashcardsReviewed: 0,
        quizzesCompleted: 0,
        timeStudied: 0,
    };

    const totalActiveFlashcards = lexiaFlashcards.filter(
        (f) => !f.isArchived
    ).length;

    // --- Gera√ß√£o do HTML ---
    dashboardSection.innerHTML = `
        <h2>Dashboard</h2>
        <div class="dashboard-stats">
            <div class="stat-card">
                <h3>‚ö° Flashcards para Hoje</h3>
                <p class="stat-number">${dueFlashcards.length}</p>
            </div>
            <div class="stat-card">
                <h3>‚úÖ Flashcards Revisados Hoje</h3>
                <p class="stat-number">${todayProgress.flashcardsReviewed}</p>
            </div>
            <div class="stat-card">
                <h3>üìö Total de Flashcards Ativos</h3>
                <p class="stat-number">${totalActiveFlashcards}</p>
            </div>
            <div class="stat-card">
                <h3>üß† Quizzes Completados Hoje</h3>
                <p class="stat-number">${todayProgress.quizzesCompleted}</p>
            </div>
        </div>
        <div class="quick-actions">
            <button id="start-review" class="btn btn-primary" ${
                dueFlashcards.length === 0 ? 'disabled' : ''
            }>
                Iniciar Revis√£o (${dueFlashcards.length} cart√µes)
            </button>
            <button id="start-quiz" class="btn btn-secondary">
                Fazer Quiz Adaptativo
            </button>
        </div>
    `;

    // --- CORRE√á√ÉO: Adicionar listeners usando o pr√≥prio dashboardSection como delegador ---
    dashboardSection.addEventListener('click', function (e) {
        const target = e.target;

        // Bot√£o "Iniciar Revis√£o"
        if (target.id === 'start-review' || target.closest('#start-review')) {
            console.log('[Dashboard] Bot√£o Iniciar Revis√£o clicado.');
            e.preventDefault();

            if (!target.disabled && dueFlashcards.length > 0) {
                document.querySelectorAll('main section').forEach((section) => {
                    section.classList.remove('active-section');
                });
                const flashcardsSection = document.getElementById('flashcards');
                if (flashcardsSection) {
                    flashcardsSection.classList.add('active-section');
                    // Atualizar navega√ß√£o ativa
                    document
                        .querySelectorAll('#sidebar nav ul li a')
                        .forEach((link) => link.classList.remove('active'));
                    const flashcardsLink = document.querySelector(
                        '#sidebar nav ul li a[href="#flashcards"]'
                    );
                    if (flashcardsLink) flashcardsLink.classList.add('active');
                    renderFlashcards();
                }
            }
            return;
        }

        // Bot√£o "Fazer Quiz Adaptativo"
        if (target.id === 'start-quiz' || target.closest('#start-quiz')) {
            console.log('[Dashboard] Bot√£o Fazer Quiz clicado.');
            e.preventDefault();

            document.querySelectorAll('main section').forEach((section) => {
                section.classList.remove('active-section');
            });
            const quizSection = document.getElementById('quiz');
            if (quizSection) {
                quizSection.classList.add('active-section');
                // Atualizar navega√ß√£o ativa
                document
                    .querySelectorAll('#sidebar nav ul li a')
                    .forEach((link) => link.classList.remove('active'));
                const quizLink = document.querySelector(
                    '#sidebar nav ul li a[href="#quiz"]'
                );
                if (quizLink) quizLink.classList.add('active');
                renderQuiz();
            }
            return;
        }
    });
}

// --- Quiz System --- //
class QuizManager {
    constructor() {
        this.currentQuiz = null;
        this.currentQuestionIndex = 0;
        this.score = 0;
        this.userAnswers = [];
        this.quizHistory =
            JSON.parse(localStorage.getItem('lexia_quiz_history')) || [];
        this.questionBank =
            JSON.parse(localStorage.getItem('lexia_question_bank')) || [];
    }

    saveQuizData() {
        localStorage.setItem(
            'lexia_quiz_history',
            JSON.stringify(this.quizHistory)
        );
        localStorage.setItem(
            'lexia_question_bank',
            JSON.stringify(this.questionBank)
        );
        console.log('Dados do quiz salvos:', {
            history: this.quizHistory.length,
            questionBank: this.questionBank.length,
        });
    }

    startQuizFromBank() {
        if (this.questionBank.length === 0) {
            alert(
                'Nenhuma quest√£o dispon√≠vel no banco. Gere quest√µes a partir de artigos de lei primeiro.'
            );
            return null;
        }

        // Shuffle questions and select up to 10
        const shuffledQuestions = [...this.questionBank].sort(
            () => Math.random() - 0.5
        );
        const selectedQuestions = shuffledQuestions.slice(
            0,
            Math.min(10, shuffledQuestions.length)
        );

        this.currentQuiz = {
            id: Date.now(),
            questions: selectedQuestions,
            config: { fromBank: true },
            startTime: new Date(),
            endTime: null,
            score: 0,
        };

        this.currentQuestionIndex = 0;
        this.userAnswers = [];
        this.questionStartTime = Date.now();

        return this.currentQuiz;
    }

    async generateQuiz(config) {
        if (lexiaChunks.length === 0) {
            alert(
                'Nenhum conte√∫do dispon√≠vel para gerar quiz. Carregue os PDFs primeiro.'
            );
            return null;
        }

        // Check if using specific articles
        if (
            config.useSpecificArticles &&
            config.selectedArticles &&
            config.selectedArticles.length > 0
        ) {
            return await this.generateQuizFromSpecificArticles(config);
        }

        // Filter chunks based on source if specified
        let availableChunks = lexiaChunks;
        if (config.sourceFilter && config.sourceFilter !== 'all') {
            availableChunks = lexiaChunks.filter(
                (chunk) => chunk.file === config.sourceFilter
            );
        }

        if (availableChunks.length === 0) {
            alert('Nenhum conte√∫do dispon√≠vel para a fonte selecionada.');
            return null;
        }

        const shuffledChunks = [...availableChunks].sort(
            () => Math.random() - 0.5
        );
        const selectedChunks = shuffledChunks.slice(0, config.numQuestions);
        const questions = [];

        for (let i = 0; i < selectedChunks.length; i++) {
            const chunk = selectedChunks[i];
            const question = await this.generateAdvancedQuestion(
                chunk,
                i,
                config
            );
            questions.push(question);
        }

        this.currentQuiz = {
            id: Date.now(),
            questions: questions,
            config: config,
            startTime: new Date(),
            endTime: null,
            score: 0,
        };

        return this.currentQuiz;
    }

    async generateQuizFromSpecificArticles(config) {
        const selectedArticles = config.selectedArticles;
        const questions = [];

        // Calculate how many questions per article
        const questionsPerArticle = Math.max(
            1,
            Math.floor(config.numQuestions / selectedArticles.length)
        );
        const remainingQuestions =
            config.numQuestions - questionsPerArticle * selectedArticles.length;

        let questionIndex = 0;

        for (let i = 0; i < selectedArticles.length; i++) {
            const article = selectedArticles[i];
            const questionsForThisArticle =
                questionsPerArticle + (i < remainingQuestions ? 1 : 0);

            for (let j = 0; j < questionsForThisArticle; j++) {
                try {
                    const question = await this.generateQuestionFromArticle(
                        article,
                        questionIndex,
                        config,
                        j + 1
                    );
                    if (question) {
                        questions.push(question);
                        questionIndex++;
                    }
                } catch (error) {
                    console.error(
                        `Erro ao gerar quest√£o para ${article.fullReference}:`,
                        error
                    );
                    // Fallback question
                    questions.push(
                        this.generateFallbackQuestionFromArticle(
                            article,
                            questionIndex,
                            config
                        )
                    );
                    questionIndex++;
                }

                // Add delay to prevent rate limiting
                if (j < questionsForThisArticle - 1) {
                    await new Promise((resolve) => setTimeout(resolve, 1000));
                }
            }

            // Add delay between articles
            if (i < selectedArticles.length - 1) {
                await new Promise((resolve) => setTimeout(resolve, 2000));
            }
        }

        // Shuffle questions to mix articles
        const shuffledQuestions = questions.sort(() => Math.random() - 0.5);

        this.currentQuiz = {
            id: Date.now(),
            questions: shuffledQuestions,
            config: config,
            startTime: new Date(),
            endTime: null,
            score: 0,
            fromSpecificArticles: true,
            selectedArticles: selectedArticles.map((a) => a.fullReference),
        };

        this.currentQuestionIndex = 0;
        this.score = 0;
        this.userAnswers = [];
        this.questionStartTime = Date.now();

        return this.currentQuiz;
    }

    // SUBSTITUA A SUA FUN√á√ÉO 'generateQuestionFromArticle' POR ESTA:
    async generateQuestionFromArticle(article, index, config, questionNumber) {
        const focusPrompts = {
            general: 'quest√µes gerais sobre o conte√∫do do artigo',
            laws: 'quest√µes espec√≠ficas sobre a aplica√ß√£o e interpreta√ß√£o do artigo',
            concepts: 'quest√µes focadas em conceitos e defini√ß√µes do artigo',
            procedures: 'quest√µes sobre procedimentos descritos no artigo',
            jurisprudence:
                'quest√µes sobre interpreta√ß√µes jurisprudenciais do artigo',
        };

        const typeInstructions = {
            'multiple-choice': `m√∫ltipla escolha com ${config.numOptions} alternativas`,
            'true-false': 'verdadeiro ou falso',
            essay: 'dissertativa (resposta em texto)',
            mixed: 'formato variado',
        };

        const prompt = `
Crie uma quest√£o de ${
            typeInstructions[config.questionType]
        } baseada no seguinte artigo de lei:

**Artigo:** ${article.fullReference}
**Lei:** ${article.law}
**Assunto:** ${article.subject}
**Texto:** ${article.fullText || 'Texto n√£o dispon√≠vel'}
**Contexto:** ${article.context || ''}

**Configura√ß√µes:**
- Dificuldade: ${config.difficulty}
- Foco: ${focusPrompts[config.contentFocus]}
- Quest√£o n√∫mero: ${questionNumber} (varie o tipo e dificuldade)
- ${config.includeTricks ? 'INCLUIR pegadinhas e armadilhas' : 'SEM pegadinhas'}
- ${
            config.contextual
                ? 'Quest√£o contextualizada com situa√ß√£o pr√°tica'
                : 'Quest√£o direta'
        }

FORMATO DE RESPOSTA:
${
    config.questionType === 'multiple-choice'
        ? `PERGUNTA: [sua pergunta]
A) [alternativa A]
B) [alternativa B]
C) [alternativa C]
${config.numOptions >= 4 ? 'D) [alternativa D]' : ''}
${config.numOptions >= 5 ? 'E) [alternativa E]' : ''}
RESPOSTA_CORRETA: [letra da alternativa correta]
EXPLICACAO: [explica√ß√£o detalhada]`
        : config.questionType === 'true-false'
        ? `PERGUNTA: [sua pergunta]
RESPOSTA_CORRETA: [VERDADEIRO ou FALSO]
EXPLICACAO: [explica√ß√£o detalhada]`
        : `PERGUNTA: [sua pergunta dissertativa]
RESPOSTA_ESPERADA: [pontos principais que devem ser abordados]
EXPLICACAO: [crit√©rios de avalia√ß√£o]`
}

Crie uma quest√£o relevante e educativa sobre este artigo espec√≠fico:`;

        const response = await callGemini(prompt);
        if (response) {
            // <-- CORRE√á√ÉO: Passamos o objeto 'article' inteiro para o parser
            return this.parseQuestionResponse(response, article, index, config);
        }

        return null;
    }

    generateFallbackQuestionFromArticle(article, index, config) {
        const options = [
            `Segundo o ${article.fullReference}`,
            'Conforme a legisla√ß√£o vigente',
            'De acordo com a jurisprud√™ncia',
            'Segundo a doutrina majorit√°ria',
        ];

        return {
            id: `fallback-q${index}`,
            type: 'multiple-choice',
            question: `Qual √© o tema principal do ${article.fullReference}?`,
            options: options,
            correctAnswer: 0,
            explanation: `O ${article.fullReference} trata de: ${article.subject}`,
            articleReference: article.fullReference,
            difficulty: config.difficulty,
        };
    }

    async generateAdvancedQuestion(chunk, index, config) {
        const prompt = this.buildQuestionPrompt(chunk, config);

        try {
            const response = await callGemini(prompt);
            if (response) {
                return this.parseQuestionResponse(
                    response,
                    chunk,
                    index,
                    config
                );
            }
        } catch (error) {
            console.error('Erro ao gerar quest√£o com IA:', error);
        }

        // Fallback to basic question generation
        return this.generateQuestionFromChunk(chunk, index, config.difficulty);
    }

    buildQuestionPrompt(chunk, config) {
        const focusInstructions = {
            general: 'quest√µes gerais sobre o conte√∫do',
            laws: 'quest√µes espec√≠ficas sobre leis, artigos e normas',
            concepts: 'quest√µes focadas em conceitos e defini√ß√µes jur√≠dicas',
            procedures: 'quest√µes sobre procedimentos e tr√¢mites',
            jurisprudence: 'quest√µes sobre jurisprud√™ncia e interpreta√ß√µes',
        };

        const typeInstructions = {
            'multiple-choice': `m√∫ltipla escolha com ${config.numOptions} alternativas`,
            'true-false': 'verdadeiro ou falso',
            essay: 'dissertativa (resposta em texto)',
            mixed: 'formato variado',
        };

        return `
Baseado no seguinte texto jur√≠dico, crie uma quest√£o de ${
            typeInstructions[config.questionType]
        } com foco em ${focusInstructions[config.contentFocus]}.

TEXTO:
${chunk.text}

CONFIGURA√á√ïES:
- Dificuldade: ${config.difficulty}
- ${config.includeTricks ? 'INCLUIR pegadinhas e armadilhas' : 'SEM pegadinhas'}
- ${
            config.contextual
                ? 'Quest√£o contextualizada com situa√ß√£o pr√°tica'
                : 'Quest√£o direta'
        }

FORMATO DE RESPOSTA:
${
    config.questionType === 'multiple-choice'
        ? `PERGUNTA: [sua pergunta]
A) [alternativa A]
B) [alternativa B]
C) [alternativa C]
${config.numOptions >= 4 ? 'D) [alternativa D]' : ''}
${config.numOptions >= 5 ? 'E) [alternativa E]' : ''}
RESPOSTA_CORRETA: [letra da alternativa correta]
EXPLICACAO: [explica√ß√£o detalhada]`
        : config.questionType === 'true-false'
        ? `PERGUNTA: [sua pergunta]
RESPOSTA_CORRETA: [VERDADEIRO ou FALSO]
EXPLICACAO: [explica√ß√£o detalhada]`
        : `PERGUNTA: [sua pergunta dissertativa]
RESPOSTA_ESPERADA: [pontos principais que devem ser abordados]
EXPLICACAO: [crit√©rios de avalia√ß√£o]`
}

Crie uma quest√£o relevante e educativa:`;
    }

    // SUBSTITUA A SUA FUN√á√ÉO 'parseQuestionResponse' POR ESTA:
    parseQuestionResponse(response, sourceObject, index, config) {
        const lines = response.split('\n').filter((line) => line.trim());

        // <-- CORRE√á√ÉO: Vari√°veis para armazenar os dados espec√≠ficos da fonte
        const isFromArticle = !!sourceObject.fullReference;
        const chunkId = isFromArticle ? sourceObject.chunkId : sourceObject.id;
        const articleId = isFromArticle ? sourceObject.id : null;
        const articleReference = isFromArticle
            ? sourceObject.fullReference
            : null;

        if (config.questionType === 'multiple-choice') {
            const questionText = lines
                .find((line) => line.startsWith('PERGUNTA:'))
                ?.replace('PERGUNTA:', '')
                .trim();
            const options = lines
                .filter((line) => /^[A-E]\)/.test(line))
                .map((line) => line.substring(3).trim());
            const correctLetter = lines
                .find((line) => line.startsWith('RESPOSTA_CORRETA:'))
                ?.replace('RESPOSTA_CORRETA:', '')
                .trim();
            const explanation = lines
                .find((line) => line.startsWith('EXPLICACAO:'))
                ?.replace('EXPLICACAO:', '')
                .trim();

            const correctIndex = correctLetter
                ? correctLetter.charCodeAt(0) - 65
                : 0;

            return {
                id: `q${index}`,
                type: 'multiple-choice',
                question:
                    questionText ||
                    `Quest√£o sobre ${sourceObject.file || sourceObject.law}`,
                options:
                    options.length >= config.numOptions
                        ? options
                        : this.generateFallbackOptions(config.numOptions),
                correctAnswer: Math.min(correctIndex, options.length - 1),
                explanation: explanation || 'Baseado no conte√∫do do material.',
                chunkId: chunkId,
                difficulty: config.difficulty,
                articleId: articleId, // <-- CORRE√á√ÉO: Adicionando o ID do artigo
                articleReference: articleReference, // <-- CORRE√á√ÉO: Adicionando a refer√™ncia
            };
        }

        // Fallback
        return this.generateQuestionFromChunk(chunk, index, config.difficulty);
    }

    generateFallbackOptions(numOptions) {
        const options = ['Op√ß√£o A', 'Op√ß√£o B', 'Op√ß√£o C'];
        if (numOptions >= 4) options.push('Op√ß√£o D');
        if (numOptions >= 5) options.push('Op√ß√£o E');
        return options;
    }

    generateQuestionFromChunk(chunk, index, difficulty) {
        const text = chunk.text;
        const sentences = text.split('.').filter((s) => s.trim().length > 20);

        if (sentences.length === 0) {
            return {
                id: `q${index}`,
                question: `Qual √© o tema principal da p√°gina ${chunk.page} do arquivo ${chunk.file}?`,
                options: [
                    'Direitos fundamentais',
                    'Procedimentos administrativos',
                    'Normas constitucionais',
                    'Legisla√ß√£o espec√≠fica',
                ],
                correctAnswer: 0,
                explanation: `Baseado no conte√∫do da p√°gina ${chunk.page} do arquivo ${chunk.file}.`,
                chunkId: chunk.id,
                difficulty: difficulty,
            };
        }

        const randomSentence =
            sentences[Math.floor(Math.random() * sentences.length)].trim();
        const words = randomSentence.split(' ').filter((w) => w.length > 3);

        if (words.length > 0) {
            const keyWord = words[Math.floor(Math.random() * words.length)];
            const question = `Complete a frase: "${randomSentence.replace(
                keyWord,
                '______'
            )}"`;

            const correctAnswer = keyWord;
            const wrongOptions = this.generateWrongOptions(
                correctAnswer,
                chunk.file
            );
            const allOptions = [correctAnswer, ...wrongOptions].sort(
                () => Math.random() - 0.5
            );
            const correctIndex = allOptions.indexOf(correctAnswer);

            return {
                id: `q${index}`,
                question: question,
                options: allOptions,
                correctAnswer: correctIndex,
                explanation: `A resposta correta √© "${correctAnswer}" conforme o conte√∫do da p√°gina ${chunk.page} do arquivo ${chunk.file}.`,
                chunkId: chunk.id,
                difficulty: difficulty,
            };
        }

        return {
            id: `q${index}`,
            question: `Qual conceito est√° relacionado ao conte√∫do da p√°gina ${chunk.page} do arquivo ${chunk.file}?`,
            options: [
                'Princ√≠pios gerais',
                'Normas espec√≠ficas',
                'Procedimentos',
                'Jurisprud√™ncia',
            ],
            correctAnswer: 0,
            explanation: `Baseado no conte√∫do da p√°gina ${chunk.page} do arquivo ${chunk.file}.`,
            chunkId: chunk.id,
            difficulty: difficulty,
        };
    }

    generateWrongOptions(correctAnswer, fileName) {
        const commonLegalTerms = [
            'constitucional',
            'administrativo',
            'penal',
            'civil',
            'processual',
            'direito',
            'lei',
            'norma',
            'artigo',
            'princ√≠pio',
            'procedimento',
            'compet√™ncia',
            'jurisdi√ß√£o',
            'recurso',
            'senten√ßa',
            'decis√£o',
            'processo',
            'a√ß√£o',
            'defesa',
            'prova',
            'julgamento',
        ];

        const wrongOptions = [];
        const usedOptions = new Set([correctAnswer.toLowerCase()]);

        while (wrongOptions.length < 3 && commonLegalTerms.length > 0) {
            const randomTerm =
                commonLegalTerms[
                    Math.floor(Math.random() * commonLegalTerms.length)
                ];
            if (!usedOptions.has(randomTerm.toLowerCase())) {
                wrongOptions.push(randomTerm);
                usedOptions.add(randomTerm.toLowerCase());
            }
        }

        while (wrongOptions.length < 3) {
            wrongOptions.push(`Op√ß√£o ${wrongOptions.length + 1}`);
        }

        return wrongOptions;
    }

    // app.js - Dentro da classe QuizManager

    submitAnswer(questionIndex, selectedOption) {
        if (
            !this.currentQuiz ||
            questionIndex >= this.currentQuiz.questions.length
        ) {
            return false;
        }

        const question = this.currentQuiz.questions[questionIndex];
        const isCorrect = selectedOption === question.correctAnswer;

        // --- IN√çCIO DA CORRE√á√ÉO CR√çTICA ---
        // Verifica se a quest√£o veio de um artigo e atualiza as estat√≠sticas
        if (question.articleId) {
            console.log(
                `[DEBUG] Atualizando estat√≠sticas para o artigo ID: ${question.articleId}, Acerto: ${isCorrect}`
            );
            updateArticleUsage(question.articleId, isCorrect);
        }
        // --- FIM DA CORRE√á√ÉO CR√çTICA ---

        this.userAnswers[questionIndex] = {
            questionId: question.id,
            selectedOption: selectedOption,
            isCorrect: isCorrect,
            timeSpent: Date.now() - (this.questionStartTime || Date.now()),
        };

        if (isCorrect) {
            this.score++;
        }

        return isCorrect;
    }

    finishQuiz() {
        if (!this.currentQuiz) return null;

        this.currentQuiz.endTime = new Date();
        this.currentQuiz.score = this.score;
        this.currentQuiz.userAnswers = this.userAnswers;
        this.currentQuiz.percentage = Math.round(
            (this.score / this.currentQuiz.questions.length) * 100
        );

        this.quizHistory.push(this.currentQuiz);
        localStorage.setItem(
            'lexia_quiz_history',
            JSON.stringify(this.quizHistory)
        );

        const today = new Date().toISOString().split('T')[0];
        if (!lexiaProgress[today]) {
            lexiaProgress[today] = {
                flashcardsReviewed: 0,
                quizzesCompleted: 0,
                timeStudied: 0,
            };
        }
        lexiaProgress[today].quizzesCompleted++;
        localStorage.setItem('lexia_progress', JSON.stringify(lexiaProgress));

        const result = { ...this.currentQuiz };
        this.resetQuiz();
        return result;
    }

    resetQuiz() {
        this.currentQuiz = null;
        this.currentQuestionIndex = 0;
        this.score = 0;
        this.userAnswers = [];
        this.questionStartTime = null;
    }

    getAverageDifficulty() {
        if (this.quizHistory.length === 0) return 'medium';

        const recentQuizzes = this.quizHistory.slice(-5);
        const averageScore =
            recentQuizzes.reduce((sum, quiz) => sum + quiz.percentage, 0) /
            recentQuizzes.length;

        if (averageScore >= 80) return 'hard';
        if (averageScore >= 60) return 'medium';
        return 'easy';
    }
}

// Adicione esta fun√ß√£o antes da fun√ß√£o renderQuiz()

function renderAvailableArticles() {
    const allArticles = [];

    // Coletar todos os artigos de todas as trilhas
    lexiaChunks.forEach((chunk) => {
        if (chunk.legalArticles && chunk.legalArticles.length > 0) {
            chunk.legalArticles.forEach((article) => {
                allArticles.push({
                    ...article,
                    chunkId: chunk.id,
                    fileName: chunk.file,
                });
            });
        }
    });

    if (allArticles.length === 0) {
        return '<p class="no-articles">Nenhum artigo de lei dispon√≠vel. Processe PDFs primeiro.</p>';
    }

    // Agrupar por lei/arquivo
    const articlesByLaw = {};
    allArticles.forEach((article) => {
        const lawName = article.law || article.fileName;
        if (!articlesByLaw[lawName]) {
            articlesByLaw[lawName] = [];
        }
        articlesByLaw[lawName].push(article);
    });

    return Object.entries(articlesByLaw)
        .map(
            ([lawName, articles]) => `
            <div class="law-articles-group">
                <div class="law-header">
                    <h5>${lawName}</h5>
                    <span class="article-count">${
                        articles.length
                    } artigos</span>
                </div>
                <div class="articles-checkbox-list">
                    ${articles
                        .map(
                            (article) => `
                        <div class="article-checkbox-item">
                            <label>
                                <input type="checkbox" 
                                       class="article-selection-checkbox" 
                                       value="${article.id}"
                                       data-article-id="${article.id}">
                                <span class="checkmark"></span>
                                <div class="article-info">
                                    <strong class="article-reference">${
                                        article.fullReference
                                    }</strong>
                                    <p class="article-subject">${
                                        article.subject
                                    }</p>
                                    <span class="article-stats">
                                        ${
                                            getArticleStats(article.id)
                                                .usedInQuestions > 0
                                                ? `üéØ ${
                                                      getArticleStats(
                                                          article.id
                                                      ).usedInQuestions
                                                  } uso(s)`
                                                : 'üìù Nunca utilizado'
                                        }
                                    </span>
                                </div>
                            </label>
                        </div>
                    `
                        )
                        .join('')}
                </div>
            </div>
        `
        )
        .join('');
}

// Tamb√©m adicione esta fun√ß√£o auxiliar para configurar os event listeners
function setupArticleSelectionListeners() {
    const useSpecificArticles = document.getElementById(
        'use-specific-articles'
    );
    const articlesSelection = document.getElementById('articles-selection');
    const articlesSearch = document.getElementById('articles-search');
    const selectAllBtn = document.getElementById('select-all-articles');
    const clearBtn = document.getElementById('clear-articles');
    const selectedCount = document.getElementById('selected-articles-count');

    if (useSpecificArticles && articlesSelection) {
        useSpecificArticles.addEventListener('change', function () {
            articlesSelection.style.display = this.checked ? 'block' : 'none';
            updateSelectedArticlesCount();
        });
    }

    if (articlesSearch) {
        articlesSearch.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            const articles = document.querySelectorAll(
                '.article-checkbox-item'
            );

            articles.forEach((article) => {
                const articleText = article.textContent.toLowerCase();
                article.style.display = articleText.includes(searchTerm)
                    ? 'block'
                    : 'none';
            });
        });
    }

    if (selectAllBtn) {
        selectAllBtn.addEventListener('click', function () {
            document
                .querySelectorAll('.article-selection-checkbox')
                .forEach((checkbox) => {
                    checkbox.checked = true;
                });
            updateSelectedArticlesCount();
        });
    }

    if (clearBtn) {
        clearBtn.addEventListener('click', function () {
            document
                .querySelectorAll('.article-selection-checkbox')
                .forEach((checkbox) => {
                    checkbox.checked = false;
                });
            updateSelectedArticlesCount();
        });
    }

    // Atualizar contagem quando checkboxes s√£o alterados
    document.addEventListener('change', function (e) {
        if (e.target.classList.contains('article-selection-checkbox')) {
            updateSelectedArticlesCount();
        }
    });
}

function updateSelectedArticlesCount() {
    const selectedCount = document.getElementById('selected-articles-count');
    if (selectedCount) {
        const selected = document.querySelectorAll(
            '.article-selection-checkbox:checked'
        ).length;
        selectedCount.textContent = `${selected} artigos selecionados`;
    }
}

function getSelectedArticles() {
    const selectedCheckboxes = document.querySelectorAll(
        '.article-selection-checkbox:checked'
    );
    const allArticles = [];

    // Coletar todos os artigos
    lexiaChunks.forEach((chunk) => {
        if (chunk.legalArticles && chunk.legalArticles.length > 0) {
            chunk.legalArticles.forEach((article) => {
                allArticles.push({
                    ...article,
                    chunkId: chunk.id,
                    fileName: chunk.file,
                });
            });
        }
    });

    return Array.from(selectedCheckboxes)
        .map((checkbox) => {
            return allArticles.find((article) => article.id === checkbox.value);
        })
        .filter(Boolean);
}

const quizManager = new QuizManager();

function renderQuiz() {
    const quizArea = document.getElementById('quiz-area');

    if (!quizManager.currentQuiz) {
        const suggestedDifficulty = quizManager.getAverageDifficulty();
        quizArea.innerHTML = `
            <div class="quiz-start">
                <h3>Configurar Novo Quiz</h3>
                <p>Personalize seu quiz com op√ß√µes avan√ßadas para um estudo mais eficaz.</p>
                
                <div class="quiz-config">
                    <div class="config-section">
                        <h4>Configura√ß√µes B√°sicas</h4>
                        <div class="config-row">
                            <label for="quiz-difficulty">Dificuldade:</label>
                            <select id="quiz-difficulty">
                                <option value="easy" ${
                                    suggestedDifficulty === 'easy'
                                        ? 'selected'
                                        : ''
                                }>F√°cil</option>
                                <option value="medium" ${
                                    suggestedDifficulty === 'medium'
                                        ? 'selected'
                                        : ''
                                }>M√©dio</option>
                                <option value="hard" ${
                                    suggestedDifficulty === 'hard'
                                        ? 'selected'
                                        : ''
                                }>Dif√≠cil</option>
                                <option value="adaptive">Adaptativo</option>
                            </select>
                        </div>
                        <div class="config-row">
                            <label for="quiz-questions">N√∫mero de perguntas:</label>
                            <select id="quiz-questions">
                                <option value="5">5 perguntas</option>
                                <option value="10" selected>10 perguntas</option>
                                <option value="15">15 perguntas</option>
                                <option value="20">20 perguntas</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="config-section">
                        <h4>Tipo de Quest√µes</h4>
                        <div class="config-row">
                            <label for="question-type">Formato:</label>
                            <select id="question-type">
                                <option value="multiple-choice">M√∫ltipla Escolha</option>
                                <option value="true-false">Verdadeiro ou Falso</option>
                                <option value="essay">Dissertativa</option>
                                <option value="mixed">Misto</option>
                            </select>
                        </div>
                        <div class="config-row">
                            <label for="num-options">Alternativas (m√∫ltipla escolha):</label>
                            <select id="num-options">
                                <option value="3">3 alternativas</option>
                                <option value="4" selected>4 alternativas</option>
                                <option value="5">5 alternativas</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="config-section">
                        <h4>Abordagem do Conte√∫do</h4>
                        <div class="config-row">
                            <label for="content-focus">Foco:</label>
                            <select id="content-focus">
                                <option value="general">Geral</option>
                                <option value="laws">Espec√≠fico - Leis</option>
                                <option value="concepts">Espec√≠fico - Conceitos</option>
                                <option value="procedures">Espec√≠fico - Procedimentos</option>
                                <option value="jurisprudence">Espec√≠fico - Jurisprud√™ncia</option>
                            </select>
                        </div>
                        <div class="config-row">
                            <label for="source-filter">Filtrar por fonte:</label>
                            <select id="source-filter">
                                <option value="all">Todas as fontes</option>
                                ${getUniqueChunkSources()
                                    .map(
                                        (source) =>
                                            `<option value="${source}">${source}</option>`
                                    )
                                    .join('')}
                            </select>
                        </div>
                    </div>
                    
                    <div class="config-section">
                        <h4>‚öñÔ∏è Sele√ß√£o de Artigos de Lei</h4>
                        <div class="config-row">
                            <label>
                                <input type="checkbox" id="use-specific-articles">
                                Gerar quest√µes baseadas em artigos espec√≠ficos
                            </label>
                        </div>
                        <div id="articles-selection" class="articles-selection" style="display: none;">
                            <div class="articles-filter">
                                <input type="text" id="articles-search" placeholder="Buscar artigos (ex: Art. 312, CP, etc.)">
                                <div class="articles-actions">
                                    <button type="button" id="select-all-articles" class="btn-small">Selecionar Todos</button>
                                    <button type="button" id="clear-articles" class="btn-small">Limpar Sele√ß√£o</button>
                                </div>
                            </div>
                            <div id="articles-list" class="articles-list">
                                ${renderAvailableArticles()}
                            </div>
                            <div class="selected-articles-summary">
                                <span id="selected-articles-count">0 artigos selecionados</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="config-section">
                        <h4>Op√ß√µes Avan√ßadas</h4>
                        <div class="config-checkbox">
                            <input type="checkbox" id="include-tricks" checked>
                            <label for="include-tricks">Incluir pegadinhas</label>
                        </div>
                        <div class="config-checkbox">
                            <input type="checkbox" id="contextual-questions" checked>
                            <label for="contextual-questions">Quest√µes contextualizadas</label>
                        </div>
                        <div class="config-checkbox">
                            <input type="checkbox" id="time-limit">
                            <label for="time-limit">Limite de tempo (30 seg/quest√£o)</label>
                        </div>
                        <div class="config-checkbox">
                            <input type="checkbox" id="review-wrong" checked>
                            <label for="review-wrong">Revisar quest√µes erradas ao final</label>
                        </div>
                    </div>
                </div>
                
                <div class="quiz-actions">
                    <button id="start-quiz-btn" class="btn-primary">Iniciar Quiz</button>
                    <button id="quick-quiz-btn" class="btn-secondary">Quiz R√°pido (5 quest√µes)</button>
                </div>
                
                <div class="quiz-history">
                    <h4>Hist√≥rico Recente</h4>
                    ${renderQuizHistory()}
                </div>
                
                <div class="quiz-stats">
                    <h4>Estat√≠sticas</h4>
                    ${renderQuizStats()}
                </div>
                
                ${
                    quizManager.questionBank.length > 0
                        ? `
                <div class="question-bank">
                    <h4>Banco de Quest√µes (${quizManager.questionBank.length})</h4>
                    <p>Quest√µes geradas a partir de artigos de lei espec√≠ficos.</p>
                    <button id="use-question-bank" class="btn-secondary">Usar Quest√µes do Banco</button>
                </div>
                `
                        : ''
                }
            </div>
        `;

        document
            .getElementById('start-quiz-btn')
            .addEventListener('click', async () => {
                const config = getQuizConfig();
                const quiz = await quizManager.generateQuiz(config);
                if (quiz) {
                    quizManager.questionStartTime = Date.now();
                    renderCurrentQuestion();
                }
            });

        document
            .getElementById('quick-quiz-btn')
            .addEventListener('click', async () => {
                const quickConfig = {
                    difficulty: 'medium',
                    numQuestions: 5,
                    questionType: 'multiple-choice',
                    numOptions: 4,
                    contentFocus: 'general',
                    sourceFilter: 'all',
                    includeTricks: false,
                    contextual: true,
                    timeLimit: false,
                    reviewWrong: true,
                };
                const quiz = await quizManager.generateQuiz(quickConfig);
                if (quiz) {
                    quizManager.questionStartTime = Date.now();
                    renderCurrentQuestion();
                }
            });

        // Add event listener for question bank button if it exists
        const questionBankBtn = document.getElementById('use-question-bank');
        if (questionBankBtn) {
            questionBankBtn.addEventListener('click', () => {
                quizManager.startQuizFromBank();
                renderCurrentQuestion();
            });
        }

        // Add event listeners for article selection functionality
        setupArticleSelectionListeners();
    } else {
        renderCurrentQuestion();
    }
}

function getQuizConfig() {
    const useSpecificArticles = document.getElementById(
        'use-specific-articles'
    ).checked;
    const selectedArticles = useSpecificArticles ? getSelectedArticles() : [];

    return {
        difficulty: document.getElementById('quiz-difficulty').value,
        numQuestions: parseInt(document.getElementById('quiz-questions').value),
        questionType: document.getElementById('question-type').value,
        numOptions: parseInt(document.getElementById('num-options').value),
        contentFocus: document.getElementById('content-focus').value,
        sourceFilter: document.getElementById('source-filter').value,
        includeTricks: document.getElementById('include-tricks').checked,
        contextual: document.getElementById('contextual-questions').checked,
        timeLimit: document.getElementById('time-limit').checked,
        reviewWrong: document.getElementById('review-wrong').checked,
        useSpecificArticles: useSpecificArticles,
        selectedArticles: selectedArticles,
    };
}

function getUniqueChunkSources() {
    const sources = new Set();
    lexiaChunks.forEach((chunk) => {
        sources.add(chunk.file);
    });
    return Array.from(sources);
}

function renderQuizStats() {
    const totalQuizzes = quizManager.quizHistory.length;
    if (totalQuizzes === 0) {
        return '<p>Nenhum quiz realizado ainda.</p>';
    }

    const averageScore =
        quizManager.quizHistory.reduce(
            (sum, quiz) => sum + quiz.percentage,
            0
        ) / totalQuizzes;
    const bestScore = Math.max(
        ...quizManager.quizHistory.map((quiz) => quiz.percentage)
    );
    const totalQuestions = quizManager.quizHistory.reduce(
        (sum, quiz) => sum + quiz.questions.length,
        0
    );

    return `
        <div class="stats-grid">
            <div class="stat-item">
                <span class="stat-label">Quizzes Realizados:</span>
                <span class="stat-value">${totalQuizzes}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">M√©dia Geral:</span>
                <span class="stat-value">${averageScore.toFixed(1)}%</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Melhor Score:</span>
                <span class="stat-value">${bestScore}%</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Total de Quest√µes:</span>
                <span class="stat-value">${totalQuestions}</span>
            </div>
        </div>
    `;
}

function renderCurrentQuestion() {
    const quizArea = document.getElementById('quiz-area');
    const quiz = quizManager.currentQuiz;
    const questionIndex = quizManager.currentQuestionIndex;
    const question = quiz.questions[questionIndex];

    if (questionIndex >= quiz.questions.length) {
        const result = quizManager.finishQuiz();
        renderQuizResults(result);
        return;
    }

    quizArea.innerHTML = `
        <div class="quiz-question">
            <div class="quiz-progress">
                <p>Pergunta ${questionIndex + 1} de ${quiz.questions.length}</p>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${
                        (questionIndex / quiz.questions.length) * 100
                    }%"></div>
                </div>
            </div>
            <h3>${question.question}</h3>
            <ul class="quiz-options">
                ${question.options
                    .map(
                        (option, index) =>
                            `<li data-option="${index}">${option}</li>`
                    )
                    .join('')}
            </ul>
            <div class="quiz-controls">
                <button id="submit-answer" disabled>Responder</button>
                <button id="skip-question">Pular</button>
            </div>
        </div>
    `;

    let selectedOption = null;

    document.querySelectorAll('.quiz-options li').forEach((option) => {
        option.addEventListener('click', () => {
            document
                .querySelectorAll('.quiz-options li')
                .forEach((opt) => opt.classList.remove('selected'));
            option.classList.add('selected');
            selectedOption = parseInt(option.dataset.option);
            document.getElementById('submit-answer').disabled = false;
        });
    });

    document.getElementById('submit-answer').addEventListener('click', () => {
        if (selectedOption !== null) {
            const isCorrect = quizManager.submitAnswer(
                questionIndex,
                selectedOption
            );
            showAnswerFeedback(question, selectedOption, isCorrect);
        }
    });

    document.getElementById('skip-question').addEventListener('click', () => {
        quizManager.submitAnswer(questionIndex, -1);
        quizManager.currentQuestionIndex++;
        quizManager.questionStartTime = Date.now();
        renderCurrentQuestion();
    });
}

function showAnswerFeedback(question, selectedOption, isCorrect) {
    const quizArea = document.getElementById('quiz-area');

    document.querySelectorAll('.quiz-options li').forEach((option, index) => {
        if (index === question.correctAnswer) {
            option.classList.add('correct');
        } else if (index === selectedOption && !isCorrect) {
            option.classList.add('incorrect');
        }
    });

    const feedbackDiv = document.createElement('div');
    feedbackDiv.className = 'answer-feedback';
    feedbackDiv.innerHTML = `
        <p class="${isCorrect ? 'correct-feedback' : 'incorrect-feedback'}">
            ${isCorrect ? '‚úÖ Correto!' : '‚ùå Incorreto!'}
        </p>
        <p>${question.explanation}</p>
        <button id="next-question">Pr√≥xima Pergunta</button>
    `;

    quizArea.appendChild(feedbackDiv);

    document.getElementById('next-question').addEventListener('click', () => {
        quizManager.currentQuestionIndex++;
        quizManager.questionStartTime = Date.now();
        renderCurrentQuestion();
    });
}

function renderQuizResults(result) {
    const quizArea = document.getElementById('quiz-area');
    const percentage = result.percentage;
    const duration = Math.round((result.endTime - result.startTime) / 1000);

    let performanceMessage = '';
    if (percentage >= 90) performanceMessage = 'Excelente! üèÜ';
    else if (percentage >= 70) performanceMessage = 'Muito bom! üëè';
    else if (percentage >= 50) performanceMessage = 'Bom trabalho! üëç';
    else performanceMessage = 'Continue estudando! üìö';

    quizArea.innerHTML = `
        <div class="quiz-results">
            <h3>Quiz Conclu√≠do!</h3>
            <div class="result-stats">
                <div class="result-score">
                    <h4>${result.score}/${result.questions.length}</h4>
                    <p>${percentage}%</p>
                </div>
                <div class="result-details">
                    <p><strong>Tempo:</strong> ${Math.floor(duration / 60)}:${(
        duration % 60
    )
        .toString()
        .padStart(2, '0')}</p>
                    <p><strong>Dificuldade:</strong> ${result.difficulty}</p>
                    <p><strong>Performance:</strong> ${performanceMessage}</p>
                </div>
            </div>
            <div class="quiz-actions">
                <button id="new-quiz">Novo Quiz</button>
                <button id="back-to-dashboard">Voltar ao Dashboard</button>
            </div>
        </div>
    `;

    document.getElementById('new-quiz').addEventListener('click', () => {
        renderQuiz();
    });

    document
        .getElementById('back-to-dashboard')
        .addEventListener('click', () => {
            document.querySelectorAll('section').forEach((section) => {
                section.classList.remove('active-section');
            });
            document
                .getElementById('dashboard')
                .classList.add('active-section');
            updateDashboard();
        });
}

function renderQuizHistory() {
    const recentQuizzes = quizManager.quizHistory.slice(-5).reverse();

    if (recentQuizzes.length === 0) {
        return '<p>Nenhum quiz realizado ainda.</p>';
    }

    return recentQuizzes
        .map((quiz) => {
            const date = new Date(quiz.startTime).toLocaleDateString('pt-BR');
            return `
            <div class="quiz-history-item">
                <span>${date}</span>
                <span>${quiz.score}/${quiz.questions.length} (${quiz.percentage}%)</span>
                <span>${quiz.difficulty}</span>
            </div>
        `;
        })
        .join('');
}

// --- Legal Articles Extraction --- //
async function extractLegalArticles(text, fileName) {
    const prompt = `
    Voc√™ √© um assistente jur√≠dico especializado em legisla√ß√£o brasileira.
    Sua tarefa √© identificar e extrair TODOS os artigos de lei do texto fornecido, incluindo artigos com letras (ex: Art. 311-A) e n√∫meros com s√≠mbolos (ex: Art. 1¬∫).
    O texto √© um fluxo cont√≠nuo de um documento PDF, podendo conter cabe√ßalhos, rodap√©s e n√∫meros de p√°gina que devem ser ignorados.

    REGRAS CR√çTICAS DE EXTRA√á√ÉO:
    1. Identifique cada artigo pelo padr√£o "Art. [n√∫mero]", onde o n√∫mero pode ser seguido por letras (ex: "Art. 311-A") ou s√≠mbolos (ex: "Art. 1¬∫").
    2. CADA ARTIGO DEVE INCLUIR TODOS OS SEUS COMPONENTES:
       - Caput (texto principal do artigo)
       - Todos os par√°grafos (¬ß 1¬∫, ¬ß 2¬∫, etc.)
       - Todos os incisos (I, II, III, etc.)
       - Todas as al√≠neas (a, b, c, etc.)
    3. NUNCA separe o caput dos seus par√°grafos. Eles pertencem ao mesmo artigo.
    4. O conte√∫do do artigo come√ßa no "Art." e termina apenas quando encontrar o PR√ìXIMO "Art." ou no final do texto.
    5. Para o campo "subject", forne√ßa um resumo muito curto do que o artigo trata (ex: "Peculato", "Falsidade Ideol√≥gica").
    6. O campo "law" deve ser preenchido com o nome do arquivo, sem a extens√£o .pdf.

    Texto para an√°lise:
    """
    ${text}
    """

    RESPONDA APENAS EM FORMATO JSON V√ÅLIDO, seguindo a estrutura abaixo. Se nenhum artigo for encontrado, retorne um array vazio [].

    {
      "articles": [
        {
          "number": "<n√∫mero do artigo, ex: 299, 312-A, 1¬∫>",
          "fullReference": "<refer√™ncia completa, ex: Art. 299 do C√≥digo Penal>",
          "law": "<nome do arquivo sem .pdf>",
          "subject": "<resumo curto do artigo>",
          "fullText": "<texto COMPLETO do artigo incluindo CAPUT, PAR√ÅGRAFOS, INCISOS e AL√çNEAS>",
          "paragraphs": [
            "<texto do par√°grafo 1>",
            "<texto do par√°grafo 2>"
          ],
          "context": "<contexto ou t√≠tulo do cap√≠tulo, se dispon√≠vel>"
        }
      ]
    }
    `;

    try {
        let response = await callGemini(prompt);
        // Adicione esta linha para limpar a resposta da IA antes de analisar o JSON
        response = response.replace(/^```json\s*|\s*```$/g, '');
        const parsedResponse = JSON.parse(response);
        let articles = parsedResponse.articles || [];

        // Fallback mechanism: if AI returns too few articles, try manual extraction
        if (articles.length < 10) {
            // Threshold can be adjusted
            console.log(
                'IA retornou poucos artigos, tentando extra√ß√£o manual como fallback...'
            );
            const manualArticles = extractArticlesManually(text, fileName);
            if (manualArticles.length > articles.length) {
                console.log(
                    `Extra√ß√£o manual encontrou ${manualArticles.length} artigos.`
                );
                articles = manualArticles;
            }
        }

        return articles.map((article) => ({
            ...article,
            // **CORRE√á√ÉO CR√çTICA**: Gerar ID consistente
            id: `article-${fileName.replace(/[^a-zA-Z0-9]/g, '_')}-${
                article.number
            }`,
            fileName: fileName,
            selected: false,
        }));
    } catch (error) {
        console.error(
            'Erro ao chamar a IA ou processar a resposta. Usando extra√ß√£o manual.',
            error
        );
        // If AI fails completely, use the robust manual method
        const manualArticles = extractArticlesManually(text, fileName);
        console.log(
            `Extra√ß√£o manual de fallback encontrou ${manualArticles.length} artigos.`
        );

        // Verificar se a extra√ß√£o manual encontrou artigos
        if (manualArticles.length === 0) {
            console.log('Tentando m√©todo alternativo de extra√ß√£o...');
            // M√©todo alternativo como √∫ltimo recurso
            const alternativeArticles = alternativeExtraction(text, fileName);
            return alternativeArticles.map((article) => ({
                ...article,
                id: `article-${fileName}-${article.number}`,
                fileName: fileName,
                selected: false,
            }));
        }

        return manualArticles.map((article) => ({
            ...article,
            id: `article-${fileName}-${article.number}`,
            fileName: fileName,
            selected: false,
        }));
    }
}

// ============================================
// CACHE DE TIPOS DE LEI (OTIMIZA√á√ÉO)
// ============================================
const lawTypeCache = new Map();

function getLawType(fileName, text) {
    const cacheKey = fileName;
    if (!lawTypeCache.has(cacheKey)) {
        const lawType = detectLawType(fileName, text);
        lawTypeCache.set(cacheKey, lawType);
    }
    return lawTypeCache.get(cacheKey);
}

// ============================================
// FUN√á√ÉO AUXILIAR: DETECTAR O TIPO DE LEI (EXPANDIDA)
// ============================================
function detectLawType(fileName, text) {
    const fileNameLower = fileName.toLowerCase();
    const textLower = text.toLowerCase();
    const combined = (fileName + ' ' + text).toLowerCase();

    // PRIORIDADE M√ÅXIMA: Nome do arquivo
    if (
        fileNameLower.includes('constitucional') ||
        fileNameLower.includes('constitui√ß√£o')
    ) {
        return 'Direito Constitucional';
    }
    if (
        fileNameLower.includes('processo penal') ||
        fileNameLower.includes('processual penal')
    ) {
        return 'Direito Processual Penal';
    }
    if (
        fileNameLower.includes('processo civil') ||
        fileNameLower.includes('processual civil')
    ) {
        return 'Direito Processual Civil';
    }
    if (
        fileNameLower.includes('penal') &&
        !fileNameLower.includes('processo')
    ) {
        return 'Direito Penal';
    }
    if (fileNameLower.includes('administrativo')) {
        return 'Direito Administrativo';
    }
    if (fileNameLower.includes('juizados')) {
        if (fileNameLower.includes('fazenda')) {
            return 'Juizados Especiais da Fazenda P√∫blica';
        }
        return 'Juizados Especiais';
    }
    if (
        fileNameLower.includes('defici√™ncia') ||
        fileNameLower.includes('inclus√£o') ||
        fileNameLower.includes('pcd')
    ) {
        return 'Estatuto da Pessoa com Defici√™ncia';
    }
    if (
        fileNameLower.includes('plano de cargos') ||
        fileNameLower.includes('carreiras') ||
        fileNameLower.includes('1.111')
    ) {
        return 'Plano de Cargos e Carreiras TJSP';
    }
    if (
        fileNameLower.includes('teletrabalho') ||
        fileNameLower.includes('850')
    ) {
        return 'Teletrabalho TJSP';
    }
    if (
        fileNameLower.includes('eproc') ||
        fileNameLower.includes('governan√ßa') ||
        fileNameLower.includes('963')
    ) {
        return 'Governan√ßa eProc TJSP';
    }
    if (fileNameLower.includes('regimento') && fileNameLower.includes('tjsp')) {
        return 'Regimento Interno TJSP';
    }
    if (
        fileNameLower.includes('corregedoria') ||
        fileNameLower.includes('nscgj')
    ) {
        return 'Normas da Corregedoria TJSP';
    }

    const lawIdentifiers = [
        // Constitui√ß√£o Federal (prioridade m√°xima)
        {
            identifiers: [
                'constitui√ß√£o da rep√∫blica federativa',
                't√≠tulo ii - dos direitos e garantias fundamentais',
                'cap√≠tulo i - dos direitos e deveres individuais',
                'cap√≠tulo ii - dos direitos sociais',
                'cap√≠tulo iii - da nacionalidade',
                'cap√≠tulo vii - da administra√ß√£o p√∫blica',
                'pre√¢mbulo',
                'n√≥s, representantes do povo brasileiro',
            ],
            type: 'Direito Constitucional',
            weight: 5,
        },

        // C√≥digos Processuais
        {
            identifiers: [
                'decreto-lei n¬∫ 3.689',
                'c√≥digo de processo penal',
                'cpp',
            ],
            type: 'Direito Processual Penal',
            weight: 3,
        },
        {
            identifiers: [
                'lei n¬∫ 13.105',
                'c√≥digo de processo civil',
                'cpc',
                'novo cpc',
            ],
            type: 'Direito Processual Civil',
            weight: 3,
        },

        // C√≥digo Penal
        {
            identifiers: ['decreto-lei n¬∫ 2.848', 'c√≥digo penal', 'cp'],
            type: 'Direito Penal',
            weight: 3,
        },

        // Legisla√ß√£o Administrativa
        {
            identifiers: [
                'lei n¬∫ 10.261',
                'estatuto dos funcion√°rios p√∫blicos civis do estado',
                'funcion√°rio p√∫blico civil',
            ],
            type: 'Direito Administrativo',
            weight: 3,
        },
        {
            identifiers: [
                'lei n¬∫ 8.429',
                'atos de improbidade administrativa',
                'improbidade',
            ],
            type: 'Direito Administrativo',
            weight: 3,
        },

        // Juizados Especiais
        {
            identifiers: [
                'lei n¬∫ 9.099',
                'juizados especiais c√≠veis e criminais',
                'menor complexidade',
            ],
            type: 'Juizados Especiais',
            weight: 3,
        },
        {
            identifiers: [
                'lei n¬∫ 12.153',
                'juizados especiais da fazenda p√∫blica',
                'jefap',
            ],
            type: 'Juizados Especiais da Fazenda P√∫blica',
            weight: 3,
        },

        // Estatuto da Pessoa com Defici√™ncia
        {
            identifiers: [
                'lei brasileira de inclus√£o',
                'estatuto da pessoa com defici√™ncia',
                'lei n¬∫ 13.146',
                'lbi',
            ],
            type: 'Estatuto da Pessoa com Defici√™ncia',
            weight: 3,
        },

        // Legisla√ß√£o Interna TJSP
        {
            identifiers: [
                'lei complementar n¬∫ 1.111',
                'plano de cargos, carreiras e vencimentos',
                'servidores do poder judici√°rio',
            ],
            type: 'Plano de Cargos e Carreiras TJSP',
            weight: 3,
        },
        {
            identifiers: [
                'resolu√ß√£o n¬∫ 850/2021',
                'teletrabalho no √¢mbito',
                'trabalho remoto',
            ],
            type: 'Teletrabalho TJSP',
            weight: 3,
        },
        {
            identifiers: [
                'resolu√ß√£o n¬∫ 963/2025',
                'eproc',
                'processo judicial eletr√¥nico',
            ],
            type: 'Governan√ßa eProc TJSP',
            weight: 3,
        },
        {
            identifiers: ['regimento interno do tribunal de justi√ßa', 'ritjsp'],
            type: 'Regimento Interno TJSP',
            weight: 3,
        },
        {
            identifiers: ['normas da corregedoria geral da justi√ßa', 'nscgj'],
            type: 'Normas da Corregedoria TJSP',
            weight: 3,
        },

        // Fallbacks contextuais
        {
            identifiers: [
                'inqu√©rito policial',
                'fase investigat√≥ria',
                'den√∫ncia',
            ],
            type: 'Direito Processual Penal',
            weight: 1,
        },
        {
            identifiers: [
                'peti√ß√£o inicial',
                'contesta√ß√£o',
                'audi√™ncia de concilia√ß√£o',
            ],
            type: 'Direito Processual Civil',
            weight: 1,
        },
        {
            identifiers: ['crime', 'pena de reclus√£o', 'deten√ß√£o'],
            type: 'Direito Penal',
            weight: 1,
        },
        {
            identifiers: ['servidor p√∫blico', 'cargo p√∫blico', 'vac√¢ncia'],
            type: 'Direito Administrativo',
            weight: 1,
        },
        {
            identifiers: ['direitos fundamentais', 'garantias constitucionais'],
            type: 'Direito Constitucional',
            weight: 1,
        },
        {
            identifiers: ['tribunal de justi√ßa do estado de s√£o paulo', 'tjsp'],
            type: 'Legisla√ß√£o Interna TJSP',
            weight: 1,
        },
    ];

    let bestMatch = null;
    let bestScore = 0;

    for (const entry of lawIdentifiers) {
        let score = 0;
        for (const id of entry.identifiers) {
            if (combined.includes(id)) {
                score += entry.weight;
            }
        }
        if (score > bestScore) {
            bestScore = score;
            bestMatch = entry.type;
        }
    }

    return bestMatch || 'Legisla√ß√£o Geral';
}

// ============================================
// FUN√á√ÉO UNIVERSAL PARA GERAR ASSUNTO DO ARTIGO
// ============================================
function generateArticleSubject(articleText, fileName = '') {
    const text = articleText.toLowerCase();
    const lawType = getLawType(fileName, articleText);

    switch (lawType) {
        case 'Direito Penal':
            return detectPenalSubject(text);
        case 'Direito Processual Penal':
            return detectProcessualPenalSubject(text);
        case 'Direito Processual Civil':
            return detectProcessualCivilSubject(text);
        case 'Direito Administrativo':
            return detectAdministrativoSubject(text);
        case 'Juizados Especiais':
            return detectJuizadosEspeciaisSubject(text);
        case 'Juizados Especiais da Fazenda P√∫blica':
            return detectJuizadosFazendaSubject(text);
        case 'Direito Constitucional':
            return detectConstitucionalSubject(text);
        case 'Estatuto da Pessoa com Defici√™ncia':
            return detectDeficienciaSubject(text);
        case 'Plano de Cargos e Carreiras TJSP':
            return detectPlanoCargosCargasSubject(text);
        case 'Teletrabalho TJSP':
            return detectTeletrabalhoSubject(text);
        case 'Governan√ßa eProc TJSP':
            return detectEProcSubject(text);
        case 'Regimento Interno TJSP':
            return detectRegimentoTJSPSubject(text);
        case 'Normas da Corregedoria TJSP':
            return detectCorregedoriaSubject(text);
        default:
            return 'Artigo de Lei';
    }
}

// ============================================
// DETECTORES ESPECIALIZADOS POR RAMO
// ============================================

function detectPenalSubject(text) {
    const patterns = [
        {
            keywords: ['homic√≠dio', 'matar algu√©m', 'tirar a vida'],
            subject: 'Homic√≠dio',
        },
        {
            keywords: ['les√£o corporal', 'ofender a integridade', 'agredir'],
            subject: 'Les√£o Corporal',
        },
        {
            keywords: ['estupro', 'viol√™ncia sexual', 'conjun√ß√£o carnal'],
            subject: 'Estupro',
        },
        {
            keywords: ['roubo', 'subtrair', 'grave amea√ßa', 'viol√™ncia'],
            subject: 'Roubo',
        },
        {
            keywords: ['furto', 'coisa alheia m√≥vel', 'subtrair'],
            subject: 'Furto',
        },
        {
            keywords: ['peculato', 'apropriar-se', 'funcion√°rio p√∫blico'],
            subject: 'Peculato',
        },
        {
            keywords: [
                'corrup√ß√£o passiva',
                'solicitar',
                'receber',
                'vantagem indevida',
            ],
            subject: 'Corrup√ß√£o Passiva',
        },
        {
            keywords: [
                'corrup√ß√£o ativa',
                'oferecer',
                'prometer',
                'vantagem indevida',
            ],
            subject: 'Corrup√ß√£o Ativa',
        },
        {
            keywords: ['concuss√£o', 'exigir vantagem indevida'],
            subject: 'Concuss√£o',
        },
        {
            keywords: ['prevarica√ß√£o', 'retardar', 'deixar de praticar'],
            subject: 'Prevarica√ß√£o',
        },
        {
            keywords: ['falso testemunho', 'fazer afirma√ß√£o falsa'],
            subject: 'Falso Testemunho',
        },
        {
            keywords: ['denuncia√ß√£o caluniosa', 'dar causa', 'investiga√ß√£o'],
            subject: 'Denuncia√ß√£o Caluniosa',
        },
        {
            keywords: ['fraude processual', 'inovar artificiosamente'],
            subject: 'Fraude Processual',
        },
        {
            keywords: ['falsidade ideol√≥gica', 'omitir', 'documento p√∫blico'],
            subject: 'Falsidade Ideol√≥gica',
        },
        {
            keywords: ['falsifica√ß√£o de documento', 'falsificar'],
            subject: 'Falsifica√ß√£o de Documento',
        },
        {
            keywords: ['uso de documento falso'],
            subject: 'Uso de Documento Falso',
        },
        {
            keywords: ['usurpa√ß√£o', 'fun√ß√£o p√∫blica'],
            subject: 'Usurpa√ß√£o de Fun√ß√£o P√∫blica',
        },
        {
            keywords: ['resist√™ncia', 'opor-se √† execu√ß√£o'],
            subject: 'Resist√™ncia',
        },
        {
            keywords: ['desacato', 'desacatar funcion√°rio'],
            subject: 'Desacato',
        },
        {
            keywords: ['desobedi√™ncia', 'desobedecer ordem legal'],
            subject: 'Desobedi√™ncia',
        },
        {
            keywords: ['tr√°fico', 'drogas', 'entorpecentes'],
            subject: 'Tr√°fico de Drogas',
        },
        {
            keywords: ['estelionato', 'artif√≠cio', 'ardil', 'engano'],
            subject: 'Estelionato',
        },
        {
            keywords: ['extors√£o', 'constranger', 'vantagem econ√¥mica'],
            subject: 'Extors√£o',
        },
        {
            keywords: ['sequestro', 'c√°rcere privado', 'privar liberdade'],
            subject: 'Sequestro e C√°rcere Privado',
        },
        { keywords: ['cal√∫nia', 'imputar falsamente'], subject: 'Cal√∫nia' },
        {
            keywords: ['difama√ß√£o', 'imputar fato ofensivo'],
            subject: 'Difama√ß√£o',
        },
        { keywords: ['inj√∫ria', 'ofender dignidade'], subject: 'Inj√∫ria' },
        { keywords: ['amea√ßa', 'prometer mal'], subject: 'Amea√ßa' },
        {
            keywords: ['constrangimento ilegal', 'constranger algu√©m'],
            subject: 'Constrangimento Ilegal',
        },
        { keywords: ['abandono de incapaz'], subject: 'Abandono de Incapaz' },
        { keywords: ['omiss√£o de socorro'], subject: 'Omiss√£o de Socorro' },
        { keywords: ['rixa', 'participar de rixa'], subject: 'Rixa' },
        { keywords: ['inc√™ndio', 'fogo'], subject: 'Inc√™ndio' },
        { keywords: ['dano', 'destruir', 'deteriorar'], subject: 'Dano' },
        { keywords: ['apropria√ß√£o ind√©bita'], subject: 'Apropria√ß√£o Ind√©bita' },
        {
            keywords: ['recepta√ß√£o', 'adquirir', 'produto de crime'],
            subject: 'Recepta√ß√£o',
        },
    ];
    return findBestMatch(text, patterns) || 'Direito Penal Geral';
}

function detectProcessualPenalSubject(text) {
    const patterns = [
        {
            keywords: ['juiz', 'impedimento', 'suspei√ß√£o'],
            subject: 'Impedimento e Suspei√ß√£o do Juiz',
        },
        {
            keywords: ['minist√©rio p√∫blico', 'titular', 'a√ß√£o penal'],
            subject: 'Minist√©rio P√∫blico',
        },
        {
            keywords: ['acusado', 'defensor', 'defesa t√©cnica'],
            subject: 'Acusado e Defensor',
        },
        {
            keywords: ['assistente de acusa√ß√£o'],
            subject: 'Assistente de Acusa√ß√£o',
        },
        { keywords: ['cita√ß√£o', 'mandado', 'precat√≥ria'], subject: 'Cita√ß√£o' },
        { keywords: ['intima√ß√£o', 'ci√™ncia'], subject: 'Intima√ß√£o' },
        {
            keywords: ['inqu√©rito policial', 'investiga√ß√£o'],
            subject: 'Inqu√©rito Policial',
        },
        {
            keywords: ['a√ß√£o penal', 'den√∫ncia', 'queixa'],
            subject: 'A√ß√£o Penal',
        },
        {
            keywords: ['procedimento comum', 'ordin√°rio', 'sum√°rio'],
            subject: 'Procedimento Comum',
        },
        {
            keywords: ['tribunal do j√∫ri', 'jurados', 'pron√∫ncia'],
            subject: 'Tribunal do J√∫ri',
        },
        {
            keywords: ['senten√ßa', 'absolvi√ß√£o', 'condena√ß√£o'],
            subject: 'Senten√ßa',
        },
        { keywords: ['recursos', 'apela√ß√£o', 'agravo'], subject: 'Recursos' },
        {
            keywords: ['recurso em sentido estrito'],
            subject: 'Recurso em Sentido Estrito',
        },
        {
            keywords: ['embargos infringentes'],
            subject: 'Embargos Infringentes',
        },
        {
            keywords: [
                'habeas corpus',
                'coa√ß√£o ilegal',
                'liberdade de locomo√ß√£o',
            ],
            subject: 'Habeas Corpus',
        },
        { keywords: ['revis√£o criminal'], subject: 'Revis√£o Criminal' },
        {
            keywords: ['pris√£o preventiva', 'pris√£o tempor√°ria'],
            subject: 'Pris√£o Preventiva',
        },
        {
            keywords: ['pris√£o em flagrante', 'flagrante delito'],
            subject: 'Pris√£o em Flagrante',
        },
        {
            keywords: ['liberdade provis√≥ria', 'fian√ßa'],
            subject: 'Liberdade Provis√≥ria',
        },
        {
            keywords: ['medidas cautelares', 'alternativas'],
            subject: 'Medidas Cautelares',
        },
        { keywords: ['busca e apreens√£o'], subject: 'Busca e Apreens√£o' },
        { keywords: ['sequestro de bens'], subject: 'Sequestro de Bens' },
        { keywords: ['prova', 'pericial', 'testemunhal'], subject: 'Provas' },
        { keywords: ['interrogat√≥rio', 'acusado'], subject: 'Interrogat√≥rio' },
        { keywords: ['confiss√£o'], subject: 'Confiss√£o' },
        { keywords: ['acarea√ß√£o'], subject: 'Acarea√ß√£o' },
        {
            keywords: ['suspen√ß√£o condicional da pena'],
            subject: 'Suspens√£o Condicional da Pena',
        },
        {
            keywords: ['livramento condicional'],
            subject: 'Livramento Condicional',
        },
        {
            keywords: ['execu√ß√£o penal', 'cumprimento'],
            subject: 'Execu√ß√£o Penal',
        },
    ];
    return findBestMatch(text, patterns) || 'Processo Penal Geral';
}

function detectProcessualCivilSubject(text) {
    const patterns = [
        {
            keywords: ['jurisdi√ß√£o', 'compet√™ncia', 'foro'],
            subject: 'Jurisdi√ß√£o e Compet√™ncia',
        },
        {
            keywords: ['impedimento', 'suspei√ß√£o', 'juiz'],
            subject: 'Impedimento e Suspei√ß√£o',
        },
        {
            keywords: ['auxiliares da justi√ßa', 'escriv√£o', 'oficial'],
            subject: 'Auxiliares da Justi√ßa',
        },
        {
            keywords: ['capacidade processual', 'legitimidade'],
            subject: 'Capacidade Processual',
        },
        { keywords: ['litiscons√≥rcio'], subject: 'Litiscons√≥rcio' },
        {
            keywords: ['interven√ß√£o de terceiros'],
            subject: 'Interven√ß√£o de Terceiros',
        },
        { keywords: ['assist√™ncia'], subject: 'Assist√™ncia' },
        { keywords: ['denuncia√ß√£o da lide'], subject: 'Denuncia√ß√£o da Lide' },
        {
            keywords: ['chamamento ao processo'],
            subject: 'Chamamento ao Processo',
        },
        {
            keywords: ['desconsidera√ß√£o da personalidade'],
            subject: 'Desconsidera√ß√£o da Personalidade Jur√≠dica',
        },
        { keywords: ['amicus curiae'], subject: 'Amicus Curiae' },
        {
            keywords: ['atos processuais', 'forma', 'tempo'],
            subject: 'Atos Processuais',
        },
        { keywords: ['prazos', 'contagem', 'dias √∫teis'], subject: 'Prazos' },
        { keywords: ['preclus√£o'], subject: 'Preclus√£o' },
        { keywords: ['cita√ß√£o', 'r√©u'], subject: 'Cita√ß√£o' },
        { keywords: ['intima√ß√£o', 'partes'], subject: 'Intima√ß√£o' },
        { keywords: ['cartas', 'precat√≥ria', 'rogat√≥ria'], subject: 'Cartas' },
        {
            keywords: ['tutela provis√≥ria', 'urg√™ncia', 'evid√™ncia'],
            subject: 'Tutela Provis√≥ria',
        },
        { keywords: ['tutela antecipada'], subject: 'Tutela Antecipada' },
        { keywords: ['tutela cautelar'], subject: 'Tutela Cautelar' },
        {
            keywords: ['peti√ß√£o inicial', 'requisitos'],
            subject: 'Peti√ß√£o Inicial',
        },
        {
            keywords: ['audi√™ncia de concilia√ß√£o', 'media√ß√£o'],
            subject: 'Audi√™ncia de Concilia√ß√£o',
        },
        { keywords: ['contesta√ß√£o', 'resposta'], subject: 'Contesta√ß√£o' },
        {
            keywords: ['reconven√ß√£o', 'pedido contraposto'],
            subject: 'Reconven√ß√£o',
        },
        { keywords: ['revelia', 'presun√ß√£o'], subject: 'Revelia' },
        {
            keywords: ['provid√™ncias preliminares', 'saneamento'],
            subject: 'Saneamento',
        },
        {
            keywords: ['julgamento antecipado'],
            subject: 'Julgamento Antecipado',
        },
        {
            keywords: ['audi√™ncia de instru√ß√£o', 'julgamento'],
            subject: 'Audi√™ncia de Instru√ß√£o',
        },
        { keywords: ['provas', '√¥nus', 'documental'], subject: 'Provas' },
        { keywords: ['prova testemunhal'], subject: 'Prova Testemunhal' },
        { keywords: ['prova pericial'], subject: 'Prova Pericial' },
        { keywords: ['inspe√ß√£o judicial'], subject: 'Inspe√ß√£o Judicial' },
        { keywords: ['senten√ßa', 'dispositivo'], subject: 'Senten√ßa' },
        { keywords: ['coisa julgada'], subject: 'Coisa Julgada' },
        {
            keywords: ['liquida√ß√£o de senten√ßa'],
            subject: 'Liquida√ß√£o de Senten√ßa',
        },
        {
            keywords: ['cumprimento de senten√ßa', 'execu√ß√£o'],
            subject: 'Cumprimento de Senten√ßa',
        },
        { keywords: ['penhora', 'bens'], subject: 'Penhora' },
        {
            keywords: ['arremata√ß√£o', 'adjudica√ß√£o'],
            subject: 'Arremata√ß√£o e Adjudica√ß√£o',
        },
        { keywords: ['recursos', 'apela√ß√£o'], subject: 'Recursos' },
        {
            keywords: ['agravo de instrumento'],
            subject: 'Agravo de Instrumento',
        },
        { keywords: ['agravo interno'], subject: 'Agravo Interno' },
        {
            keywords: ['embargos de declara√ß√£o'],
            subject: 'Embargos de Declara√ß√£o',
        },
        { keywords: ['recurso especial', 'stj'], subject: 'Recurso Especial' },
        {
            keywords: ['recurso extraordin√°rio', 'stf'],
            subject: 'Recurso Extraordin√°rio',
        },
        { keywords: ['a√ß√£o rescis√≥ria'], subject: 'A√ß√£o Rescis√≥ria' },
        { keywords: ['reclama√ß√£o'], subject: 'Reclama√ß√£o' },
        {
            keywords: ['suspens√£o de seguran√ßa'],
            subject: 'Suspens√£o de Seguran√ßa',
        },
    ];
    return findBestMatch(text, patterns) || 'Processo Civil Geral';
}

function detectAdministrativoSubject(text) {
    const patterns = [
        // Lei 10.261 - Estatuto
        {
            keywords: ['provimento', 'nomea√ß√£o', 'investidura'],
            subject: 'Provimento de Cargo',
        },
        { keywords: ['posse', 'prazo', 'requisitos'], subject: 'Posse' },
        { keywords: ['exerc√≠cio', 'in√≠cio', 'prazo'], subject: 'Exerc√≠cio' },
        {
            keywords: ['est√°gio probat√≥rio', 'confirma√ß√£o'],
            subject: 'Est√°gio Probat√≥rio',
        },
        { keywords: ['estabilidade', 'efetivo'], subject: 'Estabilidade' },
        {
            keywords: ['vac√¢ncia', 'exonera√ß√£o', 'demiss√£o', 'aposentadoria'],
            subject: 'Vac√¢ncia',
        },
        {
            keywords: ['remo√ß√£o', 'redistribui√ß√£o'],
            subject: 'Remo√ß√£o e Redistribui√ß√£o',
        },
        { keywords: ['substitui√ß√£o', 'fun√ß√£o'], subject: 'Substitui√ß√£o' },
        { keywords: ['readapta√ß√£o', 'incapacidade'], subject: 'Readapta√ß√£o' },
        { keywords: ['revers√£o', 'aposentadoria'], subject: 'Revers√£o' },
        { keywords: ['aproveitamento'], subject: 'Aproveitamento' },
        { keywords: ['reintegra√ß√£o', 'anula√ß√£o'], subject: 'Reintegra√ß√£o' },
        { keywords: ['disponibilidade'], subject: 'Disponibilidade' },
        {
            keywords: ['vencimento', 'remunera√ß√£o', 'vantagens'],
            subject: 'Vencimentos e Vantagens',
        },
        { keywords: ['gratifica√ß√£o', 'adicional'], subject: 'Gratifica√ß√µes' },
        { keywords: ['f√©rias', 'direito'], subject: 'F√©rias' },
        { keywords: ['licen√ßa', 'afastamento'], subject: 'Licen√ßas' },
        { keywords: ['deveres', 'obriga√ß√µes'], subject: 'Deveres' },
        { keywords: ['proibi√ß√µes', 'veda√ß√µes'], subject: 'Proibi√ß√µes' },
        { keywords: ['acumula√ß√£o', 'cargos'], subject: 'Acumula√ß√£o de Cargos' },
        {
            keywords: [
                'responsabilidade',
                'civil',
                'criminal',
                'administrativa',
            ],
            subject: 'Responsabilidades',
        },
        {
            keywords: ['penalidades', 'advert√™ncia', 'suspens√£o'],
            subject: 'Penalidades',
        },
        {
            keywords: ['processo administrativo', 'disciplinar', 'pad'],
            subject: 'Processo Disciplinar',
        },
        { keywords: ['sindic√¢ncia', 'investiga√ß√£o'], subject: 'Sindic√¢ncia' },
        { keywords: ['inassiduidade', 'faltas'], subject: 'Inassiduidade' },
        { keywords: ['abandono de cargo'], subject: 'Abandono de Cargo' },

        // Lei 8.429 - Improbidade
        {
            keywords: ['improbidade', 'administrativa'],
            subject: 'Improbidade Administrativa',
        },
        {
            keywords: ['enriquecimento il√≠cito', 'vantagem patrimonial'],
            subject: 'Enriquecimento Il√≠cito',
        },
        {
            keywords: ['preju√≠zo ao er√°rio', 'les√£o'],
            subject: 'Preju√≠zo ao Er√°rio',
        },
        {
            keywords: ['princ√≠pios da administra√ß√£o', 'viola√ß√£o'],
            subject: 'Viola√ß√£o de Princ√≠pios',
        },
        {
            keywords: ['san√ß√µes', 'perda da fun√ß√£o', 'multa'],
            subject: 'San√ß√µes',
        },
        {
            keywords: ['indisponibilidade de bens'],
            subject: 'Indisponibilidade de Bens',
        },
        { keywords: ['sequestro', 'cautelar'], subject: 'Medidas Cautelares' },
        {
            keywords: [
                'procedimento administrativo',
                'investiga√ß√£o preliminar',
            ],
            subject: 'Procedimento Investigat√≥rio',
        },
        { keywords: ['a√ß√£o de improbidade'], subject: 'A√ß√£o Judicial' },
        { keywords: ['acordo de n√£o persecu√ß√£o', 'tac'], subject: 'Acordos' },
    ];
    return findBestMatch(text, patterns) || 'Direito Administrativo Geral';
}

function detectJuizadosEspeciaisSubject(text) {
    const patterns = [
        {
            keywords: ['compet√™ncia', 'causas c√≠veis'],
            subject: 'Compet√™ncia C√≠vel',
        },
        {
            keywords: ['compet√™ncia', 'infra√ß√µes penais'],
            subject: 'Compet√™ncia Criminal',
        },
        {
            keywords: ['juiz leigo', 'conciliador'],
            subject: 'Juiz Leigo e Conciliador',
        },
        { keywords: ['pedido', 'escrito', 'oral'], subject: 'Pedido Inicial' },
        { keywords: ['cita√ß√£o', 'intima√ß√£o'], subject: 'Cita√ß√£o e Intima√ß√£o' },
        {
            keywords: ['audi√™ncia de concilia√ß√£o', 'composi√ß√£o'],
            subject: 'Audi√™ncia de Concilia√ß√£o',
        },
        {
            keywords: ['instru√ß√£o', 'julgamento'],
            subject: 'Instru√ß√£o e Julgamento',
        },
        { keywords: ['resposta', 'contesta√ß√£o'], subject: 'Resposta do R√©u' },
        { keywords: ['prova', 'testemunhas'], subject: 'Provas' },
        { keywords: ['senten√ßa', 'l√≠quida'], subject: 'Senten√ßa' },
        { keywords: ['recurso', 'turma recursal'], subject: 'Recursos' },
        {
            keywords: ['embargos de declara√ß√£o'],
            subject: 'Embargos de Declara√ß√£o',
        },
        { keywords: ['execu√ß√£o', 'cumprimento'], subject: 'Execu√ß√£o' },
        {
            keywords: ['transa√ß√£o penal', 'composi√ß√£o civil'],
            subject: 'Transa√ß√£o Penal',
        },
        {
            keywords: ['suspens√£o condicional', 'sursis processual'],
            subject: 'Suspens√£o Condicional',
        },
        {
            keywords: ['termo circunstanciado', 'tc'],
            subject: 'Termo Circunstanciado',
        },
        { keywords: ['audi√™ncia preliminar'], subject: 'Audi√™ncia Preliminar' },
        {
            keywords: ['representa√ß√£o', 'a√ß√£o penal p√∫blica'],
            subject: 'Representa√ß√£o',
        },
    ];
    return findBestMatch(text, patterns) || 'Juizados Especiais Geral';
}

function detectJuizadosFazendaSubject(text) {
    const patterns = [
        {
            keywords: ['compet√™ncia', 'fazenda p√∫blica'],
            subject: 'Compet√™ncia dos JEFAP',
        },
        {
            keywords: ['estados', 'distrito federal', 'munic√≠pios'],
            subject: 'Partes - Fazenda P√∫blica',
        },
        { keywords: ['valor da causa', 'al√ßada'], subject: 'Valor da Causa' },
        { keywords: ['partes', 'legitimidade'], subject: 'Partes no Processo' },
        {
            keywords: ['cita√ß√£o', 'intima√ß√£o', 'fazenda'],
            subject: 'Cita√ß√£o da Fazenda P√∫blica',
        },
        {
            keywords: ['prazo diferenciado', 'fazenda'],
            subject: 'Prazos da Fazenda P√∫blica',
        },
        {
            keywords: ['tutela', 'antecipada', 'cautelar'],
            subject: 'Tutelas de Urg√™ncia',
        },
        {
            keywords: ['senten√ßa', 'reexame necess√°rio'],
            subject: 'Senten√ßa e Reexame',
        },
        { keywords: ['recurso', 'turma recursal'], subject: 'Recursos' },
        {
            keywords: ['cumprimento', 'precat√≥rio', 'rpv'],
            subject: 'Cumprimento de Senten√ßa',
        },
        {
            keywords: ['uniformiza√ß√£o', 'jurisprud√™ncia'],
            subject: 'Uniformiza√ß√£o',
        },
        {
            keywords: ['assist√™ncia judici√°ria'],
            subject: 'Assist√™ncia Judici√°ria',
        },
    ];
    return (
        findBestMatch(text, patterns) || 'Juizados Especiais da Fazenda P√∫blica'
    );
}

function detectConstitucionalSubject(text) {
    const patterns = [
        // Direitos e Garantias Fundamentais
        {
            keywords: ['princ√≠pio da igualdade', 'todos s√£o iguais'],
            subject: 'Princ√≠pio da Igualdade',
        },
        {
            keywords: ['direito √† vida', 'inviolabilidade'],
            subject: 'Direito √† Vida',
        },
        {
            keywords: ['liberdade de express√£o', 'manifesta√ß√£o do pensamento'],
            subject: 'Liberdade de Express√£o',
        },
        {
            keywords: ['liberdade religiosa', 'cren√ßa', 'culto'],
            subject: 'Liberdade Religiosa',
        },
        {
            keywords: ['intimidade', 'vida privada', 'honra', 'imagem'],
            subject: 'Direito √† Privacidade',
        },
        {
            keywords: ['inviolabilidade de domic√≠lio', 'casa √© asilo'],
            subject: 'Inviolabilidade Domiciliar',
        },
        {
            keywords: ['sigilo de correspond√™ncia', 'comunica√ß√µes'],
            subject: 'Sigilo de Comunica√ß√µes',
        },
        {
            keywords: ['liberdade de trabalho', 'profiss√£o'],
            subject: 'Liberdade de Trabalho',
        },
        { keywords: ['acesso √† informa√ß√£o'], subject: 'Acesso √† Informa√ß√£o' },
        {
            keywords: ['liberdade de locomo√ß√£o', 'ir e vir'],
            subject: 'Liberdade de Locomo√ß√£o',
        },
        { keywords: ['direito de reuni√£o'], subject: 'Direito de Reuni√£o' },
        {
            keywords: ['liberdade de associa√ß√£o'],
            subject: 'Liberdade de Associa√ß√£o',
        },
        {
            keywords: ['direito de propriedade', 'fun√ß√£o social'],
            subject: 'Direito de Propriedade',
        },
        {
            keywords: ['pequena propriedade rural'],
            subject: 'Pequena Propriedade Rural',
        },
        { keywords: ['direito de heran√ßa'], subject: 'Direito de Heran√ßa' },
        { keywords: ['defesa do consumidor'], subject: 'Defesa do Consumidor' },
        {
            keywords: ['princ√≠pio da legalidade', 'obrigado a fazer'],
            subject: 'Princ√≠pio da Legalidade',
        },
        {
            keywords: ['tortura', 'tratamento desumano'],
            subject: 'Proibi√ß√£o de Tortura',
        },
        {
            keywords: ['presun√ß√£o de inoc√™ncia'],
            subject: 'Presun√ß√£o de Inoc√™ncia',
        },
        {
            keywords: ['pris√£o', 'flagrante', 'ordem judicial'],
            subject: 'Pris√£o',
        },
        {
            keywords: ['devido processo legal'],
            subject: 'Devido Processo Legal',
        },
        {
            keywords: ['contradit√≥rio', 'ampla defesa'],
            subject: 'Contradit√≥rio e Ampla Defesa',
        },
        { keywords: ['provas il√≠citas'], subject: 'Provas Il√≠citas' },
        { keywords: ['tribunal do j√∫ri'], subject: 'Tribunal do J√∫ri' },
        { keywords: ['extradi√ß√£o'], subject: 'Extradi√ß√£o' },

        // Direitos Sociais
        {
            keywords: ['direitos sociais', 'educa√ß√£o', 'sa√∫de'],
            subject: 'Direitos Sociais',
        },
        { keywords: ['direito √† educa√ß√£o'], subject: 'Direito √† Educa√ß√£o' },
        { keywords: ['direito √† sa√∫de'], subject: 'Direito √† Sa√∫de' },
        {
            keywords: ['alimenta√ß√£o', 'moradia'],
            subject: 'Direito √† Alimenta√ß√£o e Moradia',
        },
        {
            keywords: ['transporte', 'lazer'],
            subject: 'Direito ao Transporte e Lazer',
        },
        {
            keywords: ['seguran√ßa', 'previd√™ncia social'],
            subject: 'Seguran√ßa e Previd√™ncia',
        },
        {
            keywords: ['prote√ß√£o √† maternidade', 'inf√¢ncia'],
            subject: 'Prote√ß√£o √† Maternidade',
        },
        {
            keywords: ['assist√™ncia aos desamparados'],
            subject: 'Assist√™ncia Social',
        },

        // Direitos dos Trabalhadores
        {
            keywords: ['rela√ß√£o de emprego', 'prote√ß√£o'],
            subject: 'Rela√ß√£o de Emprego',
        },
        { keywords: ['seguro-desemprego'], subject: 'Seguro-Desemprego' },
        { keywords: ['fgts', 'fundo de garantia'], subject: 'FGTS' },
        { keywords: ['sal√°rio m√≠nimo'], subject: 'Sal√°rio M√≠nimo' },
        { keywords: ['d√©cimo terceiro'], subject: 'D√©cimo Terceiro Sal√°rio' },
        {
            keywords: ['jornada de trabalho', 'horas'],
            subject: 'Jornada de Trabalho',
        },
        {
            keywords: ['repouso semanal', 'f√©rias'],
            subject: 'Repouso e F√©rias',
        },
        {
            keywords: ['licen√ßa maternidade', 'paternidade'],
            subject: 'Licen√ßas',
        },
        { keywords: ['aviso pr√©vio'], subject: 'Aviso Pr√©vio' },
        { keywords: ['adicional noturno', 'insalubre'], subject: 'Adicionais' },
        { keywords: ['aposentadoria'], subject: 'Aposentadoria' },
        {
            keywords: ['liberdade sindical', 'associa√ß√£o'],
            subject: 'Liberdade Sindical',
        },
        { keywords: ['direito de greve'], subject: 'Direito de Greve' },
        {
            keywords: ['participa√ß√£o nos lucros'],
            subject: 'Participa√ß√£o nos Lucros',
        },

        // Nacionalidade
        { keywords: ['brasileiros natos'], subject: 'Brasileiros Natos' },
        { keywords: ['brasileiros naturalizados'], subject: 'Naturaliza√ß√£o' },
        {
            keywords: ['perda da nacionalidade'],
            subject: 'Perda da Nacionalidade',
        },

        // Direitos Pol√≠ticos
        {
            keywords: ['soberania popular', 'sufr√°gio'],
            subject: 'Soberania Popular',
        },
        {
            keywords: ['alistamento eleitoral'],
            subject: 'Alistamento Eleitoral',
        },
        { keywords: ['condi√ß√µes de elegibilidade'], subject: 'Elegibilidade' },
        { keywords: ['inelegibilidade'], subject: 'Inelegibilidade' },
        {
            keywords: ['suspens√£o dos direitos pol√≠ticos'],
            subject: 'Suspens√£o de Direitos Pol√≠ticos',
        },

        // Administra√ß√£o P√∫blica
        {
            keywords: [
                'princ√≠pios da administra√ß√£o',
                'legalidade',
                'impessoalidade',
            ],
            subject: 'Princ√≠pios Administrativos',
        },
        {
            keywords: ['cargos p√∫blicos', 'investidura'],
            subject: 'Cargos P√∫blicos',
        },
        { keywords: ['concurso p√∫blico'], subject: 'Concurso P√∫blico' },
        { keywords: ['acumula√ß√£o de cargos'], subject: 'Acumula√ß√£o de Cargos' },
        { keywords: ['estabilidade', 'servidor'], subject: 'Estabilidade' },
        {
            keywords: ['vencimentos', 'subs√≠dios'],
            subject: 'Remunera√ß√£o de Servidores',
        },
        {
            keywords: ['previd√™ncia dos servidores'],
            subject: 'Previd√™ncia de Servidores',
        },
        {
            keywords: ['contrato tempor√°rio'],
            subject: 'Contrata√ß√£o Tempor√°ria',
        },
        { keywords: ['licita√ß√£o'], subject: 'Licita√ß√µes' },
        { keywords: ['obras p√∫blicas'], subject: 'Obras P√∫blicas' },
        { keywords: ['servidores militares'], subject: 'Servidores Militares' },

        // Poder Judici√°rio
        {
            keywords: ['poder judici√°rio', '√≥rg√£os'],
            subject: 'Estrutura do Judici√°rio',
        },
        {
            keywords: ['supremo tribunal federal', 'stf'],
            subject: 'Supremo Tribunal Federal',
        },
        {
            keywords: ['superior tribunal de justi√ßa', 'stj'],
            subject: 'Superior Tribunal de Justi√ßa',
        },
        {
            keywords: ['tribunais regionais federais'],
            subject: 'Tribunais Regionais Federais',
        },
        { keywords: ['tribunais de justi√ßa'], subject: 'Tribunais de Justi√ßa' },
        { keywords: ['tribunais do trabalho'], subject: 'Justi√ßa do Trabalho' },
        { keywords: ['tribunais eleitorais'], subject: 'Justi√ßa Eleitoral' },
        { keywords: ['tribunais militares'], subject: 'Justi√ßa Militar' },
        {
            keywords: ['garantias do juiz', 'vitaliciedade'],
            subject: 'Garantias da Magistratura',
        },
        {
            keywords: ['veda√ß√µes aos magistrados'],
            subject: 'Veda√ß√µes aos Magistrados',
        },
        {
            keywords: ['conselho nacional de justi√ßa', 'cnj'],
            subject: 'Conselho Nacional de Justi√ßa',
        },

        // Rem√©dios Constitucionais
        { keywords: ['habeas corpus'], subject: 'Habeas Corpus' },
        {
            keywords: ['mandado de seguran√ßa', 'direito l√≠quido'],
            subject: 'Mandado de Seguran√ßa',
        },
        { keywords: ['mandado de injun√ß√£o'], subject: 'Mandado de Injun√ß√£o' },
        { keywords: ['habeas data'], subject: 'Habeas Data' },
        { keywords: ['a√ß√£o popular'], subject: 'A√ß√£o Popular' },

        // Controle de Constitucionalidade
        {
            keywords: ['a√ß√£o direta de inconstitucionalidade', 'adin'],
            subject: 'ADI',
        },
        {
            keywords: ['a√ß√£o declarat√≥ria de constitucionalidade'],
            subject: 'ADC',
        },
        { keywords: ['argui√ß√£o de descumprimento', 'adpf'], subject: 'ADPF' },
    ];
    return findBestMatch(text, patterns) || 'Direito Constitucional Geral';
}

function detectDeficienciaSubject(text) {
    const patterns = [
        {
            keywords: ['disposi√ß√µes gerais', 'igualdade', 'n√£o discrimina√ß√£o'],
            subject: 'Disposi√ß√µes Gerais - Igualdade',
        },
        {
            keywords: ['defini√ß√£o de defici√™ncia', 'impedimento'],
            subject: 'Conceito de Defici√™ncia',
        },
        {
            keywords: ['avalia√ß√£o', 'biopsicossocial'],
            subject: 'Avalia√ß√£o da Defici√™ncia',
        },
        {
            keywords: ['acessibilidade', 'direito'],
            subject: 'Direito √† Acessibilidade',
        },
        {
            keywords: ['desenho universal', 'concep√ß√£o'],
            subject: 'Desenho Universal',
        },
        {
            keywords: ['tecnologia assistiva', 'ajuda t√©cnica'],
            subject: 'Tecnologia Assistiva',
        },
        {
            keywords: ['barreiras', 'arquitet√¥nicas', 'urban√≠sticas'],
            subject: 'Barreiras',
        },
        {
            keywords: ['comunica√ß√£o', 'informa√ß√£o', 'libras'],
            subject: 'Comunica√ß√£o e Informa√ß√£o',
        },
        { keywords: ['adapta√ß√µes razo√°veis'], subject: 'Adapta√ß√µes Razo√°veis' },
        {
            keywords: ['atendimento priorit√°rio'],
            subject: 'Atendimento Priorit√°rio',
        },
        {
            keywords: ['direito √† vida', 'habilita√ß√£o'],
            subject: 'Direito √† Vida',
        },
        { keywords: ['direito √† sa√∫de'], subject: 'Direito √† Sa√∫de' },
        {
            keywords: ['habilita√ß√£o', 'reabilita√ß√£o'],
            subject: 'Habilita√ß√£o e Reabilita√ß√£o',
        },
        { keywords: ['direito √† educa√ß√£o'], subject: 'Direito √† Educa√ß√£o' },
        {
            keywords: ['educa√ß√£o inclusiva', 'sistema educacional'],
            subject: 'Educa√ß√£o Inclusiva',
        },
        {
            keywords: ['atendimento educacional especializado'],
            subject: 'Atendimento Especializado',
        },
        { keywords: ['direito √† moradia'], subject: 'Direito √† Moradia' },
        { keywords: ['direito ao trabalho'], subject: 'Direito ao Trabalho' },
        {
            keywords: ['coloca√ß√£o competitiva', 'trabalho'],
            subject: 'Coloca√ß√£o no Trabalho',
        },
        {
            keywords: ['habilita√ß√£o profissional'],
            subject: 'Habilita√ß√£o Profissional',
        },
        {
            keywords: ['direito √† assist√™ncia social'],
            subject: 'Assist√™ncia Social',
        },
        {
            keywords: ['benef√≠cio de presta√ß√£o continuada', 'bpc'],
            subject: 'BPC',
        },
        { keywords: ['direito √† previd√™ncia'], subject: 'Previd√™ncia Social' },
        {
            keywords: ['cultura', 'esporte', 'turismo', 'lazer'],
            subject: 'Cultura, Esporte e Lazer',
        },
        {
            keywords: ['transporte', 'mobilidade'],
            subject: 'Transporte e Mobilidade',
        },
        {
            keywords: ['participa√ß√£o pol√≠tica'],
            subject: 'Participa√ß√£o na Vida P√∫blica',
        },
        {
            keywords: ['capacidade civil', 'curatela'],
            subject: 'Capacidade Civil',
        },
        {
            keywords: ['tomada de decis√£o apoiada'],
            subject: 'Tomada de Decis√£o Apoiada',
        },
        { keywords: ['curatela'], subject: 'Curatela' },
        { keywords: ['crimes', 'penas'], subject: 'Crimes e San√ß√µes' },
    ];
    return (
        findBestMatch(text, patterns) || 'Estatuto da Pessoa com Defici√™ncia'
    );
}

function detectPlanoCargosCargasSubject(text) {
    const patterns = [
        {
            keywords: ['disposi√ß√µes preliminares', '√¢mbito'],
            subject: 'Disposi√ß√µes Preliminares',
        },
        {
            keywords: ['quadro de pessoal', 'cargos'],
            subject: 'Quadro de Pessoal',
        },
        {
            keywords: ['estrutura das carreiras'],
            subject: 'Estrutura de Carreiras',
        },
        {
            keywords: ['requisitos', 'ingresso'],
            subject: 'Requisitos de Ingresso',
        },
        {
            keywords: ['atribui√ß√µes', 'escrevente t√©cnico'],
            subject: 'Atribui√ß√µes - Escrevente',
        },
        {
            keywords: ['atribui√ß√µes', 'oficial de justi√ßa'],
            subject: 'Atribui√ß√µes - Oficial',
        },
        {
            keywords: ['atribui√ß√µes', 'assistente social'],
            subject: 'Atribui√ß√µes - Assistente Social',
        },
        {
            keywords: ['atribui√ß√µes', 'analista'],
            subject: 'Atribui√ß√µes - Analista',
        },
        {
            keywords: ['jornada de trabalho', 'horas'],
            subject: 'Jornada de Trabalho',
        },
        { keywords: ['vencimentos', 'tabela'], subject: 'Vencimentos' },
        { keywords: ['subs√≠dios', 'magistrados'], subject: 'Subs√≠dios' },
        {
            keywords: ['concurso p√∫blico', 'provimento'],
            subject: 'Concurso P√∫blico',
        },
        {
            keywords: ['est√°gio probat√≥rio', 'avalia√ß√£o'],
            subject: 'Est√°gio Probat√≥rio',
        },
        { keywords: ['progress√£o', 'funcional'], subject: 'Progress√£o' },
        { keywords: ['promo√ß√£o', 'classe'], subject: 'Promo√ß√£o' },
        { keywords: ['acesso', 'carreira superior'], subject: 'Acesso' },
        { keywords: ['remo√ß√£o', 'permuta'], subject: 'Remo√ß√£o' },
        {
            keywords: ['gratifica√ß√£o', 'fun√ß√£o'],
            subject: 'Gratifica√ß√£o de Fun√ß√£o',
        },
        {
            keywords: ['gratifica√ß√£o judici√°ria'],
            subject: 'Gratifica√ß√£o Judici√°ria',
        },
        {
            keywords: ['adicional de qualifica√ß√£o', 'p√≥s-gradua√ß√£o'],
            subject: 'Adicional de Qualifica√ß√£o',
        },
        {
            keywords: ['adicional por tempo de servi√ßo', 'quinqu√™nio'],
            subject: 'Adicional por Tempo',
        },
        { keywords: ['sexta-parte'], subject: 'Sexta-Parte' },
        { keywords: ['ajuda de custo'], subject: 'Ajuda de Custo' },
        { keywords: ['di√°rias'], subject: 'Di√°rias' },
        { keywords: ['f√©rias-pr√™mio'], subject: 'F√©rias-Pr√™mio' },
        { keywords: ['licen√ßa', 'afastamento'], subject: 'Licen√ßas' },
        {
            keywords: ['desenvolvimento funcional'],
            subject: 'Desenvolvimento Funcional',
        },
        { keywords: ['comit√™ de recursos humanos'], subject: 'Comit√™ de RH' },
        {
            keywords: ['avalia√ß√£o de desempenho'],
            subject: 'Avalia√ß√£o de Desempenho',
        },
        { keywords: ['readapta√ß√£o'], subject: 'Readapta√ß√£o' },
    ];
    return findBestMatch(text, patterns) || 'Plano de Cargos e Carreiras';
}

function detectTeletrabalhoSubject(text) {
    const patterns = [
        {
            keywords: ['conceito', 'teletrabalho', 'defini√ß√£o'],
            subject: 'Conceito de Teletrabalho',
        },
        {
            keywords: ['objetivos', 'finalidade'],
            subject: 'Objetivos do Teletrabalho',
        },
        {
            keywords: ['modalidades', 'integral', 'parcial'],
            subject: 'Modalidades',
        },
        {
            keywords: ['requisitos', 'elegibilidade'],
            subject: 'Requisitos para Ades√£o',
        },
        {
            keywords: ['magistrado', 'juiz'],
            subject: 'Teletrabalho de Magistrados',
        },
        {
            keywords: ['servidor', 'escrevente'],
            subject: 'Teletrabalho de Servidores',
        },
        {
            keywords: ['pessoa com defici√™ncia', 'doen√ßa grave'],
            subject: 'Teletrabalho PCD',
        },
        {
            keywords: ['termo de ades√£o', 'formaliza√ß√£o'],
            subject: 'Formaliza√ß√£o',
        },
        {
            keywords: ['deveres', 'obriga√ß√µes'],
            subject: 'Deveres do Teletrabalhador',
        },
        {
            keywords: ['metas', 'produtividade'],
            subject: 'Metas de Produtividade',
        },
        {
            keywords: ['controle', 'frequ√™ncia'],
            subject: 'Controle de Frequ√™ncia',
        },
        {
            keywords: ['equipamentos', 'infraestrutura'],
            subject: 'Equipamentos e Infraestrutura',
        },
        {
            keywords: ['seguran√ßa da informa√ß√£o'],
            subject: 'Seguran√ßa da Informa√ß√£o',
        },
        { keywords: ['veda√ß√µes', 'proibi√ß√µes'], subject: 'Veda√ß√µes' },
        {
            keywords: ['desligamento', 'retorno'],
            subject: 'Desligamento do Teletrabalho',
        },
        { keywords: ['avalia√ß√£o', 'desempenho'], subject: 'Avalia√ß√£o' },
        { keywords: ['supervis√£o', 'chefia'], subject: 'Supervis√£o' },
        {
            keywords: ['comparecimento presencial'],
            subject: 'Comparecimento Presencial',
        },
    ];
    return findBestMatch(text, patterns) || 'Teletrabalho TJSP';
}

function detectEProcSubject(text) {
    const patterns = [
        {
            keywords: ['disposi√ß√µes gerais', '√¢mbito'],
            subject: 'Disposi√ß√µes Gerais eProc',
        },
        {
            keywords: ['princ√≠pios', 'diretrizes'],
            subject: 'Princ√≠pios do eProc',
        },
        { keywords: ['governan√ßa', 'gest√£o'], subject: 'Governan√ßa' },
        { keywords: ['comit√™ gestor', 'cge'], subject: 'Comit√™ Gestor' },
        {
            keywords: ['coordenadoria', 'coeproc'],
            subject: 'Coordenadoria do eProc',
        },
        { keywords: ['subcomit√™'], subject: 'Subcomit√™s' },
        { keywords: ['implanta√ß√£o', 'migra√ß√£o'], subject: 'Implanta√ß√£o' },
        {
            keywords: ['cadastramento', 'usu√°rios'],
            subject: 'Cadastro de Usu√°rios',
        },
        { keywords: ['credenciamento', 'advogado'], subject: 'Credenciamento' },
        {
            keywords: ['certificado digital', 'assinatura'],
            subject: 'Certifica√ß√£o Digital',
        },
        { keywords: ['peticionamento', 'inicial'], subject: 'Peticionamento' },
        { keywords: ['distribui√ß√£o', 'autom√°tica'], subject: 'Distribui√ß√£o' },
        {
            keywords: ['movimenta√ß√£o processual', 'eventos'],
            subject: 'Movimenta√ß√£o',
        },
        {
            keywords: ['cita√ß√£o', 'intima√ß√£o', 'eletr√¥nica'],
            subject: 'Comunica√ß√µes Processuais',
        },
        { keywords: ['prazos', 'contagem'], subject: 'Prazos' },
        {
            keywords: ['indisponibilidade', 'sistema'],
            subject: 'Indisponibilidade',
        },
        { keywords: ['consulta processual'], subject: 'Consulta' },
        {
            keywords: ['juntada de documentos'],
            subject: 'Juntada de Documentos',
        },
        {
            keywords: ['audi√™ncias', 'videoconfer√™ncia'],
            subject: 'Audi√™ncias Virtuais',
        },
        { keywords: ['seguran√ßa', 'sigilo'], subject: 'Seguran√ßa e Sigilo' },
        {
            keywords: ['backup', 'preserva√ß√£o'],
            subject: 'Backup e Preserva√ß√£o',
        },
        { keywords: ['suporte t√©cnico'], subject: 'Suporte T√©cnico' },
        { keywords: ['treinamento', 'capacita√ß√£o'], subject: 'Capacita√ß√£o' },
    ];
    return findBestMatch(text, patterns) || 'Governan√ßa eProc TJSP';
}

function detectRegimentoTJSPSubject(text) {
    const patterns = [
        {
            keywords: ['disposi√ß√µes gerais', 'compet√™ncia'],
            subject: 'Disposi√ß√µes Gerais TJSP',
        },
        { keywords: ['√≥rg√£o especial'], subject: '√ìrg√£o Especial' },
        { keywords: ['conselho superior'], subject: 'Conselho Superior' },
        { keywords: ['tribunal pleno'], subject: 'Tribunal Pleno' },
        { keywords: ['c√¢maras', 'se√ß√µes'], subject: 'C√¢maras e Se√ß√µes' },
        { keywords: ['turmas julgadoras'], subject: 'Turmas Julgadoras' },
        { keywords: ['presid√™ncia'], subject: 'Presid√™ncia' },
        { keywords: ['vice-presid√™ncia'], subject: 'Vice-Presid√™ncia' },
        { keywords: ['corregedoria geral'], subject: 'Corregedoria Geral' },
        { keywords: ['desembargadores'], subject: 'Desembargadores' },
        { keywords: ['ju√≠zes de primeiro grau'], subject: 'Ju√≠zes de 1¬∫ Grau' },
        { keywords: ['servidores', 'compet√™ncias'], subject: 'Servidores' },
        {
            keywords: ['processos', 'distribui√ß√£o'],
            subject: 'Distribui√ß√£o de Processos',
        },
        {
            keywords: ['julgamento', 'procedimento'],
            subject: 'Procedimentos de Julgamento',
        },
        { keywords: ['sess√µes'], subject: 'Sess√µes' },
        { keywords: ['sustenta√ß√£o oral'], subject: 'Sustenta√ß√£o Oral' },
        { keywords: ['ac√≥rd√£o'], subject: 'Ac√≥rd√£o' },
        { keywords: ['recursos', 'processamento'], subject: 'Recursos' },
        {
            keywords: ['uniformiza√ß√£o de jurisprud√™ncia'],
            subject: 'Uniformiza√ß√£o',
        },
        { keywords: ['incidente de resolu√ß√£o de demandas'], subject: 'IRDR' },
    ];
    return findBestMatch(text, patterns) || 'Regimento Interno TJSP';
}

function detectCorregedoriaSubject(text) {
    const patterns = [
        {
            keywords: ['disposi√ß√µes gerais', 'corregedoria'],
            subject: 'Disposi√ß√µes Gerais',
        },
        { keywords: ['serventias judiciais'], subject: 'Serventias Judiciais' },
        { keywords: ['distribui√ß√£o', 'processos'], subject: 'Distribui√ß√£o' },
        {
            keywords: ['recebimento', 'autua√ß√£o'],
            subject: 'Recebimento e Autua√ß√£o',
        },
        { keywords: ['registro', 'informa√ß√µes'], subject: 'Registro' },
        { keywords: ['carga', 'vista'], subject: 'Carga e Vista' },
        { keywords: ['juntada', 'documentos'], subject: 'Juntada' },
        { keywords: ['publica√ß√£o', 'expedientes'], subject: 'Publica√ß√£o' },
        { keywords: ['expedi√ß√£o', 'cartas'], subject: 'Expedi√ß√£o de Cartas' },
        { keywords: ['certid√µes'], subject: 'Certid√µes' },
        { keywords: ['arquivamento'], subject: 'Arquivamento' },
        { keywords: ['prazos processuais'], subject: 'Prazos' },
        { keywords: ['atos ordinat√≥rios'], subject: 'Atos Ordinat√≥rios' },
        { keywords: ['correi√ß√£o', 'inspe√ß√£o'], subject: 'Correi√ß√µes' },
        {
            keywords: ['reclama√ß√£o correicional'],
            subject: 'Reclama√ß√£o Correicional',
        },
        { keywords: ['representa√ß√£o'], subject: 'Representa√ß√£o' },
        { keywords: ['sindic√¢ncia'], subject: 'Sindic√¢ncia' },
        { keywords: ['penalidades'], subject: 'Penalidades' },
        { keywords: ['ouvidoria'], subject: 'Ouvidoria' },
    ];
    return findBestMatch(text, patterns) || 'Normas da Corregedoria TJSP';
}

// ============================================
// FUN√á√ÉO AUXILIAR: ENCONTRAR MELHOR CORRESPOND√äNCIA
// ============================================
function findBestMatch(text, patterns) {
    let bestMatch = null;
    let bestScore = 0;

    for (const pattern of patterns) {
        let score = 0;
        for (const keyword of pattern.keywords) {
            if (text.includes(keyword)) {
                score++;
            }
        }
        if (score > bestScore) {
            bestScore = score;
            bestMatch = pattern.subject;
        }
    }
    return bestMatch;
}

// ============================================
// FUN√á√ïES DE EXTRA√á√ÉO
// ============================================
function extractParagraphsFromArticle(articleText) {
    const paragraphs = [];
    const paragraphRegex = /(¬ß\s*\d+[¬∫¬∞]?[^¬ß]*)/gi;
    const paragraphMatches = articleText.match(paragraphRegex);

    if (paragraphMatches) {
        paragraphMatches.forEach((paragraph) => {
            const cleanParagraph = paragraph.replace(/\s+/g, ' ').trim();
            if (cleanParagraph.length > 5) {
                paragraphs.push(cleanParagraph);
            }
        });
    }
    return paragraphs;
}

function alternativeExtraction(text, fileName) {
    console.log('Usando m√©todo alternativo de extra√ß√£o...');
    const articles = [];
    const cleanText = text
        .replace(/\*\*/g, '')
        .replace(/\* /g, '')
        .replace(/\s+/g, ' ')
        .replace(/\n/g, ' ')
        .trim();

    const articlePattern =
        /Art(?:igo)?\.?\s*(\d+[¬∫¬∞]?(?:-?[A-Z])?(?:\s*[¬∫¬∞])?\.?)[^A-Z]*?(?=Art(?:igo)?\.?\s*\d|$)/gi;
    let match;

    while ((match = articlePattern.exec(cleanText)) !== null) {
        const articleNumber = match[1].replace(/\.$/, '');
        const articleContent = match[0].trim();

        if (articleContent.length > 10) {
            const subject = generateArticleSubject(articleContent, fileName);

            articles.push({
                number: articleNumber,
                fullReference: `Art. ${articleNumber}`,
                law: fileName.replace('.pdf', ''),
                subject: subject,
                fullText: articleContent,
                paragraphs: extractParagraphsFromArticle(articleContent),
                context: 'Extra√ß√£o alternativa',
            });
        }
    }

    console.log(`M√©todo alternativo encontrou ${articles.length} artigos.`);
    return articles;
}

function extractArticlesManually(text, fileName) {
    console.log('Executando extra√ß√£o manual robusta...');
    const articles = [];
    const cleanText = text
        .replace(/\*\*/g, '')
        .replace(/\* /g, '')
        .replace(/\s+/g, ' ')
        .replace(/\n/g, ' ')
        .trim();

    const articleRegex =
        /(Art(?:igo)?\.?\s*\d+[¬∫¬∞]?(?:-?[A-Z])?(?:\s*[¬∫¬∞])?\.?)[\s\S]*?(?=(?:Art(?:igo)?\.?\s*\d+[¬∫¬∞]?(?:-?[A-Z])?(?:\s*[¬∫¬∞])?\.?)|$)/gi;

    let matches = [];
    let match;

    while ((match = articleRegex.exec(cleanText)) !== null) {
        matches.push(match[0]);
    }

    if (matches.length === 0) {
        console.log('Nenhum artigo encontrado com a regex principal.');
        return articles;
    }

    console.log(`Encontrados ${matches.length} artigos brutos.`);

    matches.forEach((match, index) => {
        const trimmedMatch = match.trim();
        const articleNumberMatch = trimmedMatch.match(
            /^(Art(?:igo)?\.?\s*)(\d+[¬∫¬∞]?(?:-?[A-Z])?(?:\s*[¬∫¬∞])?\.?)/i
        );

        if (articleNumberMatch) {
            const articleNumber = articleNumberMatch[2].replace(/\.$/, '');
            const cleanArticleText = trimmedMatch
                .replace(
                    /^\s*Art(?:igo)?\.?\s*\d+[¬∫¬∞]?(?:-?[A-Z])?(?:\s*[¬∫¬∞])?\.?\s*/,
                    ''
                )
                .replace(/\s+/g, ' ')
                .trim();

            const fullText = `Art. ${articleNumber} ${cleanArticleText}`;
            const subject = generateArticleSubject(fullText, fileName);

            articles.push({
                number: articleNumber,
                fullReference: `Art. ${articleNumber}`,
                law: fileName.replace('.pdf', ''),
                subject: subject,
                fullText: fullText,
                paragraphs: extractParagraphsFromArticle(fullText),
                context: 'Extra√ß√£o manual',
            });

            console.log(
                `Artigo ${index + 1}: Art. ${articleNumber} - ${subject}`
            );
        }
    });

    console.log(
        `Extra√ß√£o manual finalizada: ${articles.length} artigos processados.`
    );
    return articles;
}

// ============================================
// FUN√á√ÉO PRINCIPAL DE EXTRA√á√ÉO
// ============================================
function extractAllArticles(text, fileName) {
    console.log(`\n========================================`);
    console.log(`Iniciando extra√ß√£o para: ${fileName}`);
    console.log(`========================================\n`);

    // Primeiro tenta extra√ß√£o manual
    let articles = extractArticlesManually(text, fileName);

    // Se n√£o encontrou artigos suficientes, tenta m√©todo alternativo
    if (articles.length === 0) {
        console.log('Tentando m√©todo alternativo...');
        articles = alternativeExtraction(text, fileName);
    }

    console.log(`\nTotal de artigos extra√≠dos: ${articles.length}`);
    console.log(`========================================\n`);

    return articles;
}

// ============================================
// FUN√á√ïES DE VALIDA√á√ÉO E ESTAT√çSTICAS
// ============================================
function validateExtraction(articles) {
    const stats = {
        total: articles.length,
        withParagraphs: 0,
        withoutParagraphs: 0,
        byLawType: {},
        bySubject: {},
        averageLength: 0,
        minLength: Infinity,
        maxLength: 0,
    };

    let totalLength = 0;

    articles.forEach((article) => {
        // Contagem de par√°grafos
        if (article.paragraphs && article.paragraphs.length > 0) {
            stats.withParagraphs++;
        } else {
            stats.withoutParagraphs++;
        }

        // Comprimento do texto
        const length = article.fullText.length;
        totalLength += length;
        stats.minLength = Math.min(stats.minLength, length);
        stats.maxLength = Math.max(stats.maxLength, length);

        // Tipo de lei
        const lawType = getLawType(article.law, article.fullText);
        stats.byLawType[lawType] = (stats.byLawType[lawType] || 0) + 1;

        // Assunto
        stats.bySubject[article.subject] =
            (stats.bySubject[article.subject] || 0) + 1;
    });

    stats.averageLength = Math.round(totalLength / articles.length);

    return stats;
}

function printExtractionReport(articles) {
    const stats = validateExtraction(articles);

    console.log('\n========================================');
    console.log('RELAT√ìRIO DE EXTRA√á√ÉO');
    console.log('========================================\n');

    console.log(`Total de artigos: ${stats.total}`);
    console.log(`Artigos com par√°grafos: ${stats.withParagraphs}`);
    console.log(`Artigos sem par√°grafos: ${stats.withoutParagraphs}`);
    console.log(`\nComprimento m√©dio: ${stats.averageLength} caracteres`);
    console.log(`Menor artigo: ${stats.minLength} caracteres`);
    console.log(`Maior artigo: ${stats.maxLength} caracteres`);

    console.log('\n--- Distribui√ß√£o por Tipo de Lei ---');
    Object.entries(stats.byLawType)
        .sort((a, b) => b[1] - a[1])
        .forEach(([type, count]) => {
            console.log(`${type}: ${count} artigos`);
        });

    console.log('\n--- Top 10 Assuntos Mais Frequentes ---');
    Object.entries(stats.bySubject)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10)
        .forEach(([subject, count]) => {
            console.log(`${subject}: ${count} artigos`);
        });

    console.log('\n========================================\n');
}

// ============================================
// FUN√á√ÉO DE BUSCA E FILTRO
// ============================================
function searchArticles(articles, query) {
    const queryLower = query.toLowerCase();

    return articles.filter((article) => {
        return (
            article.number.toLowerCase().includes(queryLower) ||
            article.subject.toLowerCase().includes(queryLower) ||
            article.fullText.toLowerCase().includes(queryLower) ||
            article.law.toLowerCase().includes(queryLower)
        );
    });
}

function filterByLawType(articles, lawType) {
    return articles.filter((article) => {
        return getLawType(article.law, article.fullText) === lawType;
    });
}

function filterBySubject(articles, subject) {
    return articles.filter((article) => {
        return article.subject.toLowerCase().includes(subject.toLowerCase());
    });
}

// ============================================
// FUN√á√ÉO DE EXPORTA√á√ÉO
// ============================================
function exportToJSON(articles, fileName = 'artigos_extraidos.json') {
    const data = {
        metadata: {
            totalArticles: articles.length,
            extractionDate: new Date().toISOString(),
            laws: [...new Set(articles.map((a) => a.law))],
            lawTypes: [
                ...new Set(articles.map((a) => getLawType(a.law, a.fullText))),
            ],
        },
        articles: articles,
    };

    return JSON.stringify(data, null, 2);
}

function exportToCSV(articles) {
    const headers = [
        'N√∫mero',
        'Lei',
        'Tipo de Lei',
        'Assunto',
        'Texto Completo',
        'Tem Par√°grafos',
    ];
    const rows = articles.map((article) => {
        const lawType = getLawType(article.law, article.fullText);
        const hasParagraphs =
            article.paragraphs && article.paragraphs.length > 0 ? 'Sim' : 'N√£o';

        return [
            article.number,
            article.law,
            lawType,
            article.subject,
            `"${article.fullText.replace(/"/g, '""')}"`,
            hasParagraphs,
        ].join(',');
    });

    return [headers.join(','), ...rows].join('\n');
}

// ============================================
// EXEMPLOS DE USO
// ============================================

/*
// Exemplo 1: Extrair artigos de um texto
const textoLei = `... seu texto aqui ...`;
const nomeArquivo = 'lei-complementar-1111.pdf';
const artigos = extractAllArticles(textoLei, nomeArquivo);

// Exemplo 2: Gerar relat√≥rio
printExtractionReport(artigos);

// Exemplo 3: Buscar artigos
const resultadoBusca = searchArticles(artigos, 'teletrabalho');
console.log(`Encontrados ${resultadoBusca.length} artigos sobre teletrabalho`);

// Exemplo 4: Filtrar por tipo
const artigosConstitucionais = filterByLawType(artigos, 'Direito Constitucional');
console.log(`Artigos constitucionais: ${artigosConstitucionais.length}`);

// Exemplo 5: Exportar para JSON
const jsonData = exportToJSON(artigos);
console.log(jsonData);

// Exemplo 6: Exportar para CSV
const csvData = exportToCSV(artigos);
console.log(csvData);
*/

// ============================================
// EXPORTAR FUN√á√ïES PARA USO EXTERNO
// ============================================
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        extractAllArticles,
        extractArticlesManually,
        alternativeExtraction,
        generateArticleSubject,
        getLawType,
        detectLawType,
        searchArticles,
        filterByLawType,
        filterBySubject,
        validateExtraction,
        printExtractionReport,
        exportToJSON,
        exportToCSV,
    };
}

// --- Article-based Content Generation --- //
async function generateFlashcardFromArticle(
    article,
    focus,
    specificFocus = '',
    style = 'direct'
) {
    // CORRE√á√ÉO: Melhorar o prompt para ser mais espec√≠fico
    const focusPrompts = {
        general: 'vis√£o completa e geral do artigo',
        detailed:
            'detalhes espec√≠ficos como prazos, valores, penas e qualificadoras',
        conceptual: 'defini√ß√µes e conceitos jur√≠dicos presentes',
        procedural: 'etapas, tr√¢mites e procedimentos descritos',
        specific: specificFocus || 'aspectos espec√≠ficos do artigo',
    };

    const stylePrompts = {
        direct: 'pergunta direta e resposta objetiva',
        contextual: 'situa√ß√£o pr√°tica contextualizada',
        comparative: 'compara√ß√µes com outros institutos jur√≠dicos',
        application: 'aplica√ß√£o pr√°tica do artigo',
    };

    const prompt = `
Com base EXCLUSIVAMENTE no seguinte artigo de lei, crie UM flashcard educativo no formato especificado:

**ARTIGO DE LEI:**
- Refer√™ncia: ${article.fullReference}
- Lei: ${article.law}
- Assunto: ${article.subject}
- Texto Completo: ${article.fullText || 'Texto n√£o dispon√≠vel'}
- Contexto: ${article.context || ''}

**INSTRU√á√ïES ESPEC√çFICAS:**
- Foco: ${focusPrompts[focus]}
- Estilo: ${stylePrompts[style]}
- Crie UMA pergunta clara e espec√≠fica sobre este artigo
- A resposta deve ser concisa mas completa (m√°ximo 150 palavras)
- Use terminologia jur√≠dica apropriada
- Baseie-se APENAS no texto do artigo fornecido
- A pergunta deve testar compreens√£o, n√£o apenas memoriza√ß√£o

**FORMATO DE RESPOSTA OBRIGAT√ìRIO:**
PERGUNTA: [sua pergunta aqui]
RESPOSTA: [sua resposta aqui]

N√ÉO inclua qualquer outro texto, explica√ß√µes ou coment√°rios al√©m do formato especificado.`;

    try {
        const response = await callGemini(prompt);
        console.log(
            `[DEBUG] Resposta da API para ${article.fullReference}:`,
            response
        );

        if (response) {
            let question = '';
            let answer = '';

            // CORRE√á√ÉO: M√©todo de extra√ß√£o mais robusto
            const lines = response
                .split('\n')
                .map((line) => line.trim())
                .filter((line) => line);

            for (let i = 0; i < lines.length; i++) {
                if (
                    lines[i].startsWith('PERGUNTA:') ||
                    lines[i].startsWith('Pergunta:')
                ) {
                    question = lines[i]
                        .replace(/^(PERGUNTA:|Pergunta:)\s*/i, '')
                        .trim();
                    // Verifica se a resposta est√° na mesma linha ou na pr√≥xima
                    if (
                        i + 1 < lines.length &&
                        (lines[i + 1].startsWith('RESPOSTA:') ||
                            lines[i + 1].startsWith('Resposta:'))
                    ) {
                        answer = lines[i + 1]
                            .replace(/^(RESPOSTA:|Resposta:)\s*/i, '')
                            .trim();
                    } else if (
                        question.includes('RESPOSTA:') ||
                        question.includes('Resposta:')
                    ) {
                        // Caso estejam na mesma linha
                        const parts = question.split(/RESPOSTA:|Resposta:/i);
                        question = parts[0].trim();
                        answer = parts[1] ? parts[1].trim() : '';
                    }
                    break;
                }
            }

            // Fallback se ainda n√£o encontrou
            if (!question || !answer) {
                const responseClean = response.replace(/\*\*/g, '');
                const questionMatch = responseClean.match(
                    /(PERGUNTA|Pergunta)[:\s]*([^\n\r]*)/i
                );
                const answerMatch = responseClean.match(
                    /(RESPOSTA|Resposta)[:\s]*([^\n\r]*)/i
                );

                question = questionMatch ? questionMatch[2].trim() : '';
                answer = answerMatch ? answerMatch[2].trim() : '';
            }

            // Fallback final se ainda estiver vazio
            if (!question || !answer) {
                console.warn(`Criando fallback para ${article.fullReference}`);
                question = `Explique o conte√∫do e aplica√ß√£o do ${article.fullReference}`;
                answer = `O ${article.fullReference} trata sobre: ${
                    article.subject
                }. ${
                    article.fullText
                        ? article.fullText.substring(0, 200) + '...'
                        : ''
                }`;
            }

            console.log(
                `[DEBUG] Extra√≠do -> Pergunta: "${question.substring(
                    0,
                    50
                )}...", Resposta: "${answer.substring(0, 50)}..."`
            );

            const flashcard = {
                id: `flashcard-${Date.now()}-${Math.random()
                    .toString(36)
                    .substr(2, 9)}`,
                question: question,
                answer: answer,
                chunkId: `article-${article.number}`,
                easiness: 2.5,
                interval: 1,
                repetitions: 0,
                nextReview: new Date(),
                created: new Date(),
                lastReviewed: null,
                viewCount: 0,
                isFavorite: false,
                isArchived: false,
                customName: '',
                sourceTrack: article.fileName,
                articleReference: article.fullReference,
                articleSubject: article.subject,
                law: article.law,
                generationFocus: focus,
                specificFocus: specificFocus,
                style: style,
            };

            lexiaFlashcards.push(flashcard);
            saveFlashcards();

            console.log(`‚úÖ Flashcard criado para ${article.fullReference}`);
            return flashcard;
        }
    } catch (error) {
        console.error(
            `‚ùå Erro ao gerar flashcard para ${article.fullReference}:`,
            error
        );
    }

    return null;
}

async function generateQuizFromArticle(article, contentFocus, questionNumber) {
    const focusPrompts = {
        complete: 'Crie uma quest√£o abrangente sobre todo o conte√∫do do artigo',
        definition: 'Foque nas defini√ß√µes e conceitos principais do artigo',
        penalties: 'Concentre-se nas penas, san√ß√µes e puni√ß√µes previstas',
        procedures: 'Enfatize os procedimentos e tr√¢mites descritos',
        exceptions: 'Destaque as exce√ß√µes, casos especiais e particularidades',
    };

    const prompt = `
Crie uma quest√£o de m√∫ltipla escolha baseada no seguinte artigo de lei:

**Artigo:** ${article.fullReference}
**Lei:** ${article.law}
**Assunto:** ${article.subject}
**Texto:** ${article.fullText || 'Texto n√£o dispon√≠vel'}
**Contexto:** ${article.context || ''}

**Foco:** ${focusPrompts[contentFocus]}
**Quest√£o n√∫mero:** ${questionNumber} (varie o tipo e dificuldade)

Crie uma quest√£o de m√∫ltipla escolha com 4 alternativas (A, B, C, D), sendo apenas uma correta.
A quest√£o deve ser espec√≠fica sobre este artigo e testar conhecimento jur√≠dico relevante.

Responda em formato JSON:
{
  "question": "Pergunta clara sobre o artigo",
  "options": {
    "A": "Primeira alternativa",
    "B": "Segunda alternativa", 
    "C": "Terceira alternativa",
    "D": "Quarta alternativa"
  },
  "correctAnswer": "A",
  "explanation": "Explica√ß√£o detalhada da resposta correta"
}
`;

    try {
        const response = await callGemini(prompt);
        if (response) {
            const jsonMatch = response.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const quizData = JSON.parse(jsonMatch[0]);

                // Add to quiz manager's question bank
                const question = {
                    id: `article-question-${Date.now()}-${Math.random()
                        .toString(36)
                        .substr(2, 9)}`,
                    question: quizData.question,
                    options: Object.values(quizData.options),
                    correctAnswer: quizData.correctAnswer.charCodeAt(0) - 65,
                    explanation: quizData.explanation,
                    source: 'article',
                    articleReference: article.fullReference,
                    articleSubject: article.subject,
                    law: article.law,
                    difficulty: 'medium',
                    createdAt: new Date().toISOString(),
                };

                // Add to quiz manager's question bank
                if (!quizManager.questionBank) {
                    quizManager.questionBank = [];
                }
                quizManager.questionBank.push(question);
                quizManager.saveQuizData();

                console.log(`Quest√£o criada para ${article.fullReference}`);
                return question;
            }
        }
    } catch (error) {
        console.error(
            `Erro ao gerar quest√£o para ${article.fullReference}:`,
            error
        );
    }

    return null;
}

// --- Gemini API Integration --- //
async function callGemini(prompt, model = 'gemini-2.0-flash', retryCount = 0) {
    const API_KEY = lexiaConfig.geminiApiKey;
    if (!API_KEY) {
        alert(
            'Por favor, configure sua chave da API Gemini nas configura√ß√µes.'
        );
        return null;
    }

    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${API_KEY}`;

    const requestBody = {
        contents: [
            {
                parts: [
                    {
                        text: prompt,
                    },
                ],
            },
        ],
        generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
        },
    };

    const maxRetries = 3;
    const baseDelay = 2000;

    try {
        if (retryCount > 0) {
            const delay = baseDelay * Math.pow(2, retryCount - 1);
            console.log(
                `Aguardando ${delay}ms antes de tentar novamente (tentativa ${
                    retryCount + 1
                })...`
            );
            await new Promise((resolve) => setTimeout(resolve, delay));
        }

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Gemini API Error:', errorData.error);

            // Handle rate limiting (429) and quota exceeded errors
            if (
                response.status === 429 ||
                (errorData.error && errorData.error.code === 429) ||
                (errorData.error &&
                    errorData.error.status === 'RESOURCE_EXHAUSTED')
            ) {
                if (retryCount < maxRetries) {
                    const retryDelay = baseDelay * Math.pow(3, retryCount); // Longer delay for rate limits
                    console.log(
                        `Rate limit detectado. Aguardando ${retryDelay}ms antes de tentar novamente...`
                    );
                    await new Promise((resolve) =>
                        setTimeout(resolve, retryDelay)
                    );
                    return await callGemini(prompt, model, retryCount + 1);
                } else {
                    console.error(
                        'M√°ximo de tentativas atingido para rate limit.'
                    );
                    return null;
                }
            }

            // Handle other errors with retry
            if (retryCount < maxRetries && response.status >= 500) {
                console.log(
                    `Erro ${response.status} detectado. Tentando novamente...`
                );
                return await callGemini(prompt, model, retryCount + 1);
            }

            return null;
        }

        const data = await response.json();

        // Verifica√ß√£o detalhada da resposta da API
        if (!data.candidates || data.candidates.length === 0) {
            console.error(
                'API Error: A resposta n√£o cont√©m "candidates". Pode ter sido bloqueada por seguran√ßa.',
                data
            );
            const blockReason = data.promptFeedback?.blockReason;
            if (blockReason) {
                alert(
                    `Gera√ß√£o bloqueada pela API. Motivo: ${blockReason}. Tente alterar o foco ou o conte√∫do do artigo.`
                );
            }
            return null;
        }

        if (
            data.candidates &&
            data.candidates[0] &&
            data.candidates[0].content
        ) {
            return data.candidates[0].content.parts[0].text;
        }

        console.warn(
            'API Warning: Resposta recebida, mas sem o conte√∫do esperado. Resposta completa:',
            data
        );
        return null;
    } catch (error) {
        console.error('Erro na chamada da API Gemini:', error);

        // Retry on network errors
        if (
            retryCount < maxRetries &&
            (error.name === 'NetworkError' ||
                error.name === 'TypeError' ||
                error.message.includes('fetch'))
        ) {
            console.log(
                `Erro de rede detectado. Tentando novamente em ${
                    baseDelay * (retryCount + 1)
                }ms...`
            );
            await new Promise((resolve) =>
                setTimeout(resolve, baseDelay * (retryCount + 1))
            );
            return await callGemini(prompt, model, retryCount + 1);
        }

        return null;
    }
}

// --- AI-Powered Content Generation --- //
async function generateSummary(chunk) {
    const summaryOutput = document.getElementById(`summary-${chunk.id}`);
    summaryOutput.innerHTML = '<p>Gerando resumo...</p>';

    const prompt = `
Analise o seguinte texto jur√≠dico e crie um resumo conciso e did√°tico:

TEXTO:
${chunk.text}

INSTRU√á√ïES:
- Crie um resumo de 2-3 par√°grafos
- Destaque os conceitos jur√≠dicos principais
- Use linguagem clara e objetiva
- Mantenha a precis√£o t√©cnica
- Foque nos pontos mais importantes para estudo

RESUMO:`;

    try {
        const summary = await callGemini(prompt);
        if (summary) {
            chunk.summary = summary;
            localStorage.setItem('lexia_chunks', JSON.stringify(lexiaChunks));
            summaryOutput.innerHTML = `
                <h5>Resumo:</h5>
                <p>${summary}</p>
            `;
        } else {
            summaryOutput.innerHTML = '<p>Erro ao gerar resumo.</p>';
        }
    } catch (error) {
        console.error('Erro ao gerar resumo:', error);
        summaryOutput.innerHTML = '<p>Erro ao gerar resumo.</p>';
    }
}

async function generateFlashcard(chunk) {
    const flashcardOutput = document.getElementById(`flashcard-${chunk.id}`);
    flashcardOutput.innerHTML = '<p>Gerando flashcard...</p>';

    const prompt = `
Baseado no seguinte texto jur√≠dico, crie um flashcard educativo:

TEXTO:
${chunk.text}

INSTRU√á√ïES:
- Crie uma pergunta clara e espec√≠fica sobre o conte√∫do
- A pergunta deve testar compreens√£o, n√£o memoriza√ß√£o
- A resposta deve ser concisa mas completa
- Use terminologia jur√≠dica apropriada
- Foque em conceitos importantes para concursos/estudos

Formato de resposta:
PERGUNTA: [sua pergunta aqui]
RESPOSTA: [sua resposta aqui]`;

    try {
        const flashcardText = await callGemini(prompt);
        if (flashcardText) {
            const lines = flashcardText.split('\n');
            let question = '';
            let answer = '';

            for (const line of lines) {
                if (line.startsWith('PERGUNTA:')) {
                    question = line.replace('PERGUNTA:', '').trim();
                } else if (line.startsWith('RESPOSTA:')) {
                    answer = line.replace('RESPOSTA:', '').trim();
                }
            }

            if (question && answer) {
                const flashcard = SM2Algorithm.createFlashcard(
                    `flashcard-${chunk.id}-${Date.now()}`,
                    question,
                    answer,
                    chunk.id
                );

                lexiaFlashcards.push(flashcard);
                localStorage.setItem(
                    'lexia_flashcards',
                    JSON.stringify(lexiaFlashcards)
                );

                flashcardOutput.innerHTML = `
                    <h5>Flashcard Criado:</h5>
                    <div class="generated-flashcard">
                        <p><strong>Pergunta:</strong> ${question}</p>
                        <p><strong>Resposta:</strong> ${answer}</p>
                    </div>
                `;
                updateDashboard();
            } else {
                flashcardOutput.innerHTML =
                    '<p>Erro: formato de resposta inv√°lido.</p>';
            }
        } else {
            flashcardOutput.innerHTML = '<p>Erro ao gerar flashcard.</p>';
        }
    } catch (error) {
        console.error('Erro ao gerar flashcard:', error);
        flashcardOutput.innerHTML = '<p>Erro ao gerar flashcard.</p>';
    }
}

// --- Chat AI Assistant --- //
// SUBSTITUA A SUA FUN√á√ÉO 'sendChatMessage' INTEIRA POR ESTA:

async function sendChatMessage() {
    const chatInput = document.getElementById('chat-input');
    const userMessage = chatInput.value.trim();

    if (!userMessage) return;

    addMessageToChat('user', userMessage);
    chatInput.value = '';
    chatInput.style.height = 'auto'; // Reseta a altura do textarea

    const typingIndicator = addMessageToChat('ai', 'Pensando...');

    try {
        // --- IN√çCIO DA CORRE√á√ÉO: Verifica√ß√£o de Inten√ß√£o ---
        if (isStatisticalQuery(userMessage)) {
            // Se for uma pergunta sobre estat√≠sticas, usa o novo processador
            const statResponse = handleStatisticalQuery(userMessage);
            typingIndicator.remove(); // Remove o "Pensando..."
            addMessageToChat('ai', statResponse);

            // Adiciona ao hist√≥rico do chat
            chatHistory.push({
                timestamp: new Date(),
                userMessage: userMessage,
                aiResponse: statResponse,
                relevantChunks: [], // N√£o h√° chunks de PDF para queries estat√≠sticas
            });
            saveChatHistory();
        } else {
            // Se for uma pergunta de conte√∫do, segue o fluxo normal com a IA
            const relevantChunks = await searchSimilarChunks(userMessage, 8);
            const aiResponse = await generateContextualResponse(
                userMessage,
                relevantChunks,
                chatHistory
            );

            typingIndicator.remove();
            addMessageToChat('ai', aiResponse);

            chatHistory.push({
                timestamp: new Date(),
                userMessage: userMessage,
                aiResponse: aiResponse,
                relevantChunks: relevantChunks.map((chunk) => ({
                    file: chunk.file,
                    page: chunk.page,
                    id: chunk.id,
                })),
            });
            saveChatHistory();
        }
        // --- FIM DA CORRE√á√ÉO ---
    } catch (error) {
        console.error('Erro no chat:', error);
        typingIndicator.remove();
        addMessageToChat(
            'ai',
            'Desculpe, ocorreu um erro ao processar sua pergunta. Tente novamente.'
        );
    }
}

function addMessageToChat(sender, message) {
    const chatMessages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `${sender}-message`;

    messageDiv.innerHTML = `
        <div class="message-content">
            ${message.replace(/\n/g, '<br>')}
        </div>
    `;

    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    return messageDiv;
}

// SUBSTITUA A SUA FUN√á√ÉO 'generateContextualResponse' INTEIRA POR ESTA:

async function generateContextualResponse(
    userQuestion,
    relevantChunks,
    history
) {
    if (relevantChunks.length === 0 && history.length === 0) {
        return 'N√£o encontrei informa√ß√µes relevantes nos materiais fornecidos para responder sua pergunta. Tente reformular ou fazer uma pergunta mais espec√≠fica sobre o conte√∫do dos PDFs jur√≠dicos.';
    }

    const context = relevantChunks
        .map(
            (chunk, index) =>
                `[FONTE ${index + 1}: ${chunk.file}, p√°gina ${chunk.page}]\n${
                    chunk.text
                }`
        )
        .join('\n\n');

    // --- IN√çCIO DA CORRE√á√ÉO: Construindo o hist√≥rico da conversa para o prompt ---
    const recentHistory = history.slice(-4); // Pega as √∫ltimas 4 mensagens (2 turnos)
    const historyContext = recentHistory
        .map((entry) => {
            // Limpa a resposta anterior da IA para n√£o incluir a lista de fontes
            const cleanedResponse = (entry.aiResponse || '')
                .split('üìö **Fontes consultadas:**')[0]
                .trim();
            if (entry.userMessage) {
                return `Usu√°rio: ${entry.userMessage}`;
            } else {
                return `Assistente: ${cleanedResponse}`;
            }
        })
        .join('\n');
    // --- FIM DA CORRE√á√ÉO ---

    const prompt = `
Voc√™ √© um assistente especializado em direito brasileiro. Responda √† pergunta ATUAL do usu√°rio, levando em considera√ß√£o o HIST√ìRICO DA CONVERSA para entender o contexto e o CONTEXTO DOS MATERIAIS para encontrar a resposta.

HIST√ìRICO DA CONVERSA RECENTE:
${historyContext}

CONTEXTO DOS MATERIAIS (Trechos dos PDFs):
${context}

PERGUNTA ATUAL DO USU√ÅRIO:
${userQuestion}

INSTRU√á√ïES CR√çTICAS:
- Sua resposta DEVE se basear primariamente no CONTEXTO DOS MATERIAIS.
- Use o HIST√ìRICO DA CONVERSA para entender perguntas de seguimento (como "d√™ um exemplo", "e sobre o par√°grafo 2?", etc.). A pergunta atual pode se referir ao t√≥pico da mensagem anterior.
- Se a informa√ß√£o para responder √† pergunta n√£o estiver no CONTEXTO DOS MATERIAIS, diga claramente: "N√£o encontrei informa√ß√µes relevantes nos materiais fornecidos para responder sua pergunta." N√£o invente informa√ß√µes.
- Cite TODAS as fontes espec√≠ficas (arquivo e p√°gina) para cada parte da sua resposta. Ex: (1.direito penal.pdf, p√°g. 3).
- Se a pergunta atual for um pedido de exemplo para o t√≥pico anterior e n√£o houver um exemplo expl√≠cito nos materiais, voc√™ PODE criar um exemplo did√°tico simples, desde que ele seja fiel √† defini√ß√£o encontrada nos materiais, e cite a fonte da defini√ß√£o.

RESPOSTA:`;

    try {
        const response = await callGemini(prompt);

        if (response) {
            const sources = [
                ...new Set(
                    relevantChunks.map(
                        (chunk) => `${chunk.file} (p√°g. ${chunk.page})`
                    )
                ),
            ];
            const sourcesText =
                sources.length > 0
                    ? `\n\nüìö **Fontes consultadas:** ${sources.join(', ')}`
                    : '';

            return response + sourcesText;
        } else {
            return 'Desculpe, n√£o consegui processar sua pergunta no momento. Tente novamente.';
        }
    } catch (error) {
        console.error('Erro ao gerar resposta contextual:', error);
        return 'Ocorreu um erro ao processar sua pergunta. Verifique sua conex√£o e tente novamente.';
    }
}

function calculateSimilarity(query, chunkText) {
    const queryWords = query
        .toLowerCase()
        .split(/\s+/)
        .filter((word) => word.length > 2)
        .map((word) => word.replace(/[^\w]/g, '')); // Remove punctuation

    const chunkWords = chunkText
        .toLowerCase()
        .split(/\s+/)
        .map((word) => word.replace(/[^\w]/g, ''));

    const chunkText_lower = chunkText.toLowerCase();

    let exactMatches = 0;
    let partialMatches = 0;
    let contextMatches = 0;

    for (const word of queryWords) {
        if (word.length < 3) continue;

        // Exact word matches (highest weight)
        if (chunkWords.includes(word)) {
            exactMatches++;
        }
        // Partial matches (medium weight)
        else if (
            chunkWords.some(
                (chunkWord) =>
                    chunkWord.includes(word) || word.includes(chunkWord)
            )
        ) {
            partialMatches++;
        }
        // Context matches - check if word appears in text (lowest weight)
        else if (chunkText_lower.includes(word)) {
            contextMatches++;
        }
    }

    // Weighted scoring system
    const totalScore =
        exactMatches * 3 + partialMatches * 2 + contextMatches * 1;
    const maxPossibleScore = queryWords.length * 3;

    return maxPossibleScore > 0 ? totalScore / maxPossibleScore : 0;
}

async function searchSimilarChunks(query, limit = 50) {
    if (lexiaChunks.length === 0) return [];

    console.log(`Buscando em ${lexiaChunks.length} chunks dispon√≠veis...`);

    const similarities = lexiaChunks.map((chunk) => ({
        chunk: chunk,
        similarity: calculateSimilarity(query, chunk.text),
    }));

    // Sort by similarity and include more chunks with lower threshold
    const sortedResults = similarities
        .sort((a, b) => b.similarity - a.similarity)
        .filter((item) => item.similarity >= 0); // Include all chunks, even with 0 similarity

    // If we have very few results with good similarity, expand the search
    const goodResults = sortedResults.filter((item) => item.similarity > 0.1);
    const finalLimit =
        goodResults.length < 10 ? Math.min(limit, lexiaChunks.length) : limit;

    const selectedChunks = sortedResults
        .slice(0, finalLimit)
        .map((item) => item.chunk);

    console.log(
        `Encontrados ${selectedChunks.length} chunks relevantes de ${lexiaChunks.length} totais`
    );
    console.log(
        `Fontes consultadas: ${[
            ...new Set(selectedChunks.map((c) => c.file)),
        ].join(', ')}`
    );

    return selectedChunks;
}

// SUBSTITUA TAMB√âM A FUN√á√ÉO 'loadChatHistory' POR ESTA:

function loadChatHistory() {
    const chatMessages = document.getElementById('chat-messages');
    chatMessages.innerHTML = ''; // Limpa as mensagens atuais

    // Limpa tamb√©m o cont√™iner de sugest√µes para garantir que ele comece fechado
    const suggestionsContainer = document.getElementById(
        'chat-suggestions-container'
    );
    if (suggestionsContainer) {
        suggestionsContainer.innerHTML = '';
    }

    if (chatHistory.length === 0) {
        // Se n√£o h√° hist√≥rico, mostra apenas a mensagem de boas-vindas
        addMessageToChat(
            'ai',
            'Ol√°! Sou seu assistente de estudos. Fa√ßa perguntas sobre o conte√∫do dos PDFs ou clique no √≠cone üí° para ver sugest√µes de perguntas sobre seu progresso.'
        );
    } else {
        // Se h√° hist√≥rico, carrega as mensagens
        const recentHistory = chatHistory.slice(-5); // Pega as √∫ltimas 5 para n√£o sobrecarregar
        recentHistory.forEach((entry) => {
            if (entry.userMessage) addMessageToChat('user', entry.userMessage);
            if (entry.aiResponse) addMessageToChat('ai', entry.aiResponse);
        });
    }
}

// --- Advanced Features and Gamification --- //

// Study Goals System
class StudyGoalsManager {
    constructor() {
        this.goals =
            JSON.parse(localStorage.getItem('lexia_study_goals')) || [];
        this.achievements =
            JSON.parse(localStorage.getItem('lexia_achievements')) || [];
    }

    createGoal(type, target, deadline, description) {
        const goal = {
            id: Date.now(),
            type: type, // 'flashcards', 'quiz', 'study_time', 'streak'
            target: target,
            current: 0,
            deadline: new Date(deadline),
            description: description,
            created: new Date(),
            completed: false,
        };

        this.goals.push(goal);
        this.saveGoals();
        return goal;
    }

    updateGoalProgress(type, amount = 1) {
        const activeGoals = this.goals.filter(
            (goal) => !goal.completed && goal.type === type
        );

        activeGoals.forEach((goal) => {
            goal.current += amount;
            if (goal.current >= goal.target) {
                goal.completed = true;
                goal.completedDate = new Date();
                this.unlockAchievement(`goal_${goal.type}_completed`);
            }
        });

        this.saveGoals();
    }

    unlockAchievement(achievementId) {
        if (!this.achievements.includes(achievementId)) {
            this.achievements.push(achievementId);
            this.saveAchievements();
            this.showAchievementNotification(achievementId);
        }
    }

    showAchievementNotification(achievementId) {
        const achievements = {
            goal_flashcards_completed: 'üéØ Meta de Flashcards Conclu√≠da!',
            goal_quiz_completed: 'üß† Meta de Quiz Conclu√≠da!',
            streak_7: 'üî• Sequ√™ncia de 7 dias!',
            streak_30: 'üèÜ Sequ√™ncia de 30 dias!',
            flashcards_100: 'üíØ 100 Flashcards Revisados!',
            quiz_perfect: '‚≠ê Quiz Perfeito!',
            study_master: 'üëë Mestre dos Estudos!',
        };

        const message = achievements[achievementId] || 'üéâ Nova Conquista!';

        // Create notification element
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <div class="achievement-content">
                <h4>Conquista Desbloqueada!</h4>
                <p>${message}</p>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.add('show');
        }, 100);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        }, 3000);
    }

    saveGoals() {
        localStorage.setItem('lexia_study_goals', JSON.stringify(this.goals));
    }

    saveAchievements() {
        localStorage.setItem(
            'lexia_achievements',
            JSON.stringify(this.achievements)
        );
    }

    getActiveGoals() {
        return this.goals.filter(
            (goal) => !goal.completed && new Date(goal.deadline) > new Date()
        );
    }

    getCompletedGoals() {
        return this.goals.filter((goal) => goal.completed);
    }
}

// Study Streak System
class StudyStreakManager {
    constructor() {
        this.streakData = JSON.parse(
            localStorage.getItem('lexia_study_streak')
        ) || {
            currentStreak: 0,
            longestStreak: 0,
            lastStudyDate: null,
            studyDates: [],
        };
    }

    recordStudySession() {
        const today = new Date().toISOString().split('T')[0];

        if (!this.streakData.studyDates.includes(today)) {
            this.streakData.studyDates.push(today);

            if (this.streakData.lastStudyDate) {
                const lastDate = new Date(this.streakData.lastStudyDate);
                const todayDate = new Date(today);
                const daysDiff = Math.floor(
                    (todayDate - lastDate) / (1000 * 60 * 60 * 24)
                );

                if (daysDiff === 1) {
                    this.streakData.currentStreak++;
                } else if (daysDiff > 1) {
                    this.streakData.currentStreak = 1;
                }
            } else {
                this.streakData.currentStreak = 1;
            }

            this.streakData.lastStudyDate = today;

            if (this.streakData.currentStreak > this.streakData.longestStreak) {
                this.streakData.longestStreak = this.streakData.currentStreak;
            }

            // Check for streak achievements
            if (this.streakData.currentStreak === 7) {
                studyGoalsManager.unlockAchievement('streak_7');
            } else if (this.streakData.currentStreak === 30) {
                studyGoalsManager.unlockAchievement('streak_30');
            }

            this.saveStreak();
        }
    }

    saveStreak() {
        localStorage.setItem(
            'lexia_study_streak',
            JSON.stringify(this.streakData)
        );
    }

    getCurrentStreak() {
        // Check if streak is still valid (studied yesterday or today)
        const today = new Date();
        const lastStudy = this.streakData.lastStudyDate
            ? new Date(this.streakData.lastStudyDate)
            : null;

        if (lastStudy) {
            const daysDiff = Math.floor(
                (today - lastStudy) / (1000 * 60 * 60 * 24)
            );
            if (daysDiff > 1) {
                this.streakData.currentStreak = 0;
                this.saveStreak();
            }
        }

        return this.streakData.currentStreak;
    }
}

// Advanced Statistics
function generateAdvancedStats() {
    const totalFlashcards = lexiaFlashcards.length;
    const totalQuizzes = quizManager.quizHistory.length;

    // Calcular precis√£o
    const totalQuestions = quizManager.quizHistory.reduce(
        (sum, quiz) => sum + quiz.questions.length,
        0
    );
    const correctAnswers = quizManager.quizHistory.reduce(
        (sum, quiz) => sum + quiz.score,
        0
    );
    const accuracy =
        totalQuestions > 0
            ? ((correctAnswers / totalQuestions) * 100).toFixed(1)
            : 0;

    // Mat√©ria mais estudada
    const subjectStats = {};
    lexiaFlashcards.forEach((card) => {
        const chunk = lexiaChunks.find((c) => c.id === card.chunkId);
        if (chunk) {
            subjectStats[chunk.file] = (subjectStats[chunk.file] || 0) + 1;
        }
    });

    const mostStudiedSubject = Object.keys(subjectStats).reduce(
        (a, b) => (subjectStats[a] > subjectStats[b] ? a : b),
        'Nenhum'
    );

    return {
        totalFlashcards,
        totalQuizzes,
        accuracy,
        mostStudiedSubject,
        totalQuestions,
        correctAnswers,
    };
}

// Study Session Timer
class StudySessionTimer {
    constructor() {
        this.startTime = null;
        this.isRunning = false;
        this.totalTime = 0;
    }

    start() {
        if (!this.isRunning) {
            this.startTime = Date.now();
            this.isRunning = true;
        }
    }

    stop() {
        if (this.isRunning) {
            this.totalTime += Date.now() - this.startTime;
            this.isRunning = false;

            // Record study session
            studyStreakManager.recordStudySession();

            // Update daily progress
            const today = new Date().toISOString().split('T')[0];
            if (!lexiaProgress[today]) {
                lexiaProgress[today] = {
                    flashcardsReviewed: 0,
                    quizzesCompleted: 0,
                    timeStudied: 0,
                };
            }
            lexiaProgress[today].timeStudied += Math.floor(
                this.totalTime / 1000 / 60
            ); // minutes
            localStorage.setItem(
                'lexia_progress',
                JSON.stringify(lexiaProgress)
            );

            this.totalTime = 0;
        }
    }

    getElapsedTime() {
        if (this.isRunning) {
            return this.totalTime + (Date.now() - this.startTime);
        }
        return this.totalTime;
    }
}

// Agora inicializamos as inst√¢ncias
let studyGoalsManager = new StudyGoalsManager();
let studyStreakManager = new StudyStreakManager();
let studyTimer = new StudySessionTimer();

// ADICIONAR ESTA FUN√á√ÉO NOVA:
function getTotalQuizTime() {
    let totalTime = 0;
    quizManager.quizHistory.forEach((quiz) => {
        if (quiz.startTime && quiz.endTime) {
            const start = new Date(quiz.startTime);
            const end = new Date(quiz.endTime);
            totalTime += end - start; // tempo em milissegundos
        }
    });
    // Converter para minutos
    return Math.floor(totalTime / 1000 / 60);
}

// Enhanced Dashboard with Advanced Features
function renderAdvancedDashboard() {
    const stats = generateAdvancedStats();
    const totalQuizTime = getTotalQuizTime();

    const dashboardSection = document.getElementById('dashboard');
    dashboardSection.innerHTML = `
        <div class="advanced-dashboard">
            <h2>Dashboard</h2>
            
            <div class="dashboard-grid">
                <div class="stats-section">
                    <h3>Estat√≠sticas Gerais</h3>
                    <div class="stats-cards">
                        <div class="stat-card">
                            <div class="stat-icon">üÉè</div>
                            <div class="stat-info">
                                <h4>${stats.totalFlashcards}</h4>
                                <p>Flashcards Criados</p>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">üß†</div>
                            <div class="stat-info">
                                <h4>${stats.totalQuizzes}</h4>
                                <p>Quizzes Realizados</p>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">üéØ</div>
                            <div class="stat-info">
                                <h4>${stats.accuracy}%</h4>
                                <p>Precis√£o Geral</p>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">‚è±Ô∏è</div>
                            <div class="stat-info">
                                <h4>${totalQuizTime}min</h4>
                                <p>Tempo de Estudo</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function renderStreakCalendar() {
    const today = new Date();
    const last7Days = [];

    for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        const dateStr = date.toISOString().split('T')[0];
        const hasStudied =
            studyStreakManager.streakData.studyDates.includes(dateStr);

        last7Days.push(`
            <div class="calendar-day ${hasStudied ? 'studied' : ''}">
                <span class="day-number">${date.getDate()}</span>
            </div>
        `);
    }

    return last7Days.join('');
}

function renderAchievements(achievements) {
    const allAchievements = {
        goal_flashcards_completed: { icon: 'üéØ', name: 'Meta de Flashcards' },
        goal_quiz_completed: { icon: 'üß†', name: 'Meta de Quiz' },
        streak_7: { icon: 'üî•', name: 'Sequ√™ncia de 7 dias' },
        streak_30: { icon: 'üèÜ', name: 'Sequ√™ncia de 30 dias' },
        flashcards_100: { icon: 'üíØ', name: '100 Flashcards' },
        quiz_perfect: { icon: '‚≠ê', name: 'Quiz Perfeito' },
        study_master: { icon: 'üëë', name: 'Mestre dos Estudos' },
    };

    return Object.keys(allAchievements)
        .map((id) => {
            const achievement = allAchievements[id];
            const unlocked = achievements.includes(id);

            return `
            <div class="achievement-badge ${unlocked ? 'unlocked' : 'locked'}">
                <div class="achievement-icon">${
                    unlocked ? achievement.icon : 'üîí'
                }</div>
                <div class="achievement-name">${achievement.name}</div>
            </div>
        `;
        })
        .join('');
}

function showDetailedStatsModal() {
    const stats = generateAdvancedStats();
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content detailed-stats-modal">
            <h3>üìä Estat√≠sticas Detalhadas</h3>
            <div class="detailed-stats-grid">
                <div class="stats-category">
                    <h4>üìö Estudo Geral</h4>
                    <div class="stat-row">
                        <span>Total de Flashcards:</span>
                        <strong>${stats.totalFlashcards}</strong>
                    </div>
                    <div class="stat-row">
                        <span>Quizzes Realizados:</span>
                        <strong>${stats.totalQuizzes}</strong>
                    </div>
                    <div class="stat-row">
                        <span>Tempo Total de Estudo:</span>
                        <strong>${Math.floor(stats.totalStudyTime / 60)}h ${
        stats.totalStudyTime % 60
    }min</strong>
                    </div>
                    <div class="stat-row">
                        <span>Mat√©ria Mais Estudada:</span>
                        <strong>${stats.mostStudiedSubject}</strong>
                    </div>
                </div>
                
                <div class="stats-category">
                    <h4>üéØ Performance</h4>
                    <div class="stat-row">
                        <span>Precis√£o Geral:</span>
                        <strong>${stats.accuracy}%</strong>
                    </div>
                    <div class="stat-row">
                        <span>Total de Quest√µes:</span>
                        <strong>${stats.totalQuestions}</strong>
                    </div>
                    <div class="stat-row">
                        <span>Respostas Corretas:</span>
                        <strong>${stats.correctAnswers}</strong>
                    </div>
                    <div class="stat-row">
                        <span>Taxa de Acerto:</span>
                        <strong>${
                            stats.totalQuestions > 0
                                ? (
                                      (stats.correctAnswers /
                                          stats.totalQuestions) *
                                      100
                                  ).toFixed(1)
                                : 0
                        }%</strong>
                    </div>
                </div>
                
                <div class="stats-category">
                    <h4>üî• Sequ√™ncias</h4>
                    <div class="stat-row">
                        <span>Sequ√™ncia Atual:</span>
                        <strong>${stats.currentStreak} dias</strong>
                    </div>
                    <div class="stat-row">
                        <span>Melhor Sequ√™ncia:</span>
                        <strong>${stats.longestStreak} dias</strong>
                    </div>
                    <div class="stat-row">
                        <span>Dias Estudados:</span>
                        <strong>${
                            studyStreakManager.streakData.studyDates.length
                        }</strong>
                    </div>
                </div>
                
                <div class="stats-category">
                    <h4>üèÜ Conquistas</h4>
                    <div class="stat-row">
                        <span>Conquistas Desbloqueadas:</span>
                        <strong>${
                            studyGoalsManager.achievements.length
                        }/7</strong>
                    </div>
                    <div class="stat-row">
                        <span>Metas Conclu√≠das:</span>
                        <strong>${
                            studyGoalsManager.getCompletedGoals().length
                        }</strong>
                    </div>
                    <div class="stat-row">
                        <span>Metas Ativas:</span>
                        <strong>${
                            studyGoalsManager.getActiveGoals().length
                        }</strong>
                    </div>
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn-secondary" id="close-stats-modal">Fechar</button>
                <button class="btn-primary" id="export-stats">Exportar Estat√≠sticas</button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    document
        .getElementById('close-stats-modal')
        .addEventListener('click', () => {
            document.body.removeChild(modal);
        });

    document.getElementById('export-stats').addEventListener('click', () => {
        const statsData = {
            timestamp: new Date().toISOString(),
            stats: stats,
            goals: studyGoalsManager.goals,
            achievements: studyGoalsManager.achievements,
            streakData: studyStreakManager.streakData,
            progress: lexiaProgress,
        };

        const blob = new Blob([JSON.stringify(statsData, null, 2)], {
            type: 'application/json',
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `lexia_statistics_${
            new Date().toISOString().split('T')[0]
        }.json`;
        a.click();
        URL.revokeObjectURL(url);
    });
}

function showCreateGoalModal() {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content">
            <h3>Criar Nova Meta</h3>
            <form id="goal-form">
                <div class="form-group">
                    <label for="goal-type">Tipo de Meta:</label>
                    <select id="goal-type" required>
                        <option value="flashcards">Revisar Flashcards</option>
                        <option value="quiz">Fazer Quizzes</option>
                        <option value="study_time">Tempo de Estudo (minutos)</option>
                        <option value="streak">Manter Sequ√™ncia (dias)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="goal-target">Meta (n√∫mero):</label>
                    <input type="number" id="goal-target" min="1" required>
                </div>
                <div class="form-group">
                    <label for="goal-deadline">Prazo:</label>
                    <input type="date" id="goal-deadline" required>
                </div>
                <div class="form-group">
                    <label for="goal-description">Descri√ß√£o:</label>
                    <input type="text" id="goal-description" placeholder="Ex: Revisar 50 flashcards esta semana" required>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-primary">Criar Meta</button>
                    <button type="button" class="btn-secondary" id="cancel-goal">Cancelar</button>
                </div>
            </form>
        </div>
    `;

    document.body.appendChild(modal);

    document.getElementById('goal-form').addEventListener('submit', (e) => {
        e.preventDefault();

        const type = document.getElementById('goal-type').value;
        const target = parseInt(document.getElementById('goal-target').value);
        const deadline = document.getElementById('goal-deadline').value;
        const description = document.getElementById('goal-description').value;

        studyGoalsManager.createGoal(type, target, deadline, description);
        document.body.removeChild(modal);
        renderAdvancedDashboard();
    });

    document.getElementById('cancel-goal').addEventListener('click', () => {
        document.body.removeChild(modal);
    });
}

// Update existing functions to use advanced features
const originalUpdateDashboard = updateDashboard;
updateDashboard = function () {
    renderAdvancedDashboard();
};

// Hook into existing review functions to update goals
function enhancedFlashcardReview(cardsToReview, reviewType) {
    startFlashcardReview(cardsToReview, reviewType);
    studyGoalsManager.updateGoalProgress('flashcards', cardsToReview.length);
}

// Auto-save study session when user leaves
window.addEventListener('beforeunload', () => {
    studyTimer.stop();
});
